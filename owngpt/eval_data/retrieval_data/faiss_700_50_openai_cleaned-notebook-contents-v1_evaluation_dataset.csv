Question,Answer,Source,Retrived_doc_1_source,Retrived_doc_1_id,Retrived_doc_1_content,Retrived_doc_1_score,Retrived_doc_2_source,Retrived_doc_2_id,Retrived_doc_2_content,Retrived_doc_2_score,Retrived_doc_3_source,Retrived_doc_3_id,Retrived_doc_3_content,Retrived_doc_3_score,Retrived_doc_4_source,Retrived_doc_4_id,Retrived_doc_4_content,Retrived_doc_4_score,Retrived_doc_5_source,Retrived_doc_5_id,Retrived_doc_5_content,Retrived_doc_5_score,Retrived_doc_6_source,Retrived_doc_6_id,Retrived_doc_6_content,Retrived_doc_6_score,Retrived_doc_7_source,Retrived_doc_7_id,Retrived_doc_7_content,Retrived_doc_7_score,Retrived_doc_8_source,Retrived_doc_8_id,Retrived_doc_8_content,Retrived_doc_8_score,Retrived_doc_9_source,Retrived_doc_9_id,Retrived_doc_9_content,Retrived_doc_9_score,Retrived_doc_10_source,Retrived_doc_10_id,Retrived_doc_10_content,Retrived_doc_10_score,recall@1,recall@2,recall@3,recall@4,recall@5,recall@6,recall@7,recall@8,recall@9,recall@10
What is PyTorch?,"It’s a Python based scientific computing package targeted at two sets of audiences:
A replacement for numpy to use the power of GPUs
a deep learning research platform that provides maximum flexibility and speed",notebook 3_1,notebook 3_1,0.0,"markdown:
# Credits

This is heavily based on https://github.com/pytorch/tutorials'

 
markdown:
# What is PyTorch?

> **NOTE** In the last part of this lab cuda is used. If you have a cuda enabled machine, read the README.md in the root of this repo on how to use nvidia-docker.


It’s a Python based scientific computing package targeted at two sets of
audiences:
-  A replacement for numpy to use the power of GPUs
-  a deep learning research platform that provides maximum flexibility
   and speed'

 
markdown:
# Getting Started

In this lab you will get a quick start on what pytorch is and how to use it.

## 1. Tensors

Tensors are similar to numpy’s ndarrays, with the addition being that
Tensors can also be used on a GPU to accelerate computing.'

 
code:
['import torch'

 
markdown:
Construct a 5x3 matrix, uninitialized'

 
code:
x = torch.Tensor(5, 3)
print(x)'

 
markdown:
Construct a randomly initialized matrix'

 
code:
x = torch.rand(5, 3)
print(x)'

 
markdown:
['Get its size'

 
code:
print(x.size())'

 
markdown:
**NOTE**: `torch.Size` is in fact a tuple, so it supports the same operations that a tuple supports.'

 
code:
x[1:3] = 2
print(x)'

 
markdown:
# Assignment

Make use of the pytorch docs <http://pytorch.org/docs/torch>
1. Make a tensor of size (2, 17)
2. Make a torch.FloatTensor of size (3, 1)
3. Make a torch.LongTensor of size (5, 2, 1)
  - fill the entire tensor with 7s
4. Make a torch.ByteTensor of size (5,)
  - fill the middle 3 indices with ones such that it records [0, 1, 1, 1, 0]'

 
markdown:
## 2. Operations', ""There are multiple syntaxes for operations. Let's see addition as an example:"", '
### 2.1 Addition: syntax 1'

 
code:
y = torch.rand(5, 3)
print(x + y)'

 
markdown:
### 2.2 Addition: syntax 2'

 
code:
print(torch.add(x, y))'

 
markdown:
### 2.3 Addition: giving an output tensor'

 
code:
result = torch.Tensor(5, 3)
torch.add(x, y, out=result)
print(result)'

 
markdown:
### 2.4 Addition: in-place

adds `x`to `y`'

 
code:
y.add_(x)
print(y)'

 
markdown:
**NOTE**: Any operation that mutates a tensor in-place is post-fixed with an `_`. For example: `x.copy_(y)`, `x.t_()`, will change `x`.'

 
markdown:
You can use standard numpy-like indexing with all bells and whistles!'

 
code:
print(x[:, 1])'",0.40881842374801636,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.4396286606788635,notebook 3_2,0.0,"markdown:
# Credits

This is heavily influenced or copied from https://github.com/pytorch/tutorials'

 
markdown:
# Autograd: automatic differentiation

Central to all neural networks in PyTorch is the ``autograd`` package.
Let’s first briefly visit this, and we will then go to training our first neural network.

The `autograd` package provides automatic differentiation for all operations on Tensors.
It is a define-by-run framework, which means that your backprop is defined by how your code is run, and that every single iteration can be different.

Let us see this in more simple terms with some examples.'

 
markdown:
## 1. Tensor

`torch.Tensor` is the central class of the package. Setting the attribute `.requires_grad` to `True` will make the tensor ""record"" all operations on it. When you finish your computation you can call `.backward()` and have all the gradients computed automatically. The gradient for this tensor will be accumulated into the `.grad` attribute.

![autograd.Variable](../static_files/autograd-variable.png)

There’s one more class which is very important for autograd implementation - a `Function`.

`Tensor` and `Function` are interconnected and build up an acyclic graph, that encodes a complete history of computation. Each tensor has a `.grad_fn` attribute that references a `Function` that has created the `Tensor` (except for Tensors created by the user - their `grad_fn` is `None`).

If you want to compute the derivatives, you can call `.backward()` on a Tensor. If `Tensor` is a scalar (i.e. it holds a one element data), you don’t need to specify any arguments to backward(), however if it has more elements, you need to specify a `gradient` argument that is a tensor of matching shape.'

 
code:
['import torch'

 
markdown:
Create a tensor'

 
code:
x = torch.ones(2, 2, requires_grad=True)
print(x)'

 
markdown:
Do a tensor operation:'

 
code:
y = x + 2
print(y)'

 
markdown:
`y` was created as a result of an operation, so it has a `grad_fn`.'

 
code:
print(y.grad_fn)'

 
markdown:
Do more operations on y'

 
code:
z = y * y * 3
out = z.mean()

print(z)
print(out)'

 
markdown:
# Assignments

1. Create a Tensor that `requires_grad` of size (5, 5)
2. Sum the values in the Tensor'

 
markdown:
## 2. Gradients

Let’s backprop now. Because `out` contains a single scalar, `out.backward()` is equivalent to `out.backward(torch.tensor([1.0]))`'

 
code:
out.backward()'

 
markdown:
Print gradients d(out)/dx'

 
code:
'print(x.grad)'

 
markdown:
You should have a matrix of `4.5`. Let’s denote the tensor `out` with $o$.

We have:
$o = \\frac{1}{4}\\sum_i z_i$, $z_i = 3(x_i+2)^2$ and $z_i\\bigr\\rvert_{x_i=1} = 27$.",0.4401366114616394,notebook 3_3,2.0,"code:
import torch
from torch import nn
import torch.nn.functional as F'

 
markdown:
[`Parameters`](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter) have a very special property when used with [`Module`](https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=module#torch.nn.Module)s - when they’re assigned as `Module` attributes they are automatically added to the list of its parameters, and will appear e.g. in the `parameters()` iterator. \\
Assigning a Tensor doesn’t have such effect. This is because one might want to cache some temporary state (more on this later) in the model. If there was no such class as `Parameter`, these temporaries would get registered too.'

 
code:
class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        # Setting up variables, these variables are weights in your 
        # network that can be updated while running our graph.
        # Notice, to make a hidden layer, the weights need to have the 
        # following dimensionality:
        #   W[number_of_units_going_out, number_of_units_going_in]
        #   b[number_of_units_going_out]
        # in the example below we have 2 input units (num_features) and 2 output units (num_output)
        # so our weights become W[2, 2], b[2]
        # if we want to make a hidden layer with 100 units, we need to define the shape of the
        # first weight to W[100, 2], b[2] and the shape of the second weight to W[2, 100], b[2]
        
        # first layer
        self.W_1 = nn.Parameter(torch.randn(num_output, num_features)) 
        self.b_1 = nn.Parameter(torch.randn(num_output))
        
        # second layer (to be completed as an exercise)
        # NB when you create a second layer, remember that you also must change parts of the first layer
        # self.W_2 = <YOUR CODE HERE>
        # self.b_2 = <YOUR CODE HERE>
        
    def forward(self, x):
        # Setting up ops, these ops will define edges along our computational graph
        # The below ops will compute a logistic regression, 
        # but can be modified to compute a neural network
        x = F.linear(x, self.W_1, self.b_1)
        
        # second layer (to be completed as an exercise)
        # NB when you create a second layer, remember that you also must change parts of the first layer
        # x = F.linear(x, self.W_2, self.b_2)
        return F.softmax(x, dim=1) # softmax to be performed on the second dimension

net = Net()'

 
markdown:
Knowing how to print your tensors is useful'

 
code:
# list all parameters in your network
print(""NAMED PARAMETERS"")
print(list(net.named_parameters()))
print()
# the .parameters() method simply gives the Tensors in the list
print(""PARAMETERS"")
print(list(net.parameters()))
print()",0.4700148105621338,notebook 3_3,0.0,"markdown:
# Purpose and goals
In this notebook you will implement a simple neural network in PyTorch.

The building blocks of PyTorch are Tensors, and Operations, with these we can form dynamic computational graphs that represent neural networks.', ""In this exercise we'll start right away by defining a logistic regression model using these simple building blocks."", ""We'll initially start with a simple 2D and binary (i.e. two-class) classification problem where the class decision boundary can be visualized."", 'Initially we show that logistic regression can only separate classes linearly.
Adding a nonlinear hidden layer to the algorithm permits nonlinear class separation.

In this notebook you should:
* **First** run the code as is, and see what it does.
* **Then** modify the code, following the instructions in the bottom of the notebook.
* **Lastly** play around a bit, and do some small experiments that you come up with.

> We assume that you are already familiar with backpropagation (if not please see [Andrej Karpathy](http://cs.stanford.edu/people/karpathy/) or [Michal Nielsen](http://neuralnetworksanddeeplearning.com/chap2.html)).'

 
markdown:
# Dependencies and supporting functions
Load dependencies and supporting functions by running the code block below.'

 
code:
%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import sklearn.datasets

# Do not worry about the code below for now, it is used for plotting later
def plot_decision_boundary(pred_func, X, y):
    #from https://github.com/dennybritz/nn-from-scratch/blob/master/nn-from-scratch.ipynb
    # Set min and max values and give it some padding
    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
    
    h = 0.01
    # Generate a grid of points with distance h between them
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    ', ""    yy = yy.astype('float32')"", ""    xx = xx.astype('float32')"", '    # Predict the function value for the whole gid
    Z = pred_func(np.c_[xx.ravel(), yy.ravel()])[:,0]
    Z = Z.reshape(xx.shape)
    # Plot the contour and training examples
    plt.figure()
    plt.contourf(xx, yy, Z, cmap=plt.cm.RdBu)
    plt.scatter(X[:, 0], X[:, 1], c=-y, cmap=plt.cm.Spectral)

def onehot(t, num_classes):
    out = np.zeros((t.shape[0], num_classes))
    for row, col in enumerate(t):
        out[row, col] = 1
    return out'

 
markdown:
# Problem ', ""We'll initally demonstrate that Multi-layer Perceptrons (MLPs) can classify nonlinear problems, whereas a simple logistic regression model cannot."", 'For ease of visualization and computational speed we initially experiment on the simple 2D half-moon dataset, visualized below.'",0.47367244958877563,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",0.476012259721756,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.48076415061950684,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.48588383197784424,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.4866589307785034,notebook 4_2,1.0,"print(""\Test data"")
print(""Number of points:"", len(test_set))
x, y = next(iter(test_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(test_set.targets))} (unique labels: {set(test_set.targets)})"")

n_classes = len(set(test_set.targets))'

 
markdown:
### Show example images

Run multiple times to see different examples.'

 
code:
# Get random training images and show them.
images, labels = next(iter(train_loader))
show_image(torchvision.utils.make_grid(images))'

 
markdown:
## Define a convolutional neural network


**Assignment 1:** Define a convolutional neural network. 
You may use the code from previous notebooks.
We suggest that you start with a small network, and make sure that everything is working.
Once you can train successfully, come back and improve the architecture.'

 
code:
class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.num_classes = num_classes
        # Your code here!

    def forward(self, x):
        # Your code here!
        return x


model = Model(n_classes)', ""device = torch.device('cpu')  # use cuda or cpu"", 'model.to(device)
print(model)'

 
markdown:
## Define a loss function and optimizer

**Assignment 2:** Define the loss function and optimizer.
You might need to experiment a bit with the learning rate.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network

**Assignment 3:** Finish the training loop below. 
Start by using a small number of epochs (e.g. 2).
Even with a low number of epochs you should be able to see results that are better than chance.
When everything is working increase the number of epochs to find out how good your network really is.'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 32, 32, device=device))
print(""Output shape:"", out.size())
print(f""Output logits:\{out.detach().cpu().numpy()}"")
print(f""Output probabilities:\{out.softmax(1).detach().cpu().numpy()}"")'

 
code:
batch_size = 64
num_epochs = 2
validation_every_steps = 500

step = 0
model.train()",0.48802825808525085,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What is the MNIST dataset?,"MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).
<image>",notebook 3_4,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",0.3805564045906067,notebook 7_1,2.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",0.39594921469688416,notebook 3_4,1.0,"code:
# plot a few MNIST examples
idx, dim, classes = 0, 28, 10
# create empty canvas
canvas = np.zeros((dim*classes, classes*dim))

# fill with tensors
for i in range(classes):
    for j in range(classes):
        canvas[i*dim:(i+1)*dim, j*dim:(j+1)*dim] = x_train[idx].reshape((dim, dim))
        idx += 1

# visualize matrix of tensors as gray scale image
plt.figure(figsize=(4, 4))', ""plt.axis('off')"", ""plt.imshow(canvas, cmap='gray')"", ""plt.title('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
## Model

One of the large challenges in deep learning is the amount of hyperparameters that needs to be selected, and the lack of a good principled way of selecting them.
Hyperparameters can be found by experience (guessing) or some search procedure (often quite slow).
Random search is easy to implement and performs decent: http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf . 
More advanced search procedures include [Spearmint](https://github.com/JasperSnoek/spearmint) and many others.

**In practice a lot of trial and error is almost always involved.** This can be frustrating and time consuming, but the best thing to do is to think as a scientist, and go about it in a ordered manner --> monitor as much as you can, take notes, and be deliberate!

Below are some guidelines that you can use as a starting point to some of the most important hyperparameters. 
(*regularization* is also very important, but will be covered later.)


### Ballpark estimates of hyperparameters
__Number of hidden units and network structure:__', ""You'll have to experiment. One rarely goes below 512 units for feedforward networks (unless your are training on CPU...)."", ""There's some research into stochastic depth networks: https://arxiv.org/pdf/1603.09382v2.pdf, but in general this is trial and error."", '
__Parameter initialization:__
Parameter initialization is extremely important.
PyTorch has a lot of different initializers, check the [PyTorch API](http://pytorch.org/docs/master/nn.html#torch-nn-init). Often used initializer are
1. Kaiming He
2. Xavier Glorot
3. Uniform or Normal with small scale (0.1 - 0.01)
4. Orthogonal (this usually works very well for RNNs)

Bias is nearly always initialized to zero using the [torch.nn.init.constant(tensor, val)](http://pytorch.org/docs/master/nn.html#torch.nn.init.constant)

__Mini-batch size:__
Usually people use 16-256. Bigger is not allways better. With smaller mini-batch size you get more updates and your model might converge faster. Also small batch sizes use less memory, which means you can train a model with more parameters.",0.41540971398353577,notebook 4_2,0.0,"markdown:
# CNN on CIFAR-10

In this notebook you need to put what you have learned into practice, and create your own convolutional classifier for the CIFAR-10 dataset.

The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes. See examples below.

![cifar10](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/cifar10.png?raw=1)'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import make_grid
from sklearn import metrics

sns.set_style(""whitegrid"")

def accuracy(target, pred):
    return metrics.accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def compute_confusion_matrix(target, pred, normalize=None):
    return metrics.confusion_matrix(
        target.detach().cpu().numpy(), 
        pred.detach().cpu().numpy(),
        normalize=normalize
    )

def show_image(img):
    img = img.detach().cpu()
    img = img / 2 + 0.5   # unnormalize
    with sns.axes_style(""white""):
        plt.figure(figsize=(8, 8))
        plt.imshow(img.permute((1, 2, 0)).numpy())', ""        plt.axis('off')"", '        plt.show()'

 
code:
# The output of torchvision datasets are PIL images in the range [0, 1]. 
# We transform them to PyTorch tensors and rescale them to be in the range [-1, 1].
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),  # subtract 0.5 and divide by 0.5
    ]
)

batch_size = 64  # both for training and testing

# Load datasets', ""train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)"", ""test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)"", 'train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=0, drop_last=False)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=0, drop_last=True)

# Map from class index to class name.
classes = {index: name for name, index in train_set.class_to_idx.items()}'

 
code:
print(""Training data"")
print(""Number of points:"", len(train_set))
x, y = next(iter(train_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(train_set.targets))} (unique labels: {set(train_set.targets)})"")",0.429506778717041,notebook 4_3,0.0,"markdown:
# Transfer learning on the Caltech101 dataset

In this notebook, we will consider a more complex dataset than MNIST or CIFAR10. The images in Caltech101 are RGB images (3 channels) with variable size. There are 101 different classes. We will try a very common practice in computer vision nowadays: transfer learning from a pre-trained ImageNet model. 

Roadmap:
- Modify the network from the previous exercise (CIFAR-10) to work with 224x224 images.
- Train the model for a while on Caltech101 and see how far we can get.
- Take a ResNet34 that was pre-trained on ImageNet-1k and fine-tune it to Caltech101.
  - Consider both training only the head (the linear classifier at the end of the network) or the entire network.
  - We should be able to reach better performance than our original network in fewer training steps.
- Optional: play around with other pre-trained models from `timm` (see info [here](https://github.com/rwightman/pytorch-image-models)).'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
from typing import List, Optional, Callable, Iterator
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torchvision import transforms
from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, Dataset, Subset

sns.set_style(""whitegrid"")

!pip install timm
import timm

def accuracy(target, pred):
    return accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def show_image(img, title=None):
    img = img.detach().cpu()
    img = img.permute((1, 2, 0)).numpy()
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    img = std * img + mean   # unnormalize
    img = np.clip(img, 0, 1)
    plt.imshow(img)
    plt.gca().tick_params(axis=""both"", which=""both"", bottom=False, left=False, labelbottom=False, labelleft=False)
    if title is not None:
        plt.title(title)'

 
markdown:
### Set up dataset'

 
code:
imagenet_mean = [0.485, 0.456, 0.406]
imagenet_std = [0.229, 0.224, 0.225]
default_imagenet_normalization = transforms.Normalize(mean=imagenet_mean, std=imagenet_std)
train_transform = transforms.Compose([
    transforms.RandomResizedCrop(224, scale=(0.25, 1)),  # crop of random size and aspect ratio, resize to square
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    default_imagenet_normalization,
])
test_transform = transforms.Compose([
    transforms.Resize(224),  # keep aspect ratio
    transforms.CenterCrop(224),  # square crop
    transforms.ToTensor(),
    default_imagenet_normalization,
])",0.43632155656814575,notebook 4_3,1.0,"batch_size = 64  # both for training and testing

# Load dataset (downloaded automatically if missing).', ""dataset = torchvision.datasets.Caltech101(root='./data', download=True)"", '

def translate_label(y, keep_classes):
    try:
        return keep_classes.index(y)
    except ValueError:
        return -1


# Filter images such that no class has more than 100 examples.
# Loop through dataset in random order, include each image (its index) only if there are 
# fewer than 100 images of the same class.
# Here we also remove the classes ""Faces"" and ""Faces_easy"".
skip_classes = [0, 1]   # ""Faces"" and ""Faces_easy""
keep_classes = [c for c in range(len(dataset.categories)) if c not in skip_classes]
indices = list(range(len(dataset)))
random.shuffle(indices)
new_indices = []
current_class_size = {class_number: 0 for class_number in np.unique(dataset.y)}
for i in indices:
    class_number = dataset.y[i]
    if class_number not in skip_classes and current_class_size[class_number] < 100:
        new_indices.append(i)
        current_class_size[class_number] += 1
indices = new_indices

# Compute subset of labels given new indices selection
labels = [translate_label(dataset.y[i], keep_classes) for i in indices]
assert max(labels) == 98

test_size = 640
train_size = len(indices) - test_size
train_idx, test_idx = train_test_split(
    indices,
    train_size=train_size,
    test_size=test_size,
    shuffle=True,
    random_state=42,  # always get the same split
    stratify=labels,
)


class DatasetSubsetWithTransform(Subset):
    
    def __init__(self, dataset, indices, transform=None):
        super().__init__(dataset, indices)
        self.transform = transform
        
    def __getitem__(self, idx):
        x, y = super().__getitem__(idx)
        # Convert PIL image to RGB (some of them are greyscale)', ""        x = x.convert('RGB')"", '        if self.transform is not None:
            x = self.transform(x)
        y = translate_label(y, keep_classes)
        return x, y
    

train_set = DatasetSubsetWithTransform(dataset, train_idx, train_transform)
test_set = DatasetSubsetWithTransform(dataset, test_idx, test_transform)
train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, drop_last=True)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, drop_last=False)'

 
markdown:
### A closer look at the dataset

We first plot the size of each class and observe the class distribution is not uniform.

Then we show random examples from the dataset, annotated with the class label and index.
Note that the training images include standard augmentations typically used for vision models (defined above).'",0.44054991006851196,notebook 4_3,2.0,"Then we show random examples from the dataset, annotated with the class label and index.
Note that the training images include standard augmentations typically used for vision models (defined above).'

 
code:
label_idxs, counts = np.unique(labels, return_counts=True)
plt.figure(figsize=(20, 4.2))', ""sns.barplot(x=[dataset.categories[keep_classes[label]] for label in label_idxs], y=counts, color=sns.color_palette('muted')[0])"", 'plt.xticks(rotation=90)
plt.xlabel(""Class"")
plt.ylabel(""Number of examples"")
plt.title(""Class distribution"")
plt.tight_layout()
plt.show()


def show_dataset_examples(dataloader):
    images, labels = next(iter(dataloader))
    with sns.axes_style(""white""):
      fig, axes = plt.subplots(4, 8, figsize=(16, 9.5))
    axes = [ax for axes_ in axes for ax in axes_]   # flatten
    for j, (img, label) in enumerate(zip(images[:32], labels[:32])):
        plt.sca(axes[j])
        show_image(img, title=f""{dataset.categories[keep_classes[label.item()]]} ({label.item()})"")
    plt.show()


print(""\\Train images (including augmentations):"")
show_dataset_examples(train_loader)
print(""\\Test images:"")
show_dataset_examples(test_loader)'

 
markdown:
## Define a neural network

**Assignment 1:** Adapt the CNN from the previous lab (CIFAR-10) to handle 224x224 images. We recommend reducing significantly the size of the tensors before flattening, by adding either convolutional layers with stride>1 or [MaxPool2d](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html) layers (but see e.g. also [AvgPool2d](https://pytorch.org/docs/stable/generated/torch.nn.AvgPool2d.html)).'

 
code:
class Model(nn.Module):

    def __init__(self, num_classes):
        super().__init__()
        
        self.net = ...   # Your code here!

    def forward(self, x):
        return self.net(x)
    
    
model = Model(num_classes=len(np.unique(labels)))', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)
print(model)'

 
markdown:
## Define loss function and optimizer

**Assignment 2:** Implement the criterion and optimizer, as in the previous notebook.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 224, 224).to(device))
print(""Output shape:"", out.size())'

 
code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()",0.4443212151527405,notebook 7_1,0.0,"code:
import matplotlib
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
import numpy as np
%matplotlib nbagg
%matplotlib inline
import seaborn as sns
sns.set_style(""whitegrid"")
sns.set_palette(sns.dark_palette(""purple""))

try:
    from plotting import plot_autoencoder_stats
except Exception as ex:
    print(f""If using Colab, you may need to upload `plotting.py`. \\
          \In the left pannel, click `Files > upload to session storage` and select the file `plotting.py` from your computer \\
          \---------------------------------------------"")
    print(ex)'

 
markdown:
# Unsupservised Learning 

## Labelling Data is Expensive

In supervised machine learning, one aims at learning a mapping $f_{\\psi} : \\mathbf{x} \\in \\mathcal{R}^P \\rightarrow \\mathbf{y}$ from observations $\\mathbf{x}$ to the target $\\mathbf{y}$ using a dataset $\\mathcal{D} = \\{\\mathbf{x}_i, \\mathbf{y}_i\\}_{i=1, \\dots, N}$ of finite size N (e.g. image classification, translation). Because of the curse of dimensionality, high-dimensional inputs (images) and complex the models (deep learning) require large datasets (million of pairs $(\\mathbf{x}, \\mathbf{y})$). In practice, labelling data is expensive (e.g. marking the presence of cancer in X-ray chest scans). 

## Compression is Comprehension: Learning without Target

In order to overcome the curse of dimensionality, we aim at learning a compressed representation $\\mathbf{z} \\in \\mathcal{R}^M$ of $\\mathbf{x}$ such that $M < P$ and there is a mapping $g_{\\phi}: \\mathbf{x} \\rightarrow \\mathbf{z}$ linking each data point to its representation. Ideally, $\\mathbf{z}$ is low-dimensional set of features which efficiently describes $\\mathbf{x}$. As an illustration, when modelling pictures of celebrities (CelebA dataset), the set of facial features (eye color, age, hair lenth, etc.) is a compressed (and lossy) representation of $\\mathbf{x}$. In practice, the representation  $\\mathbf{z}$ is unobservable and [unlikely to overlap with such known features](https://arxiv.org/abs/1811.12359). Yet, the representation $\\mathbf{z}$ is low dimensional and learning a mapping $f_{\\psi} : \\mathbf{z} \\in \\mathcal{R}^M \\rightarrow \\mathbf{y}$ is often easier.

Whereas labelling the data is expensive, observations $\\mathbf{x}$ are cheap to acquire. In many cases, one can scrap the web to gather a large collection of images or text. As a result, large deep learning models can be deployed to learn $g_{\\phi}$, and smaller / data-efficient models can be applied downstream to solve the supervised task.",0.44787880778312683,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.4504888653755188,notebook 4_2,1.0,"print(""\Test data"")
print(""Number of points:"", len(test_set))
x, y = next(iter(test_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(test_set.targets))} (unique labels: {set(test_set.targets)})"")

n_classes = len(set(test_set.targets))'

 
markdown:
### Show example images

Run multiple times to see different examples.'

 
code:
# Get random training images and show them.
images, labels = next(iter(train_loader))
show_image(torchvision.utils.make_grid(images))'

 
markdown:
## Define a convolutional neural network


**Assignment 1:** Define a convolutional neural network. 
You may use the code from previous notebooks.
We suggest that you start with a small network, and make sure that everything is working.
Once you can train successfully, come back and improve the architecture.'

 
code:
class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.num_classes = num_classes
        # Your code here!

    def forward(self, x):
        # Your code here!
        return x


model = Model(n_classes)', ""device = torch.device('cpu')  # use cuda or cpu"", 'model.to(device)
print(model)'

 
markdown:
## Define a loss function and optimizer

**Assignment 2:** Define the loss function and optimizer.
You might need to experiment a bit with the learning rate.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network

**Assignment 3:** Finish the training loop below. 
Start by using a small number of epochs (e.g. 2).
Even with a low number of epochs you should be able to see results that are better than chance.
When everything is working increase the number of epochs to find out how good your network really is.'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 32, 32, device=device))
print(""Output shape:"", out.size())
print(f""Output logits:\{out.detach().cpu().numpy()}"")
print(f""Output probabilities:\{out.softmax(1).detach().cpu().numpy()}"")'

 
code:
batch_size = 64
num_epochs = 2
validation_every_steps = 500

step = 0
model.train()",0.4511958658695221,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
Which optimizers are mentioned in the exercise notebook?,"Optimizer and learning rate:
SGD + Momentum: learning rate 0.01 - 0.1
ADAM: learning rate 3e-4 - 1e-5
RMSPROP: somewhere between SGD and ADAM",notebook 3_4,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.40570271015167236,notebook 4_2,4.0,"3. Write down key lessons/insights you got during this exercise.

**Answer:**'

 
markdown:
# Training on GPU

**Optional Assignment:**
If you have a GPU, we suggest that you try training your model on GPU. For this, you need to move the model to GPU after defining it, which will recursively go over all modules and convert their parameters and buffers to CUDA tensors. You also need to transfer both the inputs and targets to GPU at each training step, before performing the forward pass.
', ""The code for this is already in place: notice the `.to(device)` statements. The only thing left to do is change the definition of `device` from `'cpu'` to `'cuda'`."", '', ""If you don't have a GPU, you can do this on [Google Colab](https://research.google.com/colaboratory/)."", '
Use the code below to check if any GPU is avaiable in your current setup. This should print the models of all available GPUs.'

 
code:
# Check if we have GPUs available
print(""Available CUDA devices:"", [torch.cuda.get_device_name(i) for i in range(torch.cuda.device_count())])'

 
markdown:
You may not notice any significant speed-up from using a GPU. This is probably because your network is really small. Try increasing the width of your network (number of channels in the convolutional layers) and see if you observe any speed-up on GPU compared to CPU.'

 
markdown:
# Exercise from Michael Nielsen's book"", '', ""**Assignment 5:** Pick an exercise of your own choice from [Michael Nielsen's book](http://neuralnetworksanddeeplearning.com/)."", '
**Answer:**


'

 
code:
'[]'",0.4203838109970093,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.444244384765625,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.4567698538303375,notebook 7_3,0.0,"markdown:
<div class=""alert alert-danger"">
It is recommended to run this notebook on a GPU
</div>'

 
code:
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
import numpy as np
%matplotlib nbagg
%matplotlib inline
plt.style.use([""seaborn-deep"", ""seaborn-whitegrid""])'

 
markdown:
# Generative Adversarial Networks

Generative Adversarial Networks (GAN) [[Goodfellow, 2014]](https://arxiv.org/abs/1406.2661) have recently become a popular alternative to variational autoencoders for generative modelling and to a lesser extend semi-supervised learning. They also represent the state-of-the-art in modelling of realistic images and video just four years after their introduction. Below you can see a comparison of the development in GANs for generation of realistic faces from 2014 until today.

<img src=""../static_files/GAN-celebA.jpg"" alt=""GAN performance over the years"" width=""600px""/>

Different variants of GANs have also proven to perform well on tasks such inpainting, super-resolution and image-to-image translation. In this notebook we will again work with a subset of the MNIST-dataset in order to compare with VAEs.'

 
code:
import torch
cuda = torch.cuda.is_available()
device = torch.device(""cuda:0"" if cuda else ""cpu"")

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
from functools import reduce

# The digit classes to use, these need to be in order because
# we are using one-hot representation
classes = np.arange(2)

def one_hot(labels):
    y = torch.eye(len(classes)) 
    return y[labels]

# Define the train and test sets
dset_train = MNIST(""./"", train=True, download=True, transform=ToTensor(), target_transform=one_hot)
dset_test  = MNIST(""./"", train=False, transform=ToTensor(), target_transform=one_hot)

def stratified_sampler(labels):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


batch_size = 64
# The loaders perform the actual work
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.train_labels), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.test_labels), pin_memory=cuda)'

 
markdown:
# Adversarial learning",0.4615024924278259,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.4638969898223877,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.4648163914680481,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.46594518423080444,notebook 7_4,0.0,"markdown:
<div class=""alert alert-info"">
This is an optional supplementary notebook
</div>'

 
code:
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
%matplotlib nbagg
%matplotlib inline
plt.style.use([""seaborn-deep"", ""seaborn-whitegrid""])'

 
markdown:
# The density problem

Similarly to the VAE and GAN, we are interested in capturing some empirical input distribution $p(x)$, for which we observe a dataset of samples $\\{ x\\}^n_{i=1} \\sim p(x)$. Each of the models we have seen have been capable of performing this task, but there are a number of problems with both approaches:

A major weakness of the VAE was that it does not generate ""sharp"" images even if we average over multiple samples. The reason for this is grounded in the maximisation of the lower bound, which is only a surrogate for the generative quality, as it is heavily penalised by the KL-term.

For GANs we saw sharp images, but many other problems were swept under the rug. Firstly, training GANs is extremely difficult, with the models being prone to mode-collapses and divergence during training. Additionally, the probabilistic framework posited by VAEs, gives us way to measure the probability of a sample under the distribution - this is missing in GANs.

Luckily, another recent technique has shown promise on these fronts. Let us preface the model by considering how one would estimate the density of a random variable under a known transform. If we let $z \\sim \\mathcal{N}(0, 1)$ and $f(z) = (z/2)^3$ we can plot the resulting density.'

 
code:
import torch
cuda = torch.cuda.is_available()
device = ""cuda:0"" if cuda else ""cpu""

from torch.distributions import Normal

_, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharex=True, sharey=True)
n_samples = 5000

# Define the base distribution p(z)
base = Normal(torch.zeros(2), torch.ones(2))
z = base.sample((n_samples,))

ax1.scatter(*z.t(), s=3)
ax1.set_title(r""Samples $z \\sim N(0, I)$"")
ax1.grid(True)

# Naïvely transform samples
f = lambda z: (z/3)**3
x = f(z)

ax2.scatter(*x.t(), s=3)
ax2.set_title(r""$x = f(z)$"")
ax2.grid(True)

plt.show()'

 
markdown:
A neat trick from probability theory to estimate the density under $f$ is the change of variables formula. For any injective function $f$, we know the following.

$$p(x) = p(z) \\left | \\det \\left( \\frac{\\partial f(z)^{-1}}{\\partial z} \\right )\\right | = p(z) \\left | \\det \\left(\\frac{\\partial f(z)}{\\partial z} \\right ) \\right |^{-1}$$",0.4716729521751404,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.4748760461807251,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
Describe the model given in the exercise notebook?,"The provided code defines a PyTorch neural network for a classification task with the following characteristics:

It has two layers: an input layer and a hidden layer.
The activation function used is Exponential Linear Unit (ELU).
The network is designed for a classification task with 10 output classes.
The number of hidden units in the hidden layer is 512.
The number of input features is determined based on the shape of the input data .
The forward method defines how data flows through the network by applying linear transformations followed by ELU activation.",notebook 3_3,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.36776185035705566,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.39348554611206055,notebook 4_2,4.0,"3. Write down key lessons/insights you got during this exercise.

**Answer:**'

 
markdown:
# Training on GPU

**Optional Assignment:**
If you have a GPU, we suggest that you try training your model on GPU. For this, you need to move the model to GPU after defining it, which will recursively go over all modules and convert their parameters and buffers to CUDA tensors. You also need to transfer both the inputs and targets to GPU at each training step, before performing the forward pass.
', ""The code for this is already in place: notice the `.to(device)` statements. The only thing left to do is change the definition of `device` from `'cpu'` to `'cuda'`."", '', ""If you don't have a GPU, you can do this on [Google Colab](https://research.google.com/colaboratory/)."", '
Use the code below to check if any GPU is avaiable in your current setup. This should print the models of all available GPUs.'

 
code:
# Check if we have GPUs available
print(""Available CUDA devices:"", [torch.cuda.get_device_name(i) for i in range(torch.cuda.device_count())])'

 
markdown:
You may not notice any significant speed-up from using a GPU. This is probably because your network is really small. Try increasing the width of your network (number of channels in the convolutional layers) and see if you observe any speed-up on GPU compared to CPU.'

 
markdown:
# Exercise from Michael Nielsen's book"", '', ""**Assignment 5:** Pick an exercise of your own choice from [Michael Nielsen's book](http://neuralnetworksanddeeplearning.com/)."", '
**Answer:**


'

 
code:
'[]'",0.3956882357597351,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.4085721969604492,notebook 4_2,1.0,"print(""\Test data"")
print(""Number of points:"", len(test_set))
x, y = next(iter(test_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(test_set.targets))} (unique labels: {set(test_set.targets)})"")

n_classes = len(set(test_set.targets))'

 
markdown:
### Show example images

Run multiple times to see different examples.'

 
code:
# Get random training images and show them.
images, labels = next(iter(train_loader))
show_image(torchvision.utils.make_grid(images))'

 
markdown:
## Define a convolutional neural network


**Assignment 1:** Define a convolutional neural network. 
You may use the code from previous notebooks.
We suggest that you start with a small network, and make sure that everything is working.
Once you can train successfully, come back and improve the architecture.'

 
code:
class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.num_classes = num_classes
        # Your code here!

    def forward(self, x):
        # Your code here!
        return x


model = Model(n_classes)', ""device = torch.device('cpu')  # use cuda or cpu"", 'model.to(device)
print(model)'

 
markdown:
## Define a loss function and optimizer

**Assignment 2:** Define the loss function and optimizer.
You might need to experiment a bit with the learning rate.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network

**Assignment 3:** Finish the training loop below. 
Start by using a small number of epochs (e.g. 2).
Even with a low number of epochs you should be able to see results that are better than chance.
When everything is working increase the number of epochs to find out how good your network really is.'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 32, 32, device=device))
print(""Output shape:"", out.size())
print(f""Output logits:\{out.detach().cpu().numpy()}"")
print(f""Output probabilities:\{out.softmax(1).detach().cpu().numpy()}"")'

 
code:
batch_size = 64
num_epochs = 2
validation_every_steps = 500

step = 0
model.train()",0.418765127658844,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.42006367444992065,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.423913836479187,notebook 3_3,0.0,"markdown:
# Purpose and goals
In this notebook you will implement a simple neural network in PyTorch.

The building blocks of PyTorch are Tensors, and Operations, with these we can form dynamic computational graphs that represent neural networks.', ""In this exercise we'll start right away by defining a logistic regression model using these simple building blocks."", ""We'll initially start with a simple 2D and binary (i.e. two-class) classification problem where the class decision boundary can be visualized."", 'Initially we show that logistic regression can only separate classes linearly.
Adding a nonlinear hidden layer to the algorithm permits nonlinear class separation.

In this notebook you should:
* **First** run the code as is, and see what it does.
* **Then** modify the code, following the instructions in the bottom of the notebook.
* **Lastly** play around a bit, and do some small experiments that you come up with.

> We assume that you are already familiar with backpropagation (if not please see [Andrej Karpathy](http://cs.stanford.edu/people/karpathy/) or [Michal Nielsen](http://neuralnetworksanddeeplearning.com/chap2.html)).'

 
markdown:
# Dependencies and supporting functions
Load dependencies and supporting functions by running the code block below.'

 
code:
%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import sklearn.datasets

# Do not worry about the code below for now, it is used for plotting later
def plot_decision_boundary(pred_func, X, y):
    #from https://github.com/dennybritz/nn-from-scratch/blob/master/nn-from-scratch.ipynb
    # Set min and max values and give it some padding
    x_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5
    y_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5
    
    h = 0.01
    # Generate a grid of points with distance h between them
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    ', ""    yy = yy.astype('float32')"", ""    xx = xx.astype('float32')"", '    # Predict the function value for the whole gid
    Z = pred_func(np.c_[xx.ravel(), yy.ravel()])[:,0]
    Z = Z.reshape(xx.shape)
    # Plot the contour and training examples
    plt.figure()
    plt.contourf(xx, yy, Z, cmap=plt.cm.RdBu)
    plt.scatter(X[:, 0], X[:, 1], c=-y, cmap=plt.cm.Spectral)

def onehot(t, num_classes):
    out = np.zeros((t.shape[0], num_classes))
    for row, col in enumerate(t):
        out[row, col] = 1
    return out'

 
markdown:
# Problem ', ""We'll initally demonstrate that Multi-layer Perceptrons (MLPs) can classify nonlinear problems, whereas a simple logistic regression model cannot."", 'For ease of visualization and computational speed we initially experiment on the simple 2D half-moon dataset, visualized below.'",0.42659375071525574,notebook 7_2,0.0,"markdown:
<div class=""alert alert-warning"">
This is an exercise to be handed in on Peergrade
</div>'

 
code:
from typing import *
import matplotlib
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
import numpy as np
%matplotlib nbagg
%matplotlib inline
import seaborn as sns
import pandas as pd
sns.set_style(""whitegrid"")

try:
    from plotting import make_vae_plots
except Exception as ex:
    print(f""If using Colab, you may need to upload `plotting.py`. \\
          \In the left pannel, click `Files > upload to session storage` and select the file `plotting.py` from your computer \\
          \---------------------------------------------"")
    print(ex)'

 
markdown:
*You should first read the introduction from the Notebook about Autoencoders (notebook 7.1).*

As background material we recommend reading [Tutorial on Variational Autoencoder](http://arxiv.org/abs/1606.05908). For the implementation of the model you can read the article ""Auto-Encoding Variational Bayes"", Kingma & Welling, ICLR 2014: http://arxiv.org/pdf/1312.6114v10.pdf and ""Stochastic Backpropagation and Approximate Inference in Deep Generative Models"", Rezende et al, ICML 2014: http://arxiv.org/pdf/1401.4082v3.pdf.

# Variational Autoencoders

Probabilistic Machine Learning is fundamental in modern machine learning. While deep learning methods have been criticized for their lack of explainability, building machine learning models using probabilistic principles provides statistical guarantees. This is a key component for deploying machine learning to critical infrastructures (healthcare, manufacturing, finance, etc.). The Variational Autoencoder embodies probabilistic principles for principled unsupervised learning.

## 1. Probabilistic Design:  Designing a Generative Process

<img src=""static/vae.png"" />

In the notebook 7.1, the goal was to learn a set of features $\\mathbf{z} \\in \\mathcal{R}^M$ explaining the *observation* variable $\\mathbf{x} \\in \\mathcal{R}^{P}$. Learning was performed by autoencoding $\\mathbf{x}$ through an *information bottleneck*. In this setting however, the quality of the representation is greatly impacted by the choice of the dimension $M$ of the bottleneck.

The unobserved variable — or *latent variable* — can be modelled using a probabilistic framework, this allows us to build the model in a principled way, and overcomes many of the limitations of the basic autoencoder (e.g. choice of the dimension of the bottleneck). $\\mathbf{z}$ is chosen to represent the generative factors of $\\mathbf{x}$, we define a generative process 

$$\\mathbf{z} \\sim p_{\\theta}(\\mathbf{z}), \\  \\mathbf{x} \\sim p_{\\theta}(\\mathbf{x} | \\mathbf{z})$$",0.4271082878112793,notebook 4_3,2.0,"Then we show random examples from the dataset, annotated with the class label and index.
Note that the training images include standard augmentations typically used for vision models (defined above).'

 
code:
label_idxs, counts = np.unique(labels, return_counts=True)
plt.figure(figsize=(20, 4.2))', ""sns.barplot(x=[dataset.categories[keep_classes[label]] for label in label_idxs], y=counts, color=sns.color_palette('muted')[0])"", 'plt.xticks(rotation=90)
plt.xlabel(""Class"")
plt.ylabel(""Number of examples"")
plt.title(""Class distribution"")
plt.tight_layout()
plt.show()


def show_dataset_examples(dataloader):
    images, labels = next(iter(dataloader))
    with sns.axes_style(""white""):
      fig, axes = plt.subplots(4, 8, figsize=(16, 9.5))
    axes = [ax for axes_ in axes for ax in axes_]   # flatten
    for j, (img, label) in enumerate(zip(images[:32], labels[:32])):
        plt.sca(axes[j])
        show_image(img, title=f""{dataset.categories[keep_classes[label.item()]]} ({label.item()})"")
    plt.show()


print(""\\Train images (including augmentations):"")
show_dataset_examples(train_loader)
print(""\\Test images:"")
show_dataset_examples(test_loader)'

 
markdown:
## Define a neural network

**Assignment 1:** Adapt the CNN from the previous lab (CIFAR-10) to handle 224x224 images. We recommend reducing significantly the size of the tensors before flattening, by adding either convolutional layers with stride>1 or [MaxPool2d](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html) layers (but see e.g. also [AvgPool2d](https://pytorch.org/docs/stable/generated/torch.nn.AvgPool2d.html)).'

 
code:
class Model(nn.Module):

    def __init__(self, num_classes):
        super().__init__()
        
        self.net = ...   # Your code here!

    def forward(self, x):
        return self.net(x)
    
    
model = Model(num_classes=len(np.unique(labels)))', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)
print(model)'

 
markdown:
## Define loss function and optimizer

**Assignment 2:** Implement the criterion and optimizer, as in the previous notebook.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 224, 224).to(device))
print(""Output shape:"", out.size())'

 
code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()",0.42858409881591797,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0
"What is the initial assignment in exercise notebook 3.4-EXE-FFN-MNIST.ipynb, and what are the steps to execute it?","The first task is to use Kaiming He initialization instead of Xavier Glorot.
In order to implement this task:
We replace the Xavier initialization for self.W_1 and self.W_2 with init.kaiming_normal_, which initializes the weight matrices using the Kaiming He initialization method suitable for ReLU activation.
Code:
<code>",notebook 3_4,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.3976060152053833,notebook 4_2,1.0,"print(""\Test data"")
print(""Number of points:"", len(test_set))
x, y = next(iter(test_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(test_set.targets))} (unique labels: {set(test_set.targets)})"")

n_classes = len(set(test_set.targets))'

 
markdown:
### Show example images

Run multiple times to see different examples.'

 
code:
# Get random training images and show them.
images, labels = next(iter(train_loader))
show_image(torchvision.utils.make_grid(images))'

 
markdown:
## Define a convolutional neural network


**Assignment 1:** Define a convolutional neural network. 
You may use the code from previous notebooks.
We suggest that you start with a small network, and make sure that everything is working.
Once you can train successfully, come back and improve the architecture.'

 
code:
class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.num_classes = num_classes
        # Your code here!

    def forward(self, x):
        # Your code here!
        return x


model = Model(n_classes)', ""device = torch.device('cpu')  # use cuda or cpu"", 'model.to(device)
print(model)'

 
markdown:
## Define a loss function and optimizer

**Assignment 2:** Define the loss function and optimizer.
You might need to experiment a bit with the learning rate.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network

**Assignment 3:** Finish the training loop below. 
Start by using a small number of epochs (e.g. 2).
Even with a low number of epochs you should be able to see results that are better than chance.
When everything is working increase the number of epochs to find out how good your network really is.'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 32, 32, device=device))
print(""Output shape:"", out.size())
print(f""Output logits:\{out.detach().cpu().numpy()}"")
print(f""Output probabilities:\{out.softmax(1).detach().cpu().numpy()}"")'

 
code:
batch_size = 64
num_epochs = 2
validation_every_steps = 500

step = 0
model.train()",0.4027242064476013,notebook 4_2,4.0,"3. Write down key lessons/insights you got during this exercise.

**Answer:**'

 
markdown:
# Training on GPU

**Optional Assignment:**
If you have a GPU, we suggest that you try training your model on GPU. For this, you need to move the model to GPU after defining it, which will recursively go over all modules and convert their parameters and buffers to CUDA tensors. You also need to transfer both the inputs and targets to GPU at each training step, before performing the forward pass.
', ""The code for this is already in place: notice the `.to(device)` statements. The only thing left to do is change the definition of `device` from `'cpu'` to `'cuda'`."", '', ""If you don't have a GPU, you can do this on [Google Colab](https://research.google.com/colaboratory/)."", '
Use the code below to check if any GPU is avaiable in your current setup. This should print the models of all available GPUs.'

 
code:
# Check if we have GPUs available
print(""Available CUDA devices:"", [torch.cuda.get_device_name(i) for i in range(torch.cuda.device_count())])'

 
markdown:
You may not notice any significant speed-up from using a GPU. This is probably because your network is really small. Try increasing the width of your network (number of channels in the convolutional layers) and see if you observe any speed-up on GPU compared to CPU.'

 
markdown:
# Exercise from Michael Nielsen's book"", '', ""**Assignment 5:** Pick an exercise of your own choice from [Michael Nielsen's book](http://neuralnetworksanddeeplearning.com/)."", '
**Answer:**


'

 
code:
'[]'",0.40693235397338867,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",0.4121261239051819,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.42136096954345703,notebook 4_2,0.0,"markdown:
# CNN on CIFAR-10

In this notebook you need to put what you have learned into practice, and create your own convolutional classifier for the CIFAR-10 dataset.

The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes. See examples below.

![cifar10](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/cifar10.png?raw=1)'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import make_grid
from sklearn import metrics

sns.set_style(""whitegrid"")

def accuracy(target, pred):
    return metrics.accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def compute_confusion_matrix(target, pred, normalize=None):
    return metrics.confusion_matrix(
        target.detach().cpu().numpy(), 
        pred.detach().cpu().numpy(),
        normalize=normalize
    )

def show_image(img):
    img = img.detach().cpu()
    img = img / 2 + 0.5   # unnormalize
    with sns.axes_style(""white""):
        plt.figure(figsize=(8, 8))
        plt.imshow(img.permute((1, 2, 0)).numpy())', ""        plt.axis('off')"", '        plt.show()'

 
code:
# The output of torchvision datasets are PIL images in the range [0, 1]. 
# We transform them to PyTorch tensors and rescale them to be in the range [-1, 1].
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),  # subtract 0.5 and divide by 0.5
    ]
)

batch_size = 64  # both for training and testing

# Load datasets', ""train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)"", ""test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)"", 'train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=0, drop_last=False)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=0, drop_last=True)

# Map from class index to class name.
classes = {index: name for name, index in train_set.class_to_idx.items()}'

 
code:
print(""Training data"")
print(""Number of points:"", len(train_set))
x, y = next(iter(train_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(train_set.targets))} (unique labels: {set(train_set.targets)})"")",0.42257940769195557,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.42447802424430847,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.4249922037124634,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.42589765787124634,notebook 7_1,2.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",0.43939730525016785,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What do we expect to learn from week4?,"In this lab, we will learn how to create your own convolutional classifier for different datasets, and the technologies to improve the performance of your convolutional classifier. ","notebook 4_1, notebook 4_2",CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.4210417866706848,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.4291459321975708,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.4338330030441284,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.4366700053215027,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.44078314304351807,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.4563932418823242,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.45732998847961426,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.4587530493736267,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.459073930978775,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.4649960994720459,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
What is CIFAR-10 dataset?,The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes.,notebook 4_2,notebook 4_2,0.0,"markdown:
# CNN on CIFAR-10

In this notebook you need to put what you have learned into practice, and create your own convolutional classifier for the CIFAR-10 dataset.

The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes. See examples below.

![cifar10](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/cifar10.png?raw=1)'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import make_grid
from sklearn import metrics

sns.set_style(""whitegrid"")

def accuracy(target, pred):
    return metrics.accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def compute_confusion_matrix(target, pred, normalize=None):
    return metrics.confusion_matrix(
        target.detach().cpu().numpy(), 
        pred.detach().cpu().numpy(),
        normalize=normalize
    )

def show_image(img):
    img = img.detach().cpu()
    img = img / 2 + 0.5   # unnormalize
    with sns.axes_style(""white""):
        plt.figure(figsize=(8, 8))
        plt.imshow(img.permute((1, 2, 0)).numpy())', ""        plt.axis('off')"", '        plt.show()'

 
code:
# The output of torchvision datasets are PIL images in the range [0, 1]. 
# We transform them to PyTorch tensors and rescale them to be in the range [-1, 1].
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),  # subtract 0.5 and divide by 0.5
    ]
)

batch_size = 64  # both for training and testing

# Load datasets', ""train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)"", ""test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)"", 'train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=0, drop_last=False)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=0, drop_last=True)

# Map from class index to class name.
classes = {index: name for name, index in train_set.class_to_idx.items()}'

 
code:
print(""Training data"")
print(""Number of points:"", len(train_set))
x, y = next(iter(train_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(train_set.targets))} (unique labels: {set(train_set.targets)})"")",0.3692607879638672,notebook 4_3,0.0,"markdown:
# Transfer learning on the Caltech101 dataset

In this notebook, we will consider a more complex dataset than MNIST or CIFAR10. The images in Caltech101 are RGB images (3 channels) with variable size. There are 101 different classes. We will try a very common practice in computer vision nowadays: transfer learning from a pre-trained ImageNet model. 

Roadmap:
- Modify the network from the previous exercise (CIFAR-10) to work with 224x224 images.
- Train the model for a while on Caltech101 and see how far we can get.
- Take a ResNet34 that was pre-trained on ImageNet-1k and fine-tune it to Caltech101.
  - Consider both training only the head (the linear classifier at the end of the network) or the entire network.
  - We should be able to reach better performance than our original network in fewer training steps.
- Optional: play around with other pre-trained models from `timm` (see info [here](https://github.com/rwightman/pytorch-image-models)).'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
from typing import List, Optional, Callable, Iterator
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torchvision import transforms
from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, Dataset, Subset

sns.set_style(""whitegrid"")

!pip install timm
import timm

def accuracy(target, pred):
    return accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def show_image(img, title=None):
    img = img.detach().cpu()
    img = img.permute((1, 2, 0)).numpy()
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    img = std * img + mean   # unnormalize
    img = np.clip(img, 0, 1)
    plt.imshow(img)
    plt.gca().tick_params(axis=""both"", which=""both"", bottom=False, left=False, labelbottom=False, labelleft=False)
    if title is not None:
        plt.title(title)'

 
markdown:
### Set up dataset'

 
code:
imagenet_mean = [0.485, 0.456, 0.406]
imagenet_std = [0.229, 0.224, 0.225]
default_imagenet_normalization = transforms.Normalize(mean=imagenet_mean, std=imagenet_std)
train_transform = transforms.Compose([
    transforms.RandomResizedCrop(224, scale=(0.25, 1)),  # crop of random size and aspect ratio, resize to square
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    default_imagenet_normalization,
])
test_transform = transforms.Compose([
    transforms.Resize(224),  # keep aspect ratio
    transforms.CenterCrop(224),  # square crop
    transforms.ToTensor(),
    default_imagenet_normalization,
])",0.43158066272735596,notebook 7_1,2.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",0.5034791231155396,notebook 7_1,0.0,"code:
import matplotlib
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
import numpy as np
%matplotlib nbagg
%matplotlib inline
import seaborn as sns
sns.set_style(""whitegrid"")
sns.set_palette(sns.dark_palette(""purple""))

try:
    from plotting import plot_autoencoder_stats
except Exception as ex:
    print(f""If using Colab, you may need to upload `plotting.py`. \\
          \In the left pannel, click `Files > upload to session storage` and select the file `plotting.py` from your computer \\
          \---------------------------------------------"")
    print(ex)'

 
markdown:
# Unsupservised Learning 

## Labelling Data is Expensive

In supervised machine learning, one aims at learning a mapping $f_{\\psi} : \\mathbf{x} \\in \\mathcal{R}^P \\rightarrow \\mathbf{y}$ from observations $\\mathbf{x}$ to the target $\\mathbf{y}$ using a dataset $\\mathcal{D} = \\{\\mathbf{x}_i, \\mathbf{y}_i\\}_{i=1, \\dots, N}$ of finite size N (e.g. image classification, translation). Because of the curse of dimensionality, high-dimensional inputs (images) and complex the models (deep learning) require large datasets (million of pairs $(\\mathbf{x}, \\mathbf{y})$). In practice, labelling data is expensive (e.g. marking the presence of cancer in X-ray chest scans). 

## Compression is Comprehension: Learning without Target

In order to overcome the curse of dimensionality, we aim at learning a compressed representation $\\mathbf{z} \\in \\mathcal{R}^M$ of $\\mathbf{x}$ such that $M < P$ and there is a mapping $g_{\\phi}: \\mathbf{x} \\rightarrow \\mathbf{z}$ linking each data point to its representation. Ideally, $\\mathbf{z}$ is low-dimensional set of features which efficiently describes $\\mathbf{x}$. As an illustration, when modelling pictures of celebrities (CelebA dataset), the set of facial features (eye color, age, hair lenth, etc.) is a compressed (and lossy) representation of $\\mathbf{x}$. In practice, the representation  $\\mathbf{z}$ is unobservable and [unlikely to overlap with such known features](https://arxiv.org/abs/1811.12359). Yet, the representation $\\mathbf{z}$ is low dimensional and learning a mapping $f_{\\psi} : \\mathbf{z} \\in \\mathcal{R}^M \\rightarrow \\mathbf{y}$ is often easier.

Whereas labelling the data is expensive, observations $\\mathbf{x}$ are cheap to acquire. In many cases, one can scrap the web to gather a large collection of images or text. As a result, large deep learning models can be deployed to learn $g_{\\phi}$, and smaller / data-efficient models can be applied downstream to solve the supervised task.",0.5086853504180908,notebook 4_3,1.0,"batch_size = 64  # both for training and testing

# Load dataset (downloaded automatically if missing).', ""dataset = torchvision.datasets.Caltech101(root='./data', download=True)"", '

def translate_label(y, keep_classes):
    try:
        return keep_classes.index(y)
    except ValueError:
        return -1


# Filter images such that no class has more than 100 examples.
# Loop through dataset in random order, include each image (its index) only if there are 
# fewer than 100 images of the same class.
# Here we also remove the classes ""Faces"" and ""Faces_easy"".
skip_classes = [0, 1]   # ""Faces"" and ""Faces_easy""
keep_classes = [c for c in range(len(dataset.categories)) if c not in skip_classes]
indices = list(range(len(dataset)))
random.shuffle(indices)
new_indices = []
current_class_size = {class_number: 0 for class_number in np.unique(dataset.y)}
for i in indices:
    class_number = dataset.y[i]
    if class_number not in skip_classes and current_class_size[class_number] < 100:
        new_indices.append(i)
        current_class_size[class_number] += 1
indices = new_indices

# Compute subset of labels given new indices selection
labels = [translate_label(dataset.y[i], keep_classes) for i in indices]
assert max(labels) == 98

test_size = 640
train_size = len(indices) - test_size
train_idx, test_idx = train_test_split(
    indices,
    train_size=train_size,
    test_size=test_size,
    shuffle=True,
    random_state=42,  # always get the same split
    stratify=labels,
)


class DatasetSubsetWithTransform(Subset):
    
    def __init__(self, dataset, indices, transform=None):
        super().__init__(dataset, indices)
        self.transform = transform
        
    def __getitem__(self, idx):
        x, y = super().__getitem__(idx)
        # Convert PIL image to RGB (some of them are greyscale)', ""        x = x.convert('RGB')"", '        if self.transform is not None:
            x = self.transform(x)
        y = translate_label(y, keep_classes)
        return x, y
    

train_set = DatasetSubsetWithTransform(dataset, train_idx, train_transform)
test_set = DatasetSubsetWithTransform(dataset, test_idx, test_transform)
train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, drop_last=True)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, drop_last=False)'

 
markdown:
### A closer look at the dataset

We first plot the size of each class and observe the class distribution is not uniform.

Then we show random examples from the dataset, annotated with the class label and index.
Note that the training images include standard augmentations typically used for vision models (defined above).'",0.5089249610900879,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",0.5135390758514404,notebook 7_3,0.0,"markdown:
<div class=""alert alert-danger"">
It is recommended to run this notebook on a GPU
</div>'

 
code:
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
import numpy as np
%matplotlib nbagg
%matplotlib inline
plt.style.use([""seaborn-deep"", ""seaborn-whitegrid""])'

 
markdown:
# Generative Adversarial Networks

Generative Adversarial Networks (GAN) [[Goodfellow, 2014]](https://arxiv.org/abs/1406.2661) have recently become a popular alternative to variational autoencoders for generative modelling and to a lesser extend semi-supervised learning. They also represent the state-of-the-art in modelling of realistic images and video just four years after their introduction. Below you can see a comparison of the development in GANs for generation of realistic faces from 2014 until today.

<img src=""../static_files/GAN-celebA.jpg"" alt=""GAN performance over the years"" width=""600px""/>

Different variants of GANs have also proven to perform well on tasks such inpainting, super-resolution and image-to-image translation. In this notebook we will again work with a subset of the MNIST-dataset in order to compare with VAEs.'

 
code:
import torch
cuda = torch.cuda.is_available()
device = torch.device(""cuda:0"" if cuda else ""cpu"")

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
from functools import reduce

# The digit classes to use, these need to be in order because
# we are using one-hot representation
classes = np.arange(2)

def one_hot(labels):
    y = torch.eye(len(classes)) 
    return y[labels]

# Define the train and test sets
dset_train = MNIST(""./"", train=True, download=True, transform=ToTensor(), target_transform=one_hot)
dset_test  = MNIST(""./"", train=False, transform=ToTensor(), target_transform=one_hot)

def stratified_sampler(labels):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


batch_size = 64
# The loaders perform the actual work
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.train_labels), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.test_labels), pin_memory=cuda)'

 
markdown:
# Adversarial learning",0.5149820446968079,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.5160600543022156,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.5186537504196167,notebook 4_3,2.0,"Then we show random examples from the dataset, annotated with the class label and index.
Note that the training images include standard augmentations typically used for vision models (defined above).'

 
code:
label_idxs, counts = np.unique(labels, return_counts=True)
plt.figure(figsize=(20, 4.2))', ""sns.barplot(x=[dataset.categories[keep_classes[label]] for label in label_idxs], y=counts, color=sns.color_palette('muted')[0])"", 'plt.xticks(rotation=90)
plt.xlabel(""Class"")
plt.ylabel(""Number of examples"")
plt.title(""Class distribution"")
plt.tight_layout()
plt.show()


def show_dataset_examples(dataloader):
    images, labels = next(iter(dataloader))
    with sns.axes_style(""white""):
      fig, axes = plt.subplots(4, 8, figsize=(16, 9.5))
    axes = [ax for axes_ in axes for ax in axes_]   # flatten
    for j, (img, label) in enumerate(zip(images[:32], labels[:32])):
        plt.sca(axes[j])
        show_image(img, title=f""{dataset.categories[keep_classes[label.item()]]} ({label.item()})"")
    plt.show()


print(""\\Train images (including augmentations):"")
show_dataset_examples(train_loader)
print(""\\Test images:"")
show_dataset_examples(test_loader)'

 
markdown:
## Define a neural network

**Assignment 1:** Adapt the CNN from the previous lab (CIFAR-10) to handle 224x224 images. We recommend reducing significantly the size of the tensors before flattening, by adding either convolutional layers with stride>1 or [MaxPool2d](https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html) layers (but see e.g. also [AvgPool2d](https://pytorch.org/docs/stable/generated/torch.nn.AvgPool2d.html)).'

 
code:
class Model(nn.Module):

    def __init__(self, num_classes):
        super().__init__()
        
        self.net = ...   # Your code here!

    def forward(self, x):
        return self.net(x)
    
    
model = Model(num_classes=len(np.unique(labels)))', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)
print(model)'

 
markdown:
## Define loss function and optimizer

**Assignment 2:** Implement the criterion and optimizer, as in the previous notebook.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 224, 224).to(device))
print(""Output shape:"", out.size())'

 
code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()",0.5216773152351379,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What are convolutional neural networks?,"The standard ConvNets are organised into layers. Each layer is parameterized by weights and biases. Each layer has an element-wise activation function, and there are no cycles in the connections. In ConvNets, each unit is only connected to a small subset of the input units, which is called the receptive field of the unit. ",notebook 4_1,notebook 4_1,0.0,"markdown:
# Convolutional neural networks 101

Convolution neural networks are one of the most successful types of neural networks for image recognition and an integral part of reigniting the interest in neural networks. They are able to extract structural relations in the data, such as spatial in images or temporal in time series.

In this lab, we will experiment with inserting 2D-convolution layers in the fully connected neural networks introduced previously. We will also try to visualize the learned convolution filters and try to understand what kind of features they learn to recognize.
', ""If you have not watched Jason Yosinski's [video on visualizing convolutional networks](https://www.youtube.com/watch?v=AgkfIQ4IGaM), you definitely should do so now. If you are unfamiliar with the convolution operation, [Vincent Dumoulin](https://github.com/vdumoulin/conv_arithmetic) has a nice visualization of different convolution variants. For a more in-depth tutorial, please see http://cs231n.github.io/convolutional-networks/ or http://neuralnetworksanddeeplearning.com/chap6.html.""]'

 
markdown:
## Reminder: what are convolutional networks?

Standard ConvNets are, in many respects, very similar to the dense feedforward networks we saw previously:
 * The network is still organized into layers.
 * Each layer is parameterized by weights and biases.
 * Each layer has an element-wise non-linear transformation (activation function).
 * There are no cycles in the connections (more on this in later labs).

*So what is the difference?*
The networks we saw previously are called *dense* because each unit receives input from all the units in the previous layer. This is not the case for ConvNets. In ConvNets each unit is only connected to a small subset of the input units. This is called the *receptive field* of the unit.

#### Example
The input (green matrix) is a tensor of size `1x5x5` -- i.e. it has one ""channel"" (like a grayscale image), and the feature map has size `5x5`. Let us define a `1x3x3` kernel (yellow submatrix). The kernel weights are indicated in red at the bottom right of each element. The computation can be thought of as an elementwise multiplication followed by a sum. Here we use a *stride* of 1, as shown in this animation:

<img src=""https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/convolutions.gif"" style=""width: 400px;""/>

GIF courtesy of [Stanford](http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution)

After having convolved the image, we perform an elementwise non-linear transformation on the *convolved features*.
In this example, the input is a 2D *feature map* with depth 1.'

 
markdown:
# Assignment 1

### Assignment 1.1: Manual calculations

Perform the following computation, and write the result below.

![](https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/conv_exe.png)",0.30879950523376465,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.3651963472366333,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.40160679817199707,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.4210951328277588,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.42833513021469116,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",0.4285696744918823,notebook 5_1,9.0,"In the case, of bidirectional language models, the context $\\mathbf{w}_{-t}$ corresponds to the whole sequence of tokens with the predicted element masked out. It is possible to generalize the bidirectional factorization to masking out one or more tokens. In that case, we consider a model $p_\\theta(\\mathbf{w}_m \\mid \\mathbf{w}_{-m})$ where $m$ is a set of indices of the tokens being predicted and $-m$ is the set of the other tokens. This is notably the approach adopted in [""BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"", Delvin et al. (2018)](https://arxiv.org/abs/1810.04805).'

 
markdown:
### II.b Recurrent Neural Networks

*Figure: Left-to-right recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"".*
![Recurrent Neural Network](images/recurrent-lm-activated.png)

**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",0.4303934574127197,notebook 5_3,5.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN'

 
markdown:
We will implement the forward pass, backward pass, optimization and training loop for an RNN in numpy so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch and appreciate how convenient the implementation becomes!'

 
markdown:
Let's first define the necessary model parameters. Recall that an $n \\times m$ weight matrix maps $\\mathbb{R}^{m} \\rightarrow \\mathbb{R}^{n}$.""]'

 
code:
hidden_size = 50 # Number of dimensions in the hidden state
vocab_size  = len(word_to_idx) # Size of the vocabulary used",0.44143688678741455,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.44293513894081116,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.4509970545768738,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
Can you provide some suggestions to improve the model’s performance?,"Tell us something like increase the depth of the network, modify the convolutional layer parameters(number of filters, filter sizes and strides), pooling layers, batch normalization,  change the learning rate, dropout or weight regularization.",notebook 4_2,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.4860342741012573,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.505282461643219,notebook 5_3,25.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",0.5140911936759949,notebook 4_2,4.0,"3. Write down key lessons/insights you got during this exercise.

**Answer:**'

 
markdown:
# Training on GPU

**Optional Assignment:**
If you have a GPU, we suggest that you try training your model on GPU. For this, you need to move the model to GPU after defining it, which will recursively go over all modules and convert their parameters and buffers to CUDA tensors. You also need to transfer both the inputs and targets to GPU at each training step, before performing the forward pass.
', ""The code for this is already in place: notice the `.to(device)` statements. The only thing left to do is change the definition of `device` from `'cpu'` to `'cuda'`."", '', ""If you don't have a GPU, you can do this on [Google Colab](https://research.google.com/colaboratory/)."", '
Use the code below to check if any GPU is avaiable in your current setup. This should print the models of all available GPUs.'

 
code:
# Check if we have GPUs available
print(""Available CUDA devices:"", [torch.cuda.get_device_name(i) for i in range(torch.cuda.device_count())])'

 
markdown:
You may not notice any significant speed-up from using a GPU. This is probably because your network is really small. Try increasing the width of your network (number of channels in the convolutional layers) and see if you observe any speed-up on GPU compared to CPU.'

 
markdown:
# Exercise from Michael Nielsen's book"", '', ""**Assignment 5:** Pick an exercise of your own choice from [Michael Nielsen's book](http://neuralnetworksanddeeplearning.com/)."", '
**Answer:**


'

 
code:
'[]'",0.5149228572845459,notebook 7_4,4.0,"code:
import os

tmp_img = ""tmp_nvp_out.png""
losses = []

x = x.to(device)

for epoch in range(2500):
    z, log_det_J = model(x)
    
    # Loss function
    loss = -torch.mean(base.log_prob(z) + log_det_J)
    
    optimizer.zero_grad()
    loss.backward(retain_graph=True)
    optimizer.step()
    
    losses.append(loss.item())
    
    # -- Plotting --
    if epoch % 50 == 0:
        with torch.no_grad():
            z = base.sample((n_samples,))
            z_hat, _ = model.forward(x)
            x_hat, _ = model.inverse(z)
        
        f, axarr = plt.subplots(1, 3, figsize=(18, 6))

        # Loss
        ax = axarr[0]', ""        ax.set_xlabel('Epoch')"", ""        ax.set_ylabel('Negative log likelihood')"", '        ax.plot(np.arange(epoch+1), losses, color=""black"")

        # Data space
        ax = axarr[1]
        ax.set_title(""Data space"")
        ax.scatter(*x.data.cpu().t(), s=3, c=""k"", label=""True"")
        ax.scatter(*x_hat.data.cpu().t(), s=3, label=""Learned"")
        ax.legend()
        ax.set_xlim([-3, 3]); ax.set_ylim([-3, 3])

        # Latent space
        ax = axarr[2]
        ax.set_title(""Latent space"")
        ax.scatter(*z.data.cpu().t(), s=3, c=""k"", label=""True"")
        ax.scatter(*z_hat.data.cpu().t(), s=3, label=""Learned"")
        ax.legend()
        ax.set_xlim([-3, 3]); ax.set_ylim([-3, 3])

        plt.savefig(tmp_img)
        plt.close(f)
        display(Image(filename=tmp_img))
        clear_output(wait=True)

        os.remove(tmp_img)'

 
markdown:
**Assignment**:
    
Experiment with the model. How many affine layers and total neurons do we need to solve this problem? *Hint: You can use the code block below to calculate this number.*

**Solution**:'

 
code:
print(""Total neurons:"", sum([np.prod(p.shape) for p in model.parameters() if p.requires_grad]))'

 
markdown:
**What is possible with this class of models? To get the answer have a look at [OpenAI's](https://blog.openai.com/glow/) recent blog post on the subject.**"", '
In this week we have now discussed all of the current major directions within generative modelling with the exception of autoregressive models. If you are interested in understanding these, please look into models such as PixelCNN and Wavenet. The following table is originally by Laurent Dinh and is a good place to start when comparing the different approaches to deep generative modelling.",0.5216957330703735,notebook 3_4,1.0,"code:
# plot a few MNIST examples
idx, dim, classes = 0, 28, 10
# create empty canvas
canvas = np.zeros((dim*classes, classes*dim))

# fill with tensors
for i in range(classes):
    for j in range(classes):
        canvas[i*dim:(i+1)*dim, j*dim:(j+1)*dim] = x_train[idx].reshape((dim, dim))
        idx += 1

# visualize matrix of tensors as gray scale image
plt.figure(figsize=(4, 4))', ""plt.axis('off')"", ""plt.imshow(canvas, cmap='gray')"", ""plt.title('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
## Model

One of the large challenges in deep learning is the amount of hyperparameters that needs to be selected, and the lack of a good principled way of selecting them.
Hyperparameters can be found by experience (guessing) or some search procedure (often quite slow).
Random search is easy to implement and performs decent: http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf . 
More advanced search procedures include [Spearmint](https://github.com/JasperSnoek/spearmint) and many others.

**In practice a lot of trial and error is almost always involved.** This can be frustrating and time consuming, but the best thing to do is to think as a scientist, and go about it in a ordered manner --> monitor as much as you can, take notes, and be deliberate!

Below are some guidelines that you can use as a starting point to some of the most important hyperparameters. 
(*regularization* is also very important, but will be covered later.)


### Ballpark estimates of hyperparameters
__Number of hidden units and network structure:__', ""You'll have to experiment. One rarely goes below 512 units for feedforward networks (unless your are training on CPU...)."", ""There's some research into stochastic depth networks: https://arxiv.org/pdf/1603.09382v2.pdf, but in general this is trial and error."", '
__Parameter initialization:__
Parameter initialization is extremely important.
PyTorch has a lot of different initializers, check the [PyTorch API](http://pytorch.org/docs/master/nn.html#torch-nn-init). Often used initializer are
1. Kaiming He
2. Xavier Glorot
3. Uniform or Normal with small scale (0.1 - 0.01)
4. Orthogonal (this usually works very well for RNNs)

Bias is nearly always initialized to zero using the [torch.nn.init.constant(tensor, val)](http://pytorch.org/docs/master/nn.html#torch.nn.init.constant)

__Mini-batch size:__
Usually people use 16-256. Bigger is not allways better. With smaller mini-batch size you get more updates and your model might converge faster. Also small batch sizes use less memory, which means you can train a model with more parameters.",0.5349410772323608,notebook 3_3,6.0,"markdown:
# Assignments

1. A linear logistic classifier is only able to create a linear decision boundary. Change the Logistic classifier into a (nonlinear) Neural network by inserting a dense hidden layer between the input and output layers of the model
 
2. Experiment with multiple hidden layers or more / less hidden units. What happens to the decision boundary?
 
3. Overfitting: When increasing the number of hidden layers / units, the neural network will fit the training data better by creating a highly nonlinear decision boundary. If the model is too complex it will often generalize poorly to new data (validation and test set). Can you observe this from the training and validation errors? 
 
4. We used the vanilla stochastic gradient descent algorithm for parameter updates. This usually converges slowly and more sophisticated pseudo-second-order methods usually work better. Try changing the optimizer to [adam or momentum](http://pytorch.org/docs/master/optim.html#torch.optim.Adam)'

 
markdown:
When you're done, continue to the next part of this lab.""]'

 
code:
'[]'",0.5379073023796082,notebook 7_2,1.0,"$$\\mathbf{z} \\sim p_{\\theta}(\\mathbf{z}), \\  \\mathbf{x} \\sim p_{\\theta}(\\mathbf{x} | \\mathbf{z})$$ 

where the **prior** $p_{\\theta}(\\mathbf{z})$ is a chosen distribution (e.g. $\\mathcal{N}(0 , I)$) and the **observation model** $p_\\theta(\\mathbf{x} | \\mathbf{z})$ is a distribution depending on the variable $\\mathbf{z}$. Since we are interested in learning a model that explains well the data, we aim at maximizing the probability assigned to $\\mathbf{x}$. Therefore the optimal parameter $\\theta^\\star$ is given by

$$\\theta^\\star := \\mathop{\\mathrm{argmax}}_\\theta p_\\theta (\\mathbf{x}) = \\int_\\mathbf{z} p_\\theta(\\mathbf{x}, \\mathbf{z}) d\\mathbf{z} = \\int_\\mathbf{z} p_\\theta(\\mathbf{x} | \\mathbf{z}) p_\\theta(\\mathbf{z}) d \\mathbf{z} \\ .$$

## 2. Amortized Variational Inference: Estimatin the Likelihood 

### Intractability of the Likelihood

In practice, $p_{\\theta}(\\mathbf{x})$ is **intractable**: marginalizing over $\\mathbf{z}$ is prohibitively expensive. A potential solution consists in using the *posterior distribution* which we can express using Bayes Rule:

$$p_\\theta(\\mathbf{z} | \\mathbf{x}) =  \\frac{p_{\\boldsymbol{\\theta}}(\\mathbf{x}, \\mathbf{z})}{p_{\\boldsymbol{\\theta}}(\\mathbf{x})} \\ . $$

However $p_\\theta(\\mathbf{x} | \\mathbf{z})$ is also intractable as it requires evaluating $p_\\theta (\\mathbf{x} )$.

### Approximate Posterior

**Variational Inference** (VI) overcomes the intractability of the *true posterior* $p_\\theta(\\mathbf{z} | \\mathbf{x})$ by introducing an **approximate posterior**

$$q_\\phi(\\mathbf{z} | \\mathbf{x}) \\approx p_\\theta(\\mathbf{z} | \\mathbf{x}) \\ . $$ 

$q_\\phi(\\cdot| \\mathbf{x})$ is chosen among a *variational family* $\\mathcal{Q}$. A common choice for $\\mathcal{Q}$ is the Gaussian family, although it is possible to use other families (Categorical, Poisson, etc.). In the case of the Gaussian family, a common choice is the isotropic Gaussian (diagonal covariance)",0.5396465063095093,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.5434402227401733,notebook 4_1,4.0,"predictions = output.max(1)[1]

        # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy_score(targets, predictions) * len(inputs))

    test_accuracy = np.sum(test_accuracies) / len(x_test)
    print(f""Validation accuracy: {valid_accuracies[-1]:.3f}"")
    print(f""Test accuracy: {test_accuracy:.3f}"")
    
    model.train()'

 
markdown:
### Assignment 2

1. Note the performance of the standard feedforward neural network. Add a [2D convolution layer](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html) before the first layer. Insert the utility module `PrintSize` to check the size of the tensor at any point in `Sequential`, and notice that the size of the image reduces after the convolution. This can cause loss of information, and can be avoided by using adequate padding in the convolutional layer.
  Does adding a convolutional layer increase the generalization performance of the network (try num_filters=32 and filter_size=5 as a starting point)?
  
2. Can the performance be increases even further by stacking more convolution layers?

3. We now have a deeper network than the initial simple feedforward network. What happens if we replace all convolutional layers with linear layers? Is this deep feedforward network performing as well as the convolutional one?
 
4. Max-pooling is a technique for decreasing the spatial resolution of an image while retaining the important features. Effectively this gives a local translational invariance and reduces the computation by a factor of four. In the classification algorithm which is usually desirable. You can either: 
 
   - add a maxpool layer (see the PyTorch docs, and try with kernel_size=2 and stride=2) after the convolution layer, or
   - add stride=2 to the arguments of the convolution layer directly.
     
  Verify that this decreases the spatial dimension of the image (insert a `PrintSize` module in the `Sequential`). Does this increase the performance of the network? Note that, to increase performance, you may need to stack multiple layers, increase the number of filters, or tune the learning rate.

5. Dropout is a very useful technique for preventing overfitting. Try to add a DropoutLayer after some of the convolution layers. You may observe a higher validation accuracy but lower train accuracy. Can you explain why this might be the case?
 
6. Batch normalization may help convergence in larger networks as well as generalization performance. Try to insert batch normalization layers into the network.'

 
markdown:
Again, if you didn't already, you really should [watch this video](https://www.youtube.com/watch?v=AgkfIQ4IGaM).""]'",0.5443830490112305,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What do RNN and LSTM stand for?,RNN stands for Reccurent Neural Network and LSTM stands for Long Short-Term Memory (unit).,notebook 5_1,notebook 5_1,10.0,"**Long Short-Term Memory (LSTM) networks** A standard RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the [Long Short-Term Memory (LSTM, Hochreiter and Schmidhuber. (1997))](https://dl.acm.org/doi/10.1162/neco.1997.9.8.1735) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. RNNs coupled with gated mechanisms are less prone to the problem of vanishing gradients, and can therefore model dependencies over longer number of steps.'

 
markdown:
*Figure: bi-directional recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"" (left-to-right), and the information flowing from the context ""fast"" (right-to-left).*
![Recurrent Neural Network](images/bidirectional-lm-activated.png)

**Bi-directional recurrent neural networks** Using two RNNs running in reverse direction allows building bidirectional language models. The distribution $p_\\theta(\\mathbf{x}_t \\mid \\mathbf{x}_{-t})$ can be parameterized as
$$
p_\\theta( \\cdot \\mid \\mathbf{x}_{-t}) = \\mathrm{Softmax}((\\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t) F^T) \\ ,
$$
where the hidden state  $\\mathbf{h}^\\mathrm{bi}_t = \\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t$ defines hidden state contextualized on all the tokens but $\\mathbf{w}_t$. 

This is the strategy adopted by [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), which popularized learning deep contextualized representations as a pre-training step, and at the samd time, started a [tradition of naming models after Seame Street characters](https://www.theverge.com/2019/12/11/20993407/ai-language-models-muppets-sesame-street-muppetware-elmo-bert-ernie).'

 
markdown:
**Experiment: train your own LSTM language model**
', ""> **NB:**  *training on CPU is very slow. If you don't have access to a GPU, it will be difficult to train a model that generate acceptable samples. In the end of the notebook, we will use pre-trained models directly, so feel free to skip this experiment.* **You still need to implement the loss in the training loop.**""]'

 
code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences",0.3498914837837219,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.3653434216976166,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",0.3653777241706848,notebook 5_3,25.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",0.3706115186214447,notebook 5_1,9.0,"In the case, of bidirectional language models, the context $\\mathbf{w}_{-t}$ corresponds to the whole sequence of tokens with the predicted element masked out. It is possible to generalize the bidirectional factorization to masking out one or more tokens. In that case, we consider a model $p_\\theta(\\mathbf{w}_m \\mid \\mathbf{w}_{-m})$ where $m$ is a set of indices of the tokens being predicted and $-m$ is the set of the other tokens. This is notably the approach adopted in [""BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"", Delvin et al. (2018)](https://arxiv.org/abs/1810.04805).'

 
markdown:
### II.b Recurrent Neural Networks

*Figure: Left-to-right recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"".*
![Recurrent Neural Network](images/recurrent-lm-activated.png)

**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",0.37310442328453064,notebook 5_3,5.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN'

 
markdown:
We will implement the forward pass, backward pass, optimization and training loop for an RNN in numpy so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch and appreciate how convenient the implementation becomes!'

 
markdown:
Let's first define the necessary model parameters. Recall that an $n \\times m$ weight matrix maps $\\mathbb{R}^{m} \\rightarrow \\mathbb{R}^{n}$.""]'

 
code:
hidden_size = 50 # Number of dimensions in the hidden state
vocab_size  = len(word_to_idx) # Size of the vocabulary used",0.3994883596897125,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",0.4052855372428894,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.4340095520019531,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",0.4342480003833771,notebook 5_1,11.0,"code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences

# load and tokenizer the dataset
def batch_tokenize(batch: List[Dict[str, Any]], max_length=max_seq_size, tokenizer: tokenizers.Tokenizer = None, key:str=""text"") -> torch.Tensor:
    texts = batch[key]
    encodings = tokenizer.encode_batch(texts)
    return {""token_ids"": [x.ids[:max_length] for x in encodings]}

# load AG News, take a subset of `max_dataset_size` rows and tokenize
dataset = datasets.load_dataset(""ag_news"")
dataset = datasets.DatasetDict({split: dset.select(range(max_dataset_size)) if len(dset) > max_dataset_size else dset for split, dset in dataset.items()})
dataset = dataset.map(partial(batch_tokenize, tokenizer=glove_tokenizer), batched=True, num_proc=2, batch_size=10)
rich.print(dataset)'

 
code:
class RNNLM(torch.nn.Module):
    """"""A simple implementation of a language model using RNNs.""""""
    def __init__(self, vectors:torch.Tensor):
        super().__init__()
        # register the embeddings
        self.embeddings = torch.nn.Embedding(*glove_vectors.shape)
        self.embeddings.weight.data = glove_vectors

        # register the LSTM
        self.rnn = torch.nn.LSTM(
            input_size=glove_vectors.shape[1],
            hidden_size=glove_vectors.shape[1],
            num_layers=1,
            batch_first=True,
        )

        # project the output of the LSTM (hidden state) back to the vocabulary space
        self.proj = nn.Linear(glove_vectors.shape[1], glove_vectors.shape[0], bias=False)
        # init the projection using the embeddings weights
        self.proj.weight.data = glove_vectors

    def forward(self, token_ids: torch.Tensor, retain_ws:bool=False) -> torch.Tensor:
        # convert the tokens into vectors
        ws = self.embeddings(token_ids)

        # store the word vectors for debugging
        if retain_ws:
          ws.retain_grad()
          self.ws = ws

        # shift the input `ws` right
        w0 = torch.zeros((ws.shape[0], 1, self.embeddings.weight.shape[1]),
                         device=self.embeddings.weight.device, dtype=torch.long)
        ws_shifted = torch.cat([w0, ws[:, :-1]], dim=1)

        # call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)

        # project the hidden state to the vocabulary space
        logits = self.proj(hidden_states)
        return logits",0.44542765617370605,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0,3.0
How can I give text as input to my network?,"Before text can be used as input for a neural network, it needs to be represented as a vector. This can be done by tokenizing the text, and then looking up the embedding vector for each token. Tokenization transforms characters, words, or parts of words into tokens, which can be numbers.",notebook 5_1,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.5576399564743042,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.5620446801185608,notebook 5_1,28.0,"### V.a Language generation
', ""Let's experiment with GPT-2 (in the notebook, we use the smaller [`distilgpt2`](https://huggingface.co/distilgpt2), but feel free to use the original `gpt2` if you have enough compute)"", '
**Experiment** Generate text using GPT-2:'

 
code:
# load a GPT-2 model
model_id = ""distilgpt2""
# model_id = ""gpt2""
tokenizer = transformers.AutoTokenizer.from_pretrained(model_id)
model = transformers.AutoModel.from_pretrained(model_id)
# Here we want to load the weights of GPT2 as an autoregressive LM, or ""causal"" LM: we use the class `AutoModelForCausalLM`.
model = transformers.AutoModelForCausalLM.from_pretrained(model_id)'

 
code:
# encode context the generation is conditioned on
prompt = tokenizer.bos_token # use the Begining Of Sentence token to initialize allow generating text from scratch', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", '# expand input_ids, so we can sample multiple generations in parallel
input_ids = input_ids.repeat(5, 1)

# generate text until the output length (which includes the context length) reaches 50
# documentation for `model.generate()` https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate
output = model.generate(input_ids, do_sample=True, temperature=1., max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 9**: Play with the temperature parameter, what is it controlling? how can you related it to the definition of a language model?

> *Insert your your answer here*'

 
markdown:
### V.b. Prompt-based learning

Prompt-based learning consists in framing a problem into a *prompt* which completion by a language model corresponds to the answer. In other words, it consists in using natural language to interface with language models.

**Experiment** Do language models know what hygge is?

**Exercise 10**: Write a prompt that triggers a language model to define ""hygge"".

> *write your prompt here and test it using GPT-2 and GPT-3*'

 
code:
prompt = ""Q: What is Hygge? A:""', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", 'input_ids = input_ids.repeat(5, 1)
output = model.generate(input_ids, do_sample=True, temperature=1, max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 11**: Test your prompt [with GPT-3](https://beta.openai.com/playground)

> *Insert your prompt and the GPT-3 completion here*
'

 
markdown:",0.5650681257247925,notebook 3_4,3.0,"def forward(self, x):
        x = F.linear(x, self.W_1, self.b_1)
        x = self.activation(x)
        x = F.linear(x, self.W_2, self.b_2)
        return x


net = Net(num_features, num_l1, num_classes)'

 
code:
optimizer = optim.SGD(net.parameters(), lr=0.01)
criterion = nn.CrossEntropyLoss()'

 
code:
# Test the forward pass with dummy data', ""x = np.random.normal(0, 1, (45, dim*dim)).astype('float32')"", '
print(net(torch.from_numpy(x)).size())'

 
markdown:
# Build the training loop

We train the network by calculating the gradient w.r.t the cost function and update the parameters in direction of the negative gradient. 


When training neural network you always use mini batches. Instead of calculating the average gradient using the entire dataset you approximate the gradient using a mini-batch of typically 16 to 256 samples. The paramters are updated after each mini batch. Networks converge much faster using mini batches because the parameters are updated more often.

We build a loop that iterates over the training data. Remember that the parameters are updated each time ``optimizer.step()`` is called.'

 
code:
# we could have done this ourselves,
# but we should be aware of sklearn and its tools
from sklearn.metrics import accuracy_score

# normalize the inputs
x_train.div_(255)
x_valid.div_(255)
x_test.div_(255)

# setting hyperparameters and gettings epoch sizes
batch_size = 100
num_epochs = 200
num_samples_train = x_train.shape[0]
num_batches_train = num_samples_train // batch_size
num_samples_valid = x_valid.shape[0]
num_batches_valid = num_samples_valid // batch_size

# setting up lists for handling loss/accuracy
train_acc, train_loss = [], []
valid_acc, valid_loss = [], []
test_acc, test_loss = [], []
cur_loss = 0
losses = []

get_slice = lambda i, size: range(i * size, (i + 1) * size)

for epoch in range(num_epochs):
    # Forward -> Backprob -> Update params
    ## Train
    cur_loss = 0
    net.train()
    for i in range(num_batches_train):
        optimizer.zero_grad()
        slce = get_slice(i, batch_size)
        output = net(x_train[slce])
        
        # compute gradients given loss
        target_batch = targets_train[slce]
        batch_loss = criterion(output, target_batch)
        batch_loss.backward()
        optimizer.step()
        
        cur_loss += batch_loss   
    losses.append(cur_loss / batch_size)",0.5689643621444702,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",0.5696308016777039,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.5722067952156067,notebook 5_3,23.0,"markdown:
### Training loop'

 
markdown:
It's time for us to train our network. In the section below, you will get to put your deep learning skills to use and create your own training loop. You may want to consult previous exercises if you cannot recall how to define the training loop.""]'

 
code:
# Hyper-parameters
num_epochs = 200

# Initialize a new network
net = MyRecurrentNet()

# Define a loss function and optimizer for this problem
# YOUR CODE HERE!
criterion = 
optimizer = 

# Track loss
training_loss, validation_loss = [], []

# For each epoch
for i in range(num_epochs):
    
    # Track loss
    epoch_training_loss = 0
    epoch_validation_loss = 0
    
    net.eval()
        
    # For each sentence in validation set
    for inputs, targets in validation_set:
        
        # One-hot encode input and target sequence
        inputs_one_hot = one_hot_encode_sequence(inputs, vocab_size)
        targets_idx = [word_to_idx[word] for word in targets]
        
        # Convert input to tensor
        inputs_one_hot = torch.Tensor(inputs_one_hot)
        inputs_one_hot = inputs_one_hot.permute(0, 2, 1)
        
        # Convert target to tensor
        targets_idx = torch.LongTensor(targets_idx)
        
        # Forward pass
        # YOUR CODE HERE!
        outputs = 
        
        # Compute loss
        # YOUR CODE HERE!
        loss = 
        
        # Update loss
        epoch_validation_loss += loss.detach().numpy()
    
    net.train()
    
    # For each sentence in training set
    for inputs, targets in training_set:
        
        # One-hot encode input and target sequence
        inputs_one_hot = one_hot_encode_sequence(inputs, vocab_size)
        targets_idx = [word_to_idx[word] for word in targets]
        
        # Convert input to tensor
        inputs_one_hot = torch.Tensor(inputs_one_hot)
        inputs_one_hot = inputs_one_hot.permute(0, 2, 1)
        
        # Convert target to tensor
        targets_idx = torch.LongTensor(targets_idx)
        
        # Forward pass
        # YOUR CODE HERE!
        outputs = 
        
        # Compute loss
        # YOUR CODE HERE!
        loss = 
        
        # Backward pass
        # YOUR CODE HERE!
        # zero grad, backward, step...
        
        # Update loss
        epoch_training_loss += loss.detach().numpy()
        
    # Save loss for plot
    training_loss.append(epoch_training_loss/len(training_set))
    validation_loss.append(epoch_validation_loss/len(validation_set))

    # Print loss every 10 epochs
    if i % 10 == 0:', ""        print(f'Epoch {i}, training loss: {training_loss[-1]}, validation loss: {validation_loss[-1]}')"", '
        
# Get first sentence in test set
inputs, targets = test_set[1]

# One-hot encode input and target sequence
inputs_one_hot = one_hot_encode_sequence(inputs, vocab_size)
targets_idx = [word_to_idx[word] for word in targets]

# Convert input to tensor
inputs_one_hot = torch.Tensor(inputs_one_hot)
inputs_one_hot = inputs_one_hot.permute(0, 2, 1)",0.5762329697608948,notebook 7_4,0.0,"markdown:
<div class=""alert alert-info"">
This is an optional supplementary notebook
</div>'

 
code:
import matplotlib.pyplot as plt
from IPython.display import Image, display, clear_output
%matplotlib nbagg
%matplotlib inline
plt.style.use([""seaborn-deep"", ""seaborn-whitegrid""])'

 
markdown:
# The density problem

Similarly to the VAE and GAN, we are interested in capturing some empirical input distribution $p(x)$, for which we observe a dataset of samples $\\{ x\\}^n_{i=1} \\sim p(x)$. Each of the models we have seen have been capable of performing this task, but there are a number of problems with both approaches:

A major weakness of the VAE was that it does not generate ""sharp"" images even if we average over multiple samples. The reason for this is grounded in the maximisation of the lower bound, which is only a surrogate for the generative quality, as it is heavily penalised by the KL-term.

For GANs we saw sharp images, but many other problems were swept under the rug. Firstly, training GANs is extremely difficult, with the models being prone to mode-collapses and divergence during training. Additionally, the probabilistic framework posited by VAEs, gives us way to measure the probability of a sample under the distribution - this is missing in GANs.

Luckily, another recent technique has shown promise on these fronts. Let us preface the model by considering how one would estimate the density of a random variable under a known transform. If we let $z \\sim \\mathcal{N}(0, 1)$ and $f(z) = (z/2)^3$ we can plot the resulting density.'

 
code:
import torch
cuda = torch.cuda.is_available()
device = ""cuda:0"" if cuda else ""cpu""

from torch.distributions import Normal

_, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharex=True, sharey=True)
n_samples = 5000

# Define the base distribution p(z)
base = Normal(torch.zeros(2), torch.ones(2))
z = base.sample((n_samples,))

ax1.scatter(*z.t(), s=3)
ax1.set_title(r""Samples $z \\sim N(0, I)$"")
ax1.grid(True)

# Naïvely transform samples
f = lambda z: (z/3)**3
x = f(z)

ax2.scatter(*x.t(), s=3)
ax2.set_title(r""$x = f(z)$"")
ax2.grid(True)

plt.show()'

 
markdown:
A neat trick from probability theory to estimate the density under $f$ is the change of variables formula. For any injective function $f$, we know the following.

$$p(x) = p(z) \\left | \\det \\left( \\frac{\\partial f(z)^{-1}}{\\partial z} \\right )\\right | = p(z) \\left | \\det \\left(\\frac{\\partial f(z)}{\\partial z} \\right ) \\right |^{-1}$$",0.5784398317337036,notebook 5_2,11.0,"output_train = forward_batch(encoded_training_set_x[:3], NN)
print(output_train)       
loss = sequence_loss(output_train, encoded_training_set_y[:3], cross_entropy_loss_sequence)
print(""Loss:"", loss)
loss.backward()

print(""Output:"", output_train)
', ""print('Network before update:')"", ""[print('Layer', i, '\', NN[i]) for i in range(len(NN))] "", '
def parameters(network):
  params = []
  for layer in range(len(network)):
    params += network[layer].parameters()
  return params

def update_parameters(params, learning_rate=0.01):
  for p in params:
    p.v -= learning_rate*p.grad

def zero_gradients(params):
  for p in params:
    p.grad = 0.0

update_parameters(parameters(NN))
', ""print('\Network after update:')"", ""[print('Layer', i, '\', NN[i]) for i in range(len(NN))] "", '
zero_gradients(parameters(NN))
', ""print('\Network after zeroing gradients:')"", ""[print('Layer', i, '\', NN[i]) for i in range(len(NN))] ""]'

 
markdown:
# Backpropagation through time 
', ""Since we have automatic differentiation we don't have to code the backpropagation rule by hand. Just to give you a bit of appreciation for have much bookkeeping is necessary we have given the derivation belwo."", '
We need to compute the partial derivatives
$
\\frac{\\partial E}{\\partial W},~\\frac{\\partial E}{\\partial U},~\\frac{\\partial E}{\\partial V}
$. 
We repeat the definition of the RNN forward pass from above:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ usually is an activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$
- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$

where
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output), and', ""- $h$ is the hidden state (the network's memory) for a given time step."", '
Recall though, that RNNs are recurrent and the weights $W,~U,~V$ are shared across time, i.e. we do not have separate weights for each time step. Therefore, to compute e.g. the partial derivative $\\frac{\\partial E}{\\partial W}$, we need to 1) sum up across time, and 2) apply the chain rule:",0.5803334712982178,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.5811036825180054,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What variables are used in the attention function?,"The attention mechanism is defined using the query Q, the keys K, the values V, and the scaling parameter tau.",notebook 5_1,notebook 5_1,15.0,"We define three variables:
1. The query $\\mathbf{Q} = [\\mathbf{q}_i, \\ldots \\mathbf{q}_{T_\\mathbf{Q}}] \\in \\mathcal{R}^{T_\\mathbf{Q} \\times h_i}$, a sequence of vectors of length $T_\\mathbf{Q}$ and vector dimension $h_i$.
1. The keys $\\mathbf{K} = [\\mathbf{k}_1, \\ldots \\mathbf{k}_{T_{\\mathbf{K}\\mathbf{V}}}] \\in \\mathcal{R}^{T_{\\mathbf{K}\\mathbf{V}} \\times h_i}$, a sequence of vectors of length $T_{\\mathbf{K}\\mathbf{V}}$ and vector dimension $h_i$.
1. The values $\\mathbf{V} = [\\mathbf{v}_1, \\ldots \\mathbf{v}_{T_{\\mathbf{K}\\mathbf{V}}}] \\in \\mathcal{R}^{T_{\\mathbf{K}\\mathbf{V}} \\times h_o}$, a sequence of vectors of length $T_{\\mathbf{K}\\mathbf{V}}$ and of another dimension $h_o$, although in general we choose $h_i = h_o$.

For each query, the attention mechanism returns a convex combinations of the values $\\mathbf{V}$. The attention mechanism is defined as
$$
\\mathrm{Attention}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) = \\mathrm{Softmax}\\left( \\frac{\\mathbf{Q} \\mathbf{K}^T}{\\tau} \\right) \\mathbf{V} \\ ,
$$
where $\\tau$ is a scaling parameter, set to $\\sqrt{h_i}$ in ([""Attention is All You Need"", Wasrani et al. (2016)](https://arxiv.org/abs/1706.03762)). $\\mathrm{Attention}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V})$ is a sequence of $T_\\mathbf{Q}$ vectors, each of dimension $h_o$.",0.3200000524520874,notebook 5_1,16.0,"The above expresson is equivalent to applying attention to each query vector $\\mathbf{q}$ separately. The output for each vector $\\mathbf{q}$ depends on the vector of weights $\\mathbf{\\Lambda} = \\mathrm{Softmax}\\left( \\frac{\\mathbf{q} \\mathbf{K}^T}{\\tau} \\right)$ with values $[\\lambda_1, \\ldots \\lambda_{T_{\\mathbf{K}\\mathbf{V}}}]$. The vector of weights $\\Lambda$ is a function of the inner-product $\\mathbf{q} \\mathbf{K}^T$, which defines a similarity metric between the the vectors $\\mathbf{q}$ and each of the key vectors $[\\mathbf{k}_1, \\ldots \\mathbf{k}_{T_{\\mathbf{K}\\mathbf{V}}}]$. Furthermore, as the weights sum to one, the output of the attention function is a convex combinations of the values:
$$
\\mathrm{Attention}(\\mathbf{q}, \\mathbf{K}, \\mathbf{V}) = \\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i \\ .
$$'

 
markdown:
**Experiment** We will use the GloVe word vectors to illustrate the attention mechanism. 

We define queries and keys using the GloVe word vectors correspond to country names:
$$
\\begin{align}
\\mathbf{Q} =& [\\mathrm{vec(""Italy"")}, \\mathrm{vec(""Korea"")}, \\mathrm{vec(""Nicaragua"")}, \\ldots] \\\\
\\mathbf{K} =& [\\mathrm{vec(""China"")}, \\mathrm{vec(""Russia"")}, \\mathrm{vec(""Turkey"")}, \\ldots] \\ .
\\end{align}
$$
The inner-product between paris is of country vectors will have a large values when the vectors are similar, this might happend when two countries are geographically or culturally close to each other because of the properties of the GloVe vectors. The last component required to apply the attention mechanism is set of value vectors $\\mathbf{V}$.

The choice of values depends on the end problem, for this exercise we choose stay in the same theme as for the word2vec experiments. We choose the value vectors to represent the relative concept ""*capital city of a country*"", which correspond to the vector $\\mathrm{vec(""Capital\\, city"")} - \\mathrm{vec(""Country"")}$ in the gloVe vector space. In practice, for each country we set:
$$
\\begin{align}
\\mathbf{V} =& [\\mathrm{vec(""Beijing"")} - \\mathbf{K}_1, \\mathrm{vec(""Moscow"")} - \\mathbf{K}_2, \\mathrm{vec(""Ankara"")} - \\mathbf{K}_3, \\ldots] \\\\
\\end{align}
$$",0.37784433364868164,notebook 5_1,21.0,"# visualized the log of the attention map
plot_attention_map(attention_map.log(), tokens, tokens)'

 
markdown:
**Exercise 7**: Comment on the structure of the attention map. Why is that the case?

> *Insert your answer here*'

 
markdown:
### IV.b Masked attention

The self-attention layer allows computing the hidden state $\\mathbf{h}_{t}$ based on all the input vectors $\\mathbf{w}_{1:T}$. In language modelling, we want to enforce constrains on the dependencies of $\\mathbf{h}_t$ to allow left-to-right or masked factorizations. A attention mask $\\mathbf{M} \\in \\{0, -\\infty \\}^{T \\times T}$ is of the same dimension as the matrix $ \\mathbf{Q} \\mathbf{K}^T$ and can be utilized to enforce the attention weights $\\mathbf{\\lambda}_1, \\ldots, \\mathbf{{\\lambda}_T}$ to be zero wherever it is necessary. The masked attention mechanism is expressed as
$$
\\mathrm{Attention} \\left(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}, \\mathbf{M} \\right) = \\mathrm{Softmax}\\left( \\mathbf{M} + \\frac{\\mathbf{Q} \\mathbf{K}^T}{\\tau} \\right) \\mathbf{V} \\ .
$$'

 
markdown:
**Exercise 8**:  Let's implement an attention mask corresponding to:"", '1. Left-to-right language model $p(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$
1. bidirection language model $p(\\mathbf{w}_t \\mid \\mathbf{w}_{-t})$
1. right-to-left language model $p(\\mathbf{w}_t \\mid \\mathbf{w}_{t>})$

> Answer in the code below.

**NB** In the visualization bellow, we re-use the gradient map extracted from the left-to-right RNN language model.'

 
code:
def masked_attention(Q, K, V, tau=None, mask=None):
    """"""A simple masked attention layer""""""
    if tau is None:
        tau = math.sqrt(float(Q.shape[-1]))
    assert Q.shape[-1] == K.shape[-1]
    assert K.shape[0] == V.shape[0]
    attention_map = Q @ K.T / tau
    if mask is not None:
        attention_map = mask + attention_map
    attention_weights = attention_map.softmax(dim=1)
    return torch.einsum(""qk, kh -> qh"", attention_weights, V), attention_weights

# get a more natural sentence
sentence = ""Masked attention allows implementing dependency constrains between inputs and outputs.""
token_ids = torch.tensor(glove_tokenizer.encode(sentence).ids)
tokens = [glove_vocabulary[x] for x in token_ids]
vectors = embeddings(token_ids)",0.45796525478363037,notebook 5_1,20.0,"> *Insert your answer here*


**Visualizing the output word vector** In the code below we use the code from the previous word2vec experiment to generate the nearest neighbour corresponding to the analogy: 

$$\\mathrm{vec(""Capital\\,city\\,of\\,the\\,query\\,country"")} = \\mathrm{vec(""Query\\,country"")} + \\mathrm{Attention}(\\mathrm{vec(""Query\\,country"")}, \\mathbf{K}, \\mathbf{V})$$'

 
code:
# Report of the nearest neighbors of the vector `query + Attention(query, keys, values)``
for i, attn_output in enumerate(output):
    # z = query + Attention(qeury, keys, values)
    z = Q[i] + attn_output
    rich.print(f""Nearest neighbors of [red]{queries_labels[i]}[/red] + [blue]Attention({queries_labels[i]}, K, V)"")
    rich.print(vec2words(z, k=5, **glove_args, exclude_vecs=[word2vec(queries_labels[i], **glove_args)]))'

 
markdown:
**Eercise 6** Would the results be different when shuffling the vectors $\\mathbf{K}$ and $\\mathbf{V}$ (with the same permutation for both vectors)?

> *Insert your answer here*'

 
markdown:
### III.b Self-attention

*Figure: A self-attention layers allows attending all the sequence positions*
![Self-attention allows attentind at all the sequence positions](images/self-attention.png)

The attention mechanism is a transformation of a sequence of vectors $\\mathbf{Q}$ given all the values in the sequence $\\mathbf{V}$. In a self-attention layers, the attention layer is parameterized with transformations of the input sequence $\\mathbf{w}_{1:T}$ as parameters, which allows processing each vector in a sequence $\\mathbf{w}_{1:T}$ based on all the other locations. The output of the self-attention layer is a sequence of hidden states:
$$
 \\mathbf{h}_{1:T} = \\mathrm{Attention} \\left(\\mathbf{Q}(\\mathbf{w}_{1:T}), \\mathbf{K}(\\mathbf{w}_{1:T}), \\mathbf{V}(\\mathbf{w}_{1:T}) \\right)
$$
', ""**Illustration** Let's apply the self-attention to a list of word vectors, do you any structure emerging?""]'

 
code:
# Illustration of the above using code
hdim = 300
sentence = ""Copenhagen Denmark Stockholm Sweden Beijing China Tokyo Japan truck car bus""
token_ids = torch.tensor(glove_tokenizer.encode(sentence).ids)
tokens = [glove_vocabulary[x] for x in token_ids]
vectors = embeddings(token_ids)
H, attention_map = attention(vectors, vectors, vectors)
rich.print({
    ""Q"": Q.shape,
    ""K"": K.shape,
    ""V"": V.shape,
    ""H"": H.shape
})

# visualized the log of the attention map
plot_attention_map(attention_map.log(), tokens, tokens)'

 
markdown:
**Exercise 7**: Comment on the structure of the attention map. Why is that the case?",0.45918214321136475,notebook 5_1,26.0,"code:
class MultiHeadedAttention(nn.Module):
    """"""A simple Multi-head attention layer.""""""
    def __init__(self, h, d_model, dropout=0.1):
        ""Take in model size and number of heads.""
        super(MultiHeadedAttention, self).__init__()
        assert d_model % h == 0
        # We assume d_v always equals d_k
        self.d_k = d_model // h
        self.h = h
        self.linears = nn.ModuleList([nn.Linear(d_model, d_model) for _ in range(4)])
        self.attn = None # store the attention maps
        self.dropout = nn.Dropout(p=dropout)

    def forward(self, query, key, value, mask=None):
        nbatches = query.size(0)
        if mask is not None:
            # Same mask applied to all h heads.
            mask = mask.unsqueeze(1)

        # 1) Do all the linear projections in batch from d_model => h x d_k 
        query, key, value = [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2) for l, x in zip(self.linears, (query, key, value))]

        # 2) Apply attention on all the projected vectors in batch. 
        x, self.attn = attention(query, key, value, mask=mask, dropout=self.dropout)

        # 3) ""Concat"" using a view and apply a final linear. 
        x = x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)
        return self.linears[-1](x)'

 
markdown:
### IV.c Conditional layers
', ""In the description of the base layer, we have applied attention to the input sequence (*self-attention*). Machine translation is a sequence-to-sequence task, which requires and *encoder* component, that encodes a source text into a sequence of hidden states $\\mathbf{g_{1:T'}}$. The base layer can be modified with an additional attention layer that is conditionned on the source text. Given a sequence of hidden states $\\mathbf{h}_{1:T}$, the conditional attention layer is:"", '$$', ""\\mathrm{Attention}(\\mathbf{Q}(\\mathbf{h}_{1:T}), \\mathbf{K}(\\mathbf{g}_{1:T'}), \\mathbf{V}(\\mathbf{g}_{1:T'})) \\ ."", '$$
Conditional attention layers are place right after the self-attention layers, before the feed-forward layer (see diagram).

### IV.d Pre-training as language models

Transformers (the decoder component) are language models can therefore be pre-train on vast amount of unlabelled text via maximum likelihood or pseudo likelihood. They allow obtaining contextualized text representations, that can be applied to a multitude of downstream tasks (question-answering, classification, ...). While the original Transformer architecture was applied to a sequence-to-sequence problem with a component that encodes the source text and a language model decoder conditioned on the encoded source text. Transformer-based language models consist in a single decoder component (without conditional attention). The two main alternatives for language modelling are:",0.46151262521743774,notebook 5_1,25.0,"**Multi-head attention** The attention mechanism introduced in the previous section depends on a softmax of inner-products, which might be sparse depending on the value of the vectors, in that case, the layer can only attend to a few positions in the sequence. To enable attending to more positions in the input sentence, multiple attention mechanism can be used in parallel. This is what we call a multi-head attention layer:
$$
\\begin{align}
\\mathrm{MultiHeadAttention} \\left(\\mathbf{Q}^{1:P}, \\mathbf{K^{1:P}}, \\mathbf{V}^{1:P}, \\mathbf{M} \\right) = [ \\mathrm{Attention} \\left(\\mathbf{Q}^{1}, \\mathbf{K^{1}}, \\mathbf{V}^{1}, \\mathbf{P} \\right), 
\\ldots
\\mathrm{Attention} \\left(\\mathbf{Q}^{P}, \\mathbf{K^{P}}, \\mathbf{V}^{P}, \\mathbf{M} \\right)] \\ ,
\\end{align}
$$
where each set of vectors $\\mathbf{Q}^{i}, \\mathbf{Q}^{i}, \\mathbf{Q}^{i}$ corresponding to the head index $i$ is obtained using a separate linear transformation of the input sequence.

**Feed-forward** The multi-head attention layer allows looking up multiple positions of the input sequence, but the output is only a linear combination of the value vector $\\mathbf{V}$. A multi-layer neural network (feed-forward layer) is applied **element-wise** to each element of the sequence of hidden states to allow modelling more complex non-linear dependencies.

**Add & Norm** A Transformer is a deep neural network, and therefore might be difficult to optimize. Similarly deep neural networks in the image processing field, Transformer layer rely on two stabilizing components:
1. [Residual connections](https://arxiv.org/abs/1512.03385) allow to bypass the attention layer as well as the feed-forward layer.
2. [Layer normalization](https://arxiv.org/abs/1607.06450): allow enforcing that the output of a Transformer layer has values that are properly distributed

**Implementation:** Here is an implementation for the attention and multi-head attention. You can also check the official [PyTorch implementation](https://pytorch.org/docs/stable/_modules/torch/nn/modules/activation.html#MultiheadAttention).'

 
code:
def attention(query, key, value, mask=None, dropout=None):
    ""Compute \'Scaled Dot Product Attention\'""
    d_k = query.size(-1)
    scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)
    if mask is not None:
        scores = scores.masked_fill(mask == 0, -math.inf)
    p_attn = F.softmax(scores, dim = -1)
    if dropout is not None:
        p_attn = dropout(p_attn)
    return torch.matmul(p_attn, value), p_attn'",0.46302133798599243,notebook 5_3,9.0,"- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ usually is an activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$
- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$

where
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output), and', ""- $h$ is the hidden state (the network's memory) for a given time step."", '
Recall though, that RNNs are recurrent and the weights $W,~U,~V$ are shared across time, i.e. we do not have separate weights for each time step. Therefore, to compute e.g. the partial derivative $\\frac{\\partial E}{\\partial W}$, we need to 1) sum up across time, and 2) apply the chain rule:

$$\\frac{\\partial E}{\\partial W} = \\sum_{t} \\frac{\\partial E}{\\partial o_{t}} \\frac{\\partial o_{t}}{\\partial W}\\,.$$
To compute$\\frac{\\partial o_{t}}{\\partial W}$ we use the definition of $o_t$ above.
From week 1 (exercise i) we have that
$$\\delta_{o,t} \\equiv \\frac{\\partial E}{\\partial o_{t}} = \\frac{\\partial E_t}{\\partial o_{t}} = \\hat{y}_{t} - y_{t}\\,,$$
where $\\hat{y}_{t}$ is a softmax distribution over model outputs $o_{t}$ at time $t$, and $y_{t}$ is the target label at time $t$. In the above code, this corresponds to
```
d_o = outputs[t].copy()
d_o[np.argmax(targets[t])] -= 1
```
where `outputs[t]` is the output $\\hat{y}_{t}$, and `targets[t]` is a one-hot encoded target.

To compute $\\frac{\\partial E}{\\partial U}$ and $\\frac{\\partial E}{\\partial V}$ we again sum over time and use the chain rule:
$$
\\frac{\\partial E}{\\partial U} = \\sum_{t} \\frac{\\partial E}{\\partial h_{t}} \\frac{\\partial h_{t}}{\\partial U} \\ . 
$$
This leads us to introduce
$$
\\delta_{h,t} \\equiv \\frac{\\partial E}{\\partial h_{t}} \\ .
$$
The backpropagation through time recursion is derived by realising that a variation of $h_t$ affects 1) the loss at time step $t$ through the feed-forward connection to the output and 2) the future losses through the $h_{t+1}$ dependence of $h_t$. Mathematically, we write this through the chain rule:",0.4777839779853821,notebook 5_1,9.0,"In the case, of bidirectional language models, the context $\\mathbf{w}_{-t}$ corresponds to the whole sequence of tokens with the predicted element masked out. It is possible to generalize the bidirectional factorization to masking out one or more tokens. In that case, we consider a model $p_\\theta(\\mathbf{w}_m \\mid \\mathbf{w}_{-m})$ where $m$ is a set of indices of the tokens being predicted and $-m$ is the set of the other tokens. This is notably the approach adopted in [""BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"", Delvin et al. (2018)](https://arxiv.org/abs/1810.04805).'

 
markdown:
### II.b Recurrent Neural Networks

*Figure: Left-to-right recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"".*
![Recurrent Neural Network](images/recurrent-lm-activated.png)

**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",0.4833625853061676,notebook 5_1,17.0,"*Figure: Word vectors vec(""capital city"") - vec(""country"") represented in a vector space. Vectors might point in different direction depending on their position in the vector space.*
![Attention analogies](images/attention-analogies.png)

We represent the query, key and value vectors in the GloVe vector space in the above figure. The intuition is that the value vector $\\mathrm{vec}(\\text{""capital city of a country""})$ is not always the same depending on the country. Therefore, in this experiment, we will attempt to extract value vectors that are contextualized on the query. To do so, we will add the output of the attention (a mixture of vectors $\\mathrm{vec}(\\text{""capital city""}) - \\mathrm{vec}(\\text{""country""})$) to the vector representation of the query (a country). This corresponds to:

$$
\\mathrm{vec(""Capital\\,city\\,of\\,the\\,query\\,country"")} =  \\mathrm{vec(""Query\\,country"")} + \\underbrace{\\mathrm{Attention}(\\mathrm{vec(""Query\\,country"")}, \\mathbf{K}, \\mathbf{V})}_{\\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i}
$$
', ""First, let's investigate the attention weights $\\lambda_1, \\ldots, \\lambda_{T_{\\mathbf{K}\\mathbf{V}}}$ for each query $\\mathbf{q}_1, \\ldots, \\mathbf{q}_\\mathbf{Q} $ separately:""]'

 
code:
# instantiate some embeddings
embeddings = torch.nn.Embedding(*glove_vectors.shape)
embeddings.weight.data = glove_vectors
embeddings.weight.requires_grad = False

def names_to_vectors(values: List[str]) -> torch.Tensor:
    encodings = glove_tokenizer.encode_batch(values)
    vectors = [embeddings(torch.tensor(e.ids)).mean(dim=0) for e in encodings]
    return torch.stack(vectors)",0.48784029483795166,notebook 5_1,30.0,"# Tokenizer
tokenizer_args = {""padding"":True, ""truncation"":True, ""return_tensors"": ""pt""}
documents_ = tokenizer(documents, **tokenizer_args)
questions_ = tokenizer(questions, **tokenizer_args)

# Compute the question and document vectors
with torch.no_grad():
    document_vectors = model(**documents_).pooler_output
    question_vectors = model(**questions_).pooler_output

# compute the inner product (attention map) between all pairs of questions and documents
attention_map = question_vectors @ document_vectors.T
attention_map = attention_map.softmax(dim=1)

# plot as an attention map
plot_attention_map(attention_map, questions, documents)'

 
markdown:
**Exercise 12**: Is DPR retrieving the right document for each question? Comment on the shape of the attention map.

> *Insert your answer here*'

 
markdown:
---
## Credits and additional references

### Credits

Written by Valentin Liévin and reusing parts of the [Notebook](https://github.com/DeepLearningDTU/Deep-Learning-with-PyTorch-1weekcourse/tree/master/3_Recurrent/notebook_transformer) from Frederico Bergamin.


### Additional references

1. RNNs.
- [Blog post: ""The Unreasonable Effectiveness of Recurrent Neural Networks"" (Karpathy)](http://karpathy.github.io/2015/05/21/rnn-effectiveness/)
- [lecture: ""Language Models and RNNs"" (Stanford)](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

2. Transformers
- [Video from the main author of the paper](https://www.youtube.com/watch?v=rBCqOTEfxvg&t=894s)
- [Video lecture from Deepmind](https://www.youtube.com/watch?v=8zAP2qWAsKg&t=2073s)
- [Annotated Transformer](https://nlp.seas.harvard.edu/2018/04/03/attention.html)
- [Blog Post on the Positional Encoder](https://kazemnejad.com/blog/transformer_architecture_positional_encoding/)
- [Transformer from Scratch](https://e2eml.school/transformers.html#positional_encoding)
- [Another blog post explaining transformer](https://jalammar.github.io/illustrated-transformer/)

### Re-using the images

[Figma design file](https://www.figma.com/file/d7BHs0yMhM9CTer43mrTe5/deep-learning-course?node-id=0%3A1)'

 
markdown:
'[]'",0.4918024241924286,1.0,2.0,3.0,4.0,5.0,6.0,6.0,7.0,8.0,9.0
What is sampling for a language model?,"Sampling text means that the language model is generating text. This corresponds to the inference process of the network, as opposed to training.",notebook 5_1,notebook 5_1,8.0,"**Training** As long as the transition function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ is differentiable (i.e., using neural networks), a language model can be  trained via maximum likelihood, e.g. maximizing the log-likelihood with the loss:
$$
L = - \\log p_\\theta(\\mathbf{w}_{1:T}) = - \\sum_{t=1}^T \\log p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})
$$
Each term $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ can be evaluated using the observed variables $\\mathbf{w}_t$ and $\\mathbf{w}_{<t}$ (no sampling is required) and thus training of auto-regressive models is fast when the evaluation of $f_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ can be parallelized.'

 
markdown:
*Figure: Bidirectional language models*
![Masked language model](images/masked-lm.png)

**Bidirectional and masked language models** Autoregressive language models learn to predict a token $\\mathbf{w}_t$ given the context up to the step $t-1$. One can also use a [pseudo likelihood](https://en.wikipedia.org/wiki/Pseudolikelihood), where $\\mathbf{w}_t$ is not only conditioned on the preceeding tokens $\\mathbf{w}_{<t}$, but also on the next tokens $\\mathbf{w}_{>t}$. This defines a bidirectional language model, which factorizes as
$$
L_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{-t}) \\ ,
$$
where $\\mathbf{w}_{-t}$ represent the set of tokens $\\mathbf{w}_{1:T} \\backslash \\{ \\mathbf{w}_t \\}$. We call it pseudo because this likelihood is not forming a valid distribution (because the graph formed by $\\mathbf{w}_{1:T}$ is not a directed acyclic graph (a DAG)).  Bidirectional language models such as [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), learn token representation contextualized on the whole context.",0.37313103675842285,notebook 5_1,6.0,"### II.a Language Modelling

*Figure: Left-to-right language models*
![Autoregressive left-to-right language model](images/ar-lm.png)

**Autoregressive factorization** Language models aim at grasping the underlying linguistic structure of a text fragment: whereas word vectors model words independently of each others, a language model tracks the grammatical and semantic relationships between word tokens. Given a piece of text encoded into tokens $\\mathbf{w}_{1:T} = [\\mathbf{w_1}, \\ldots, \\mathbf{w}_T]$ a *left-to-right* language model describes $\\mathbf{w}_{1:T}$ with the following factorization:
$$
 p_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t}) \\ ,
$$
where $\\theta$ is a model parameter. The above *autoregressive* factorization describes a *recursive* function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$, which is shared across all the time steps. In the above figure, we represent a left-to-right language model with dependencies represented by arrows for fixed steps $t=3$ and $t=4$. Because of this choice of factorization, a language model defines a graphical model where each step $t$ depends on all the previous steps $<t$ and the conditional $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ models the dependendies between the context $\\mathbf{w}_{<t}$ and the variable $\\mathbf{w}_t$.

**Other factorizations** Autoregressive models are not required to adopt a left-to-right factorization and other forms of factorizations can be implemented (right-to-left or arbitrary permutations). See [""XLNet: Generalized Autoregressive Pretraining for Language Understanding"", Yang et al. (2019)](https://arxiv.org/abs/1906.08237) for an example.'

 
markdown:
*Figure: Categorical distribution over the possible next tokens given the context*
![Categorical distribution](images/categorical-dist.png)",0.3772643506526947,notebook 5_1,7.0,"markdown:
*Figure: Categorical distribution over the possible next tokens given the context*
![Categorical distribution](images/categorical-dist.png)

**Distribution of the possible next tokens** The distribution $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ is a categorical distribution defined on the whole token vocabulary $\\mathcal{v}$. Without loss of generality, we denote $f_\\theta(\\mathbf{w}_t, \\mathbf{w}_{<t})$ the function with parameter $\\theta$ that parametrize:
$$
p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t}) = \\frac{\\exp f_\\theta(\\mathbf{w}_t, \\mathbf{w}_{<t})}{\\sum_{\\mathbf{v} \\in \\mathcal{V}} \\exp f_\\theta(\\mathbf{v}, \\mathbf{w}_{<t})} \\ .
$$
The distribution $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ assigns a probability for each token in the vocabulary to appear right after the context $\\mathbf{w}_{<t}$. As pictured in the above figure, many completion are possibles under the model $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$.

**Language models learn contextual representations** Assigning a probability to each word in the vocabulary requires learning abstract representations of the context $\\mathbf{w}_{<t}$. For instance, in the horse example, predicting the word ""fast"" will be easier to predict if some knowledge of the grammatical rules and common sense is acquired. In this example example, the model needs to learn that $\\mathbf{w}_4$ must be an adjective, and that this adjective can be attributed to a horse. Therefore, the function $f_\\theta$ must acquire a non-trivial representation of the context to make sensible token predictions$.'

 
markdown:
**Sampling** At each step $t$, the $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ implements a categorical distribution defined on the vocabulary $\\mathcal{V}$. Sampling or *generating* text can by iteratively sampling tokens, as showed in the pseudo-code bellow:
```python
ws = [] # placeholder for all the samples w_t
for t in range(T):
    wt_logits = f(ws, theta) # logits of p(w_t | w_{<t})
    wt = Categorical(logits=wt_logits).sample() # sampled w_t
    ws.append(wt) # append the new sample to be used as input in the next step
```
Sampling is often expensive, as it requires one evaluation of the function $f_\\theta$ for each step and cannot be trivially parallelized.",0.3833571672439575,notebook 5_1,9.0,"In the case, of bidirectional language models, the context $\\mathbf{w}_{-t}$ corresponds to the whole sequence of tokens with the predicted element masked out. It is possible to generalize the bidirectional factorization to masking out one or more tokens. In that case, we consider a model $p_\\theta(\\mathbf{w}_m \\mid \\mathbf{w}_{-m})$ where $m$ is a set of indices of the tokens being predicted and $-m$ is the set of the other tokens. This is notably the approach adopted in [""BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"", Delvin et al. (2018)](https://arxiv.org/abs/1810.04805).'

 
markdown:
### II.b Recurrent Neural Networks

*Figure: Left-to-right recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"".*
![Recurrent Neural Network](images/recurrent-lm-activated.png)

**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",0.4193631410598755,notebook 5_1,5.0,"# Word analogies
rich.print(""\[red]Vector arithmetic:"")
cases = [
    [(""+"", ""king""), (""-"", ""man""), (""+"", ""woman"")],
    [(""+"", ""denmark""), (""-"", ""france""), (""+"", ""paris"")],
    [(""+"", ""pakistan""), (""-"", ""belgium""), (""+"", ""brussels"")],
]
for operations in cases:
    # current location in the vector space
    location = 0
    rich.print(f""Vector Translation: [blue]0 {\' \'.join(f\'{d} {v}\' for d,v in operations)} = "")
    for sign, word in operations:
        # retrieve the `vec(word)``
        vec = word2vec(word, **glove_args)
        if vec is None:
            raise ValueError(f""Unknown word `{word}`"")

        # parse the direction (+/-)
        direction = {""+"": 1, ""-"": -1}[sign]

        # apply the vector transform to the current location
        location  +=  direction * vec

    # return the nearest neighbours of the end location
    exclude_list = [word2vec(w, **glove_args) for _, w in operations]
    words, similarities = vec2words(location, k=5, exclude_vecs=exclude_list, **glove_args)
    rich.print(f""Words: {words}"")
    rich.print(f""Similarities: {similarities}"")'

 
markdown:
**Beyond word2vec**  The Skip-Gram model allows us to learn meaningful word representations and arithmetic in the resulting vector space, allowing us to manipulate concepts. Ultimately, we are interested in learning representations that represent larger text fragments such as sentences, paragraphs or documents. Doing so requires combining multiple vectors, which can be done by exploiting arithmetic in the vector space or by combining word-vectors using deep neural networks, such as Transformers!

___
## II. Language models

We have seen how to encode text into sequences of tokens, seen how to convert tokens into vectors using a set of embeddings and experimented with a GloVe word vector space. In this section we will see how to model text at the sentence, pragraph or even document level using language models.

### II.a Language Modelling

*Figure: Left-to-right language models*
![Autoregressive left-to-right language model](images/ar-lm.png)",0.4364154040813446,notebook 5_1,28.0,"### V.a Language generation
', ""Let's experiment with GPT-2 (in the notebook, we use the smaller [`distilgpt2`](https://huggingface.co/distilgpt2), but feel free to use the original `gpt2` if you have enough compute)"", '
**Experiment** Generate text using GPT-2:'

 
code:
# load a GPT-2 model
model_id = ""distilgpt2""
# model_id = ""gpt2""
tokenizer = transformers.AutoTokenizer.from_pretrained(model_id)
model = transformers.AutoModel.from_pretrained(model_id)
# Here we want to load the weights of GPT2 as an autoregressive LM, or ""causal"" LM: we use the class `AutoModelForCausalLM`.
model = transformers.AutoModelForCausalLM.from_pretrained(model_id)'

 
code:
# encode context the generation is conditioned on
prompt = tokenizer.bos_token # use the Begining Of Sentence token to initialize allow generating text from scratch', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", '# expand input_ids, so we can sample multiple generations in parallel
input_ids = input_ids.repeat(5, 1)

# generate text until the output length (which includes the context length) reaches 50
# documentation for `model.generate()` https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate
output = model.generate(input_ids, do_sample=True, temperature=1., max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 9**: Play with the temperature parameter, what is it controlling? how can you related it to the definition of a language model?

> *Insert your your answer here*'

 
markdown:
### V.b. Prompt-based learning

Prompt-based learning consists in framing a problem into a *prompt* which completion by a language model corresponds to the answer. In other words, it consists in using natural language to interface with language models.

**Experiment** Do language models know what hygge is?

**Exercise 10**: Write a prompt that triggers a language model to define ""hygge"".

> *write your prompt here and test it using GPT-2 and GPT-3*'

 
code:
prompt = ""Q: What is Hygge? A:""', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", 'input_ids = input_ids.repeat(5, 1)
output = model.generate(input_ids, do_sample=True, temperature=1, max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 11**: Test your prompt [with GPT-3](https://beta.openai.com/playground)

> *Insert your prompt and the GPT-3 completion here*
'

 
markdown:",0.44269314408302307,notebook 7_2,8.0,"## 5. Modelling Choices: How to design a VAE


### Prior $p_{\\theta}(\\mathbf{z})$

The prior distribution structures the latent space. Althougt it is common to choose a simple *variaitonal family* (Diagonal Gaussian or Categorical), more complex prior distributions can be used including complex factorizations (e.g. autoregressive: $p(\\mathbf{z}) = p_\\theta(\\mathbf{z_1}) \\prod_{l=1}^{L-1} p_{\\theta}(\\mathbf{z}_{l+1} | \\mathbf{z}_l) $ ). By default, the prior is commonly chosen to be a simple Gaussian distribution: $$p(\\mathbf{z}) := \\mathcal{N}(0, I)$$

### Posterior $q_\\phi(\\mathbf{z}|\\mathbf{x})$

The posterior is chosen to be of the same variational family as the prior. When using the reparameterization trick, the posterior must admit a reparameterization. A common choice fitting the Gaussian prior is a Diagonal Gaussian distribution: $$q_\\phi(\\mathbf{z} | \\mathbf{x}) := \\mathcal{N}( \\mathbf{z}\\ |\\ \\mu_\\phi(\\mathbf{x}) , \\sigma_\\phi(\\mathbf{x}) I )$$


### Observation Model $p_\\theta(\\mathbf{x} | \\mathbf{z})$

The choice of the observation model depends on the nature of the features, so for binary pixel values an appropiate choice of reconstruction distribution is the [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution), $$p_\\theta(\\mathbf{x}|\\mathbf{z}) = \\prod_i \\mathcal{B}(x_i | g_\\theta(\\mathbf{z})) = \\prod_i g_\\theta(\\mathbf{z})_i^{x_i} \\cdot (1-g_\\theta(\\mathbf{z})_i)^{1-x_i}$$ where $x_1, \\dots, x_D \\in \\{0,1\\}^{D}$ are the pixel values of the image $\\mathbf{x}$. $g_\\theta$ is the *decoder* of the VAE. $g_\\theta(z)_i$ is the probability of generating a 0 (black) or 1 (white) for the $i$-th pixel value. This is equivalent to modelling 784 imbalanced coin-tossing processes. This is only possible because we assume the pixel intensities to be i.i.d. (Independent and Identically Distributed), which means $p(\\mathbf{x}) = \\prod_i p(x_i)$ , so no direct correlations between them needs to modelled, even though we still achieve an indirect conditional correlation through the latent variables, $\\mathbf{z}$.


## 6. Evaluating a Variational Autoencoder

### Assessing the Quality of the Samples",0.44459182024002075,notebook 5_1,11.0,"code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences

# load and tokenizer the dataset
def batch_tokenize(batch: List[Dict[str, Any]], max_length=max_seq_size, tokenizer: tokenizers.Tokenizer = None, key:str=""text"") -> torch.Tensor:
    texts = batch[key]
    encodings = tokenizer.encode_batch(texts)
    return {""token_ids"": [x.ids[:max_length] for x in encodings]}

# load AG News, take a subset of `max_dataset_size` rows and tokenize
dataset = datasets.load_dataset(""ag_news"")
dataset = datasets.DatasetDict({split: dset.select(range(max_dataset_size)) if len(dset) > max_dataset_size else dset for split, dset in dataset.items()})
dataset = dataset.map(partial(batch_tokenize, tokenizer=glove_tokenizer), batched=True, num_proc=2, batch_size=10)
rich.print(dataset)'

 
code:
class RNNLM(torch.nn.Module):
    """"""A simple implementation of a language model using RNNs.""""""
    def __init__(self, vectors:torch.Tensor):
        super().__init__()
        # register the embeddings
        self.embeddings = torch.nn.Embedding(*glove_vectors.shape)
        self.embeddings.weight.data = glove_vectors

        # register the LSTM
        self.rnn = torch.nn.LSTM(
            input_size=glove_vectors.shape[1],
            hidden_size=glove_vectors.shape[1],
            num_layers=1,
            batch_first=True,
        )

        # project the output of the LSTM (hidden state) back to the vocabulary space
        self.proj = nn.Linear(glove_vectors.shape[1], glove_vectors.shape[0], bias=False)
        # init the projection using the embeddings weights
        self.proj.weight.data = glove_vectors

    def forward(self, token_ids: torch.Tensor, retain_ws:bool=False) -> torch.Tensor:
        # convert the tokens into vectors
        ws = self.embeddings(token_ids)

        # store the word vectors for debugging
        if retain_ws:
          ws.retain_grad()
          self.ws = ws

        # shift the input `ws` right
        w0 = torch.zeros((ws.shape[0], 1, self.embeddings.weight.shape[1]),
                         device=self.embeddings.weight.device, dtype=torch.long)
        ws_shifted = torch.cat([w0, ws[:, :-1]], dim=1)

        # call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)

        # project the hidden state to the vocabulary space
        logits = self.proj(hidden_states)
        return logits",0.44648173451423645,notebook 5_1,27.0,"* [Generative Pre-trained Transformers (GPT)](https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf): autoregressive left-to-right language models implemented using a Transformer.

* [Bidirectional Encoder Representations from Transformers (BERT)](https://arxiv.org/abs/1810.04805): a masked language model trained to predict tokens that are randomly masked out (masked language model) and trained to predict whether two sentences are related or not (next-sentence prediction (NSP) task).'

 
markdown:
___
## V. Applications of Transformer-based language models
', ""Let's experiment with a few pre-trained Transformers using the [🤗 HuggingFace](https://huggingface.co/) environment and the [OpenAI API](https://beta.openai.com/docs/guides/completion). "", '
HuggingFace is a company that manages multiple open source projects:
* **[tokenizers](https://huggingface.co/docs/tokenizers/index)**: a very efficient implementation of tokenizers using Rust.
* **[datasets](https://huggingface.co/docs/datasets/index)**:a library for handling and sharing large datasets (in particular they use [Apache Arrow](https://arrow.apache.org/)  for efficient data loading from disk)
* **[transformers](https://huggingface.co/docs/transformers/index)**: implementation and sharing of Transformers in Tensorflow, PyTorch and JAX

All HuggingFace models and datasets (text, audio, image and more) can be accessed through the [🤗 Hub](https://huggingface.co/), and many models can tested lives on [🤗 spaces](https://huggingface.co/spaces). In the examples bellow, we will first try to manipulate data and models using lower primitives (tokenizing data, loading a model, generating / inference), so you can interact if the intermediate variables if you want to. Then we will us the blackbox [`Pipeline`](https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/pipelines#transformers.pipeline) object. If you want to apply Transformers without modifying any of the components, the `Pipeline` can be used to perform complex tasks in one line of code, as showed here with the translation task.

The OpenAI API gives access to GPT-3 ([""Language Models are Few-Shot Learners"", Brown et al. (2020)](https://arxiv.org/abs/2005.14165)) through a [playground](https://beta.openai.com/playground), where you can test the text completion capabilities of these models. GPT-3 is a large language model (up to 175 billion parameters) which has acquired impressive language understanding capabilities. It can be applied to solve new tasks without task-specific fine-tuning. [OpenAI gives you $18 to of API credits, but careful with the number of calls: running the largest version of GPT-3 (´davinci´) can be expensive](https://openai.com/api/pricing/).",0.4475364685058594,notebook 7_2,1.0,"$$\\mathbf{z} \\sim p_{\\theta}(\\mathbf{z}), \\  \\mathbf{x} \\sim p_{\\theta}(\\mathbf{x} | \\mathbf{z})$$ 

where the **prior** $p_{\\theta}(\\mathbf{z})$ is a chosen distribution (e.g. $\\mathcal{N}(0 , I)$) and the **observation model** $p_\\theta(\\mathbf{x} | \\mathbf{z})$ is a distribution depending on the variable $\\mathbf{z}$. Since we are interested in learning a model that explains well the data, we aim at maximizing the probability assigned to $\\mathbf{x}$. Therefore the optimal parameter $\\theta^\\star$ is given by

$$\\theta^\\star := \\mathop{\\mathrm{argmax}}_\\theta p_\\theta (\\mathbf{x}) = \\int_\\mathbf{z} p_\\theta(\\mathbf{x}, \\mathbf{z}) d\\mathbf{z} = \\int_\\mathbf{z} p_\\theta(\\mathbf{x} | \\mathbf{z}) p_\\theta(\\mathbf{z}) d \\mathbf{z} \\ .$$

## 2. Amortized Variational Inference: Estimatin the Likelihood 

### Intractability of the Likelihood

In practice, $p_{\\theta}(\\mathbf{x})$ is **intractable**: marginalizing over $\\mathbf{z}$ is prohibitively expensive. A potential solution consists in using the *posterior distribution* which we can express using Bayes Rule:

$$p_\\theta(\\mathbf{z} | \\mathbf{x}) =  \\frac{p_{\\boldsymbol{\\theta}}(\\mathbf{x}, \\mathbf{z})}{p_{\\boldsymbol{\\theta}}(\\mathbf{x})} \\ . $$

However $p_\\theta(\\mathbf{x} | \\mathbf{z})$ is also intractable as it requires evaluating $p_\\theta (\\mathbf{x} )$.

### Approximate Posterior

**Variational Inference** (VI) overcomes the intractability of the *true posterior* $p_\\theta(\\mathbf{z} | \\mathbf{x})$ by introducing an **approximate posterior**

$$q_\\phi(\\mathbf{z} | \\mathbf{x}) \\approx p_\\theta(\\mathbf{z} | \\mathbf{x}) \\ . $$ 

$q_\\phi(\\cdot| \\mathbf{x})$ is chosen among a *variational family* $\\mathcal{Q}$. A common choice for $\\mathcal{Q}$ is the Gaussian family, although it is possible to use other families (Categorical, Poisson, etc.). In the case of the Gaussian family, a common choice is the isotropic Gaussian (diagonal covariance)",0.45722272992134094,1.0,2.0,3.0,4.0,5.0,6.0,6.0,7.0,8.0,8.0
What is a rnn?,"A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc. A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence. The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations"," notebook 5_2, notebook 5_3",notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.3677525520324707,notebook 5_3,5.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN'

 
markdown:
We will implement the forward pass, backward pass, optimization and training loop for an RNN in numpy so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch and appreciate how convenient the implementation becomes!'

 
markdown:
Let's first define the necessary model parameters. Recall that an $n \\times m$ weight matrix maps $\\mathbb{R}^{m} \\rightarrow \\mathbb{R}^{n}$.""]'

 
code:
hidden_size = 50 # Number of dimensions in the hidden state
vocab_size  = len(word_to_idx) # Size of the vocabulary used",0.3831928074359894,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",0.3951236605644226,notebook 5_1,9.0,"In the case, of bidirectional language models, the context $\\mathbf{w}_{-t}$ corresponds to the whole sequence of tokens with the predicted element masked out. It is possible to generalize the bidirectional factorization to masking out one or more tokens. In that case, we consider a model $p_\\theta(\\mathbf{w}_m \\mid \\mathbf{w}_{-m})$ where $m$ is a set of indices of the tokens being predicted and $-m$ is the set of the other tokens. This is notably the approach adopted in [""BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"", Delvin et al. (2018)](https://arxiv.org/abs/1810.04805).'

 
markdown:
### II.b Recurrent Neural Networks

*Figure: Left-to-right recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"".*
![Recurrent Neural Network](images/recurrent-lm-activated.png)

**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",0.395926833152771,notebook 5_3,25.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",0.45173579454421997,notebook 5_1,14.0,"# backward and optimize
            loss.backward()
            optimiser.step()
            step += 1
            pbar.update(1)

            # Report
            if step % 5 ==0 :
                loss = loss.detach().cpu()
                pbar.set_description(f""epoch={epoch}, step={step}, loss={loss:.1f}"")

            # save checkpoint
            if step % 50 ==0 :
                torch.save(rnn.state_dict(), checkpoint_file)
            if step >= num_steps:
                break
        epoch += 1'

 
code:
# sample the RNN language model
with torch.no_grad():
    sample = rnn.sample(num_steps=10, batch_size=10, temperature=0.5, prevent_repetitions=True)
    rich.print(glove_tokenizer.decode_batch(sample.detach().cpu().numpy()))'

 
code:
_ = rnn.cpu()
# free-up memory if needed: delete the RNN model
# del rnn'

 
markdown:
**Exercise 3**: What would happen if the inputs of the RNN were not shifted to the right (in sample in the RNNLM class)?  

> *Insert your answer here.*'

 
markdown:
___
## III. Attention mechanism and Transformers


The attention mechanism was first introduce in machine learning for machine translation tasks [(""Neural Machine Translation by Jointly Learning to Align and Translate"", Bahdanau et al. (2014))](https://arxiv.org/abs/1409.0473). Translation is a sequence-to-sequence problem which goal is to generate a translation of a source text. The attention mechanism was introduced to allow *attenting* the whole source text at any of the generation steps. We implement attention with the softmax function because it is a differential version of a hard zero-one attention.

In this section, we will introduce the *scaled dot-product* self-attention mechanism and the Transformer architecture [(""Attention is All You Need"", Wasrani et al. (2016))](https://arxiv.org/abs/1706.03762).

### III.a Attention mechanism

Attention has become a very important concept in deep learning beginning with [""Neural Machine Translation by Jointly Learning to Align and Translate"", Badanau et. al. (2015)](https://arxiv.org/abs/1409.0473). The idea key idea in that paper is that when you translate a sentence from for example German to English then it is a good is helpful for the model when it generates",0.4560788869857788,notebook 5_1,10.0,"**Long Short-Term Memory (LSTM) networks** A standard RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the [Long Short-Term Memory (LSTM, Hochreiter and Schmidhuber. (1997))](https://dl.acm.org/doi/10.1162/neco.1997.9.8.1735) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. RNNs coupled with gated mechanisms are less prone to the problem of vanishing gradients, and can therefore model dependencies over longer number of steps.'

 
markdown:
*Figure: bi-directional recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"" (left-to-right), and the information flowing from the context ""fast"" (right-to-left).*
![Recurrent Neural Network](images/bidirectional-lm-activated.png)

**Bi-directional recurrent neural networks** Using two RNNs running in reverse direction allows building bidirectional language models. The distribution $p_\\theta(\\mathbf{x}_t \\mid \\mathbf{x}_{-t})$ can be parameterized as
$$
p_\\theta( \\cdot \\mid \\mathbf{x}_{-t}) = \\mathrm{Softmax}((\\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t) F^T) \\ ,
$$
where the hidden state  $\\mathbf{h}^\\mathrm{bi}_t = \\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t$ defines hidden state contextualized on all the tokens but $\\mathbf{w}_t$. 

This is the strategy adopted by [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), which popularized learning deep contextualized representations as a pre-training step, and at the samd time, started a [tradition of naming models after Seame Street characters](https://www.theverge.com/2019/12/11/20993407/ai-language-models-muppets-sesame-street-muppetware-elmo-bert-ernie).'

 
markdown:
**Experiment: train your own LSTM language model**
', ""> **NB:**  *training on CPU is very slow. If you don't have access to a GPU, it will be difficult to train a model that generate acceptable samples. In the end of the notebook, we will use pre-trained models directly, so feel free to skip this experiment.* **You still need to implement the loss in the training loop.**""]'

 
code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences",0.4587511122226715,notebook 5_1,11.0,"code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences

# load and tokenizer the dataset
def batch_tokenize(batch: List[Dict[str, Any]], max_length=max_seq_size, tokenizer: tokenizers.Tokenizer = None, key:str=""text"") -> torch.Tensor:
    texts = batch[key]
    encodings = tokenizer.encode_batch(texts)
    return {""token_ids"": [x.ids[:max_length] for x in encodings]}

# load AG News, take a subset of `max_dataset_size` rows and tokenize
dataset = datasets.load_dataset(""ag_news"")
dataset = datasets.DatasetDict({split: dset.select(range(max_dataset_size)) if len(dset) > max_dataset_size else dset for split, dset in dataset.items()})
dataset = dataset.map(partial(batch_tokenize, tokenizer=glove_tokenizer), batched=True, num_proc=2, batch_size=10)
rich.print(dataset)'

 
code:
class RNNLM(torch.nn.Module):
    """"""A simple implementation of a language model using RNNs.""""""
    def __init__(self, vectors:torch.Tensor):
        super().__init__()
        # register the embeddings
        self.embeddings = torch.nn.Embedding(*glove_vectors.shape)
        self.embeddings.weight.data = glove_vectors

        # register the LSTM
        self.rnn = torch.nn.LSTM(
            input_size=glove_vectors.shape[1],
            hidden_size=glove_vectors.shape[1],
            num_layers=1,
            batch_first=True,
        )

        # project the output of the LSTM (hidden state) back to the vocabulary space
        self.proj = nn.Linear(glove_vectors.shape[1], glove_vectors.shape[0], bias=False)
        # init the projection using the embeddings weights
        self.proj.weight.data = glove_vectors

    def forward(self, token_ids: torch.Tensor, retain_ws:bool=False) -> torch.Tensor:
        # convert the tokens into vectors
        ws = self.embeddings(token_ids)

        # store the word vectors for debugging
        if retain_ws:
          ws.retain_grad()
          self.ws = ws

        # shift the input `ws` right
        w0 = torch.zeros((ws.shape[0], 1, self.embeddings.weight.shape[1]),
                         device=self.embeddings.weight.device, dtype=torch.long)
        ws_shifted = torch.cat([w0, ws[:, :-1]], dim=1)

        # call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)

        # project the hidden state to the vocabulary space
        logits = self.proj(hidden_states)
        return logits",0.46470317244529724,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",0.4750375747680664,notebook 5_2,9.0,"Complete the RNNLayer class below.

Explain how we reuse the DenseLayer class.

Explain what the forward and the forward_sequence method do.'

 
code:
from typing import Sequence

class RNNLayer:
    def __init__(self, n_in: int, n_hid: int, act_fn, initializer = NormalInitializer(), initializer_hid = NormalInitializer()):
        self.n_hid = n_hid
        self.in_hid_layer = DenseLayer( , , lambda x: x, initializer)
        self.hid_hid_layer = DenseLayer (, , lambda x: x, initializer_hid, use_bias=False) # we already get a bias through in_hid_layer        
        self.initial_hid = [Var(0.0) for _ in range(n_hid)]
        self.stored_hid = [Var(0.0) for _ in range(n_hid)]
        self.act_fn = act_fn
    
    def __repr__(self):    ', ""        return 'Feed-forward: ' + repr(self.in_hid_layer) + ' Recurrent: ' + repr(self.hid_hid_layer) + ' Initial hidden: ' + repr(self.initial_hid)"", '
    def parameters(self) -> Sequence[Var]:      
      return self.in_hid_layer.parameters() + self.hid_hid_layer.parameters() + self.initial_hid

    def forward_step(self, input: Sequence[Var], input_hid: Sequence[Var]) -> Sequence[Var]:
        in_hids =  # contribution from input
        hid_hids =   # contribution from hidden state

        hids = []
        for i in range(self.n_hid):
          hids.append( )

        return hids
    
    def forward_sequence(self, input: Sequence[Sequence[Var]], use_stored_hid = False) -> Sequence[Sequence[Var]]:
        out = []
        if use_stored_hid:
            hid = self.stored_hid
        else:
            hid = self.initial_hid
        # Takes a sequence and loops over each character in the sequence. Note that each character has dimension equal to the embedding dimension
        for i in range(len(input)):
            hid = 
            out.append(hid)
        self.stored_hid = hid
        return out'

 
markdown:
Now we can define a network and pass some data through it.'

 
code:
NN = [
    RNNLayer(1, 5, lambda x: x.tanh()),
    DenseLayer(5, 1, lambda x: x.identity())
]

def forward_batch(input: Sequence[Sequence[Sequence[Var]]], network, use_stored_hid=False):
  
  def forward_single_sequence(x, network, use_stored_hid):
    for layer in network:
        if isinstance(layer, RNNLayer):
            x = layer.forward_sequence(x, use_stored_hid) 
        else:
            x = layer.forward_sequence(x)
    return x

  output = [ forward_single_sequence(input[n], network, use_stored_hid) for n in range(len(input))]
  return output

print(NN[0])
x_train =[
          [[Var(1.0)], [Var(2.0)], [Var(3.0)]],
          [[Var(1.0)], [Var(2.0)], [Var(3.0)]]
          ]",0.476688027381897,1.0,2.0,3.0,3.0,4.0,4.0,4.0,4.0,5.0,6.0
What topics are covered in the first three weeks of the course?,". Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper. 2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy. 3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.", CourseOutline.txt,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.397102415561676,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.40170586109161377,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.4044882655143738,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.41110581159591675,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.45241910219192505,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.45434921979904175,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.4557819664478302,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.4610902667045593,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.47989463806152344,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.4877125024795532,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
When does project work start?,Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work., CourseOutline.txt,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.40044015645980835,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.428738534450531,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.4490792751312256,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.45400649309158325,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.474305123090744,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.4811914265155792,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.5064173936843872,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.5453715324401855,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.5555098652839661,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.5672355890274048,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0
How are students expected to communicate and evaluate their project work?,"Organize and present project results at the final project presentation and in report. Read, evaluate and give feedback to work of other students", LearningObjectives.txt,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.35426396131515503,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.3608089089393616,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.3828749656677246,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.3911277651786804,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.40842998027801514,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.4943605661392212,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.4959142804145813,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.5146621465682983,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.5255608558654785,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.5260008573532104,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What are the expectations regarding the final project report and presentation?,"Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion. Organize and present project results at the final project presentation and in report.", LearningObjectives.txt,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.300609290599823,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.32259830832481384,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.34442391991615295,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.38178205490112305,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.44720926880836487,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.5034006834030151,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.5108104348182678,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.5211188793182373,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.5295865535736084,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",0.5296372175216675,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What is the schedule for the '02456 Deep Learning 2023' course and what teaching method is used?,"Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)... We use flipped classroom teaching.", CoursePlan.txt,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.23554827272891998,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.3396560549736023,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.3652092516422272,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.383694052696228,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.39336255192756653,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.4086466431617737,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.43157240748405457,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.431989848613739,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.47191092371940613,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.4787309169769287,1.0,1.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0
What are the requirements for students to gain access to the final project in the '02456 Deep Learning 2023' course?,The student gains access to the final project by passing 6 out of 8 lab sessions that precede it. A lab session is passed by: grading the reports from lab sessions of 3 other students on Peergrade and passing the lab as judged by the teacher, CoursePlan.txt,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.30587679147720337,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.30727437138557434,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.31688255071640015,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.3558003306388855,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.38072019815444946,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.39279279112815857,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.39323174953460693,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",0.40458136796951294,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",0.4272059202194214,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.44714462757110596,1.0,1.0,2.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0
