Question,Answer,Source,Retrived_doc_1_source,Retrived_doc_1_id,Retrived_doc_1_content,Retrived_doc_1_score,Retrived_doc_2_source,Retrived_doc_2_id,Retrived_doc_2_content,Retrived_doc_2_score,Retrived_doc_3_source,Retrived_doc_3_id,Retrived_doc_3_content,Retrived_doc_3_score,Retrived_doc_4_source,Retrived_doc_4_id,Retrived_doc_4_content,Retrived_doc_4_score,Retrived_doc_5_source,Retrived_doc_5_id,Retrived_doc_5_content,Retrived_doc_5_score,Retrived_doc_6_source,Retrived_doc_6_id,Retrived_doc_6_content,Retrived_doc_6_score,Retrived_doc_7_source,Retrived_doc_7_id,Retrived_doc_7_content,Retrived_doc_7_score,Retrived_doc_8_source,Retrived_doc_8_id,Retrived_doc_8_content,Retrived_doc_8_score,Retrived_doc_9_source,Retrived_doc_9_id,Retrived_doc_9_content,Retrived_doc_9_score,Retrived_doc_10_source,Retrived_doc_10_id,Retrived_doc_10_content,Retrived_doc_10_score,recall@1,recall@2,recall@3,recall@4,recall@5,recall@6,recall@7,recall@8,recall@9,recall@10
What is PyTorch?,"It’s a Python based scientific computing package targeted at two sets of audiences:
A replacement for numpy to use the power of GPUs
a deep learning research platform that provides maximum flexibility and speed",notebook 3_1,notebook 3_1,0.0,"markdown:
# Credits

This is heavily based on https://github.com/pytorch/tutorials'

 
markdown:
# What is PyTorch?

> **NOTE** In the last part of this lab cuda is used. If you have a cuda enabled machine, read the README.md in the root of this repo on how to use nvidia-docker.


It’s a Python based scientific computing package targeted at two sets of
audiences:
-  A replacement for numpy to use the power of GPUs
-  a deep learning research platform that provides maximum flexibility
   and speed'

 
markdown:
# Getting Started

In this lab you will get a quick start on what pytorch is and how to use it.

## 1. Tensors

Tensors are similar to numpy’s ndarrays, with the addition being that
Tensors can also be used on a GPU to accelerate computing.'

 
code:
['import torch'

 
markdown:
Construct a 5x3 matrix, uninitialized'

 
code:
x = torch.Tensor(5, 3)
print(x)'

 
markdown:
Construct a randomly initialized matrix'

 
code:
x = torch.rand(5, 3)
print(x)'

 
markdown:
['Get its size'

 
code:
print(x.size())'

 
markdown:
**NOTE**: `torch.Size` is in fact a tuple, so it supports the same operations that a tuple supports.'

 
code:
x[1:3] = 2
print(x)'

 
markdown:
# Assignment

Make use of the pytorch docs <http://pytorch.org/docs/torch>
1. Make a tensor of size (2, 17)
2. Make a torch.FloatTensor of size (3, 1)
3. Make a torch.LongTensor of size (5, 2, 1)
  - fill the entire tensor with 7s
4. Make a torch.ByteTensor of size (5,)
  - fill the middle 3 indices with ones such that it records [0, 1, 1, 1, 0]'

 
markdown:
## 2. Operations', ""There are multiple syntaxes for operations. Let's see addition as an example:"", '
### 2.1 Addition: syntax 1'

 
code:
y = torch.rand(5, 3)
print(x + y)'

 
markdown:
### 2.2 Addition: syntax 2'

 
code:
print(torch.add(x, y))'

 
markdown:
### 2.3 Addition: giving an output tensor'

 
code:
result = torch.Tensor(5, 3)
torch.add(x, y, out=result)
print(result)'

 
markdown:
### 2.4 Addition: in-place

adds `x`to `y`'

 
code:
y.add_(x)
print(y)'

 
markdown:
**NOTE**: Any operation that mutates a tensor in-place is post-fixed with an `_`. For example: `x.copy_(y)`, `x.t_()`, will change `x`.'

 
markdown:
You can use standard numpy-like indexing with all bells and whistles!'

 
code:
print(x[:, 1])'",0.8883505463600159,notebook 3_2,0.0,"markdown:
# Credits

This is heavily influenced or copied from https://github.com/pytorch/tutorials'

 
markdown:
# Autograd: automatic differentiation

Central to all neural networks in PyTorch is the ``autograd`` package.
Let’s first briefly visit this, and we will then go to training our first neural network.

The `autograd` package provides automatic differentiation for all operations on Tensors.
It is a define-by-run framework, which means that your backprop is defined by how your code is run, and that every single iteration can be different.

Let us see this in more simple terms with some examples.'

 
markdown:
## 1. Tensor

`torch.Tensor` is the central class of the package. Setting the attribute `.requires_grad` to `True` will make the tensor ""record"" all operations on it. When you finish your computation you can call `.backward()` and have all the gradients computed automatically. The gradient for this tensor will be accumulated into the `.grad` attribute.

![autograd.Variable](../static_files/autograd-variable.png)

There’s one more class which is very important for autograd implementation - a `Function`.

`Tensor` and `Function` are interconnected and build up an acyclic graph, that encodes a complete history of computation. Each tensor has a `.grad_fn` attribute that references a `Function` that has created the `Tensor` (except for Tensors created by the user - their `grad_fn` is `None`).

If you want to compute the derivatives, you can call `.backward()` on a Tensor. If `Tensor` is a scalar (i.e. it holds a one element data), you don’t need to specify any arguments to backward(), however if it has more elements, you need to specify a `gradient` argument that is a tensor of matching shape.'

 
code:
['import torch'

 
markdown:
Create a tensor'

 
code:
x = torch.ones(2, 2, requires_grad=True)
print(x)'

 
markdown:
Do a tensor operation:'

 
code:
y = x + 2
print(y)'

 
markdown:
`y` was created as a result of an operation, so it has a `grad_fn`.'

 
code:
print(y.grad_fn)'

 
markdown:
Do more operations on y'

 
code:
z = y * y * 3
out = z.mean()

print(z)
print(out)'

 
markdown:
# Assignments

1. Create a Tensor that `requires_grad` of size (5, 5)
2. Sum the values in the Tensor'

 
markdown:
## 2. Gradients

Let’s backprop now. Because `out` contains a single scalar, `out.backward()` is equivalent to `out.backward(torch.tensor([1.0]))`'

 
code:
out.backward()'

 
markdown:
Print gradients d(out)/dx'

 
code:
'print(x.grad)'

 
markdown:
You should have a matrix of `4.5`. Let’s denote the tensor `out` with $o$.

We have:
$o = \\frac{1}{4}\\sum_i z_i$, $z_i = 3(x_i+2)^2$ and $z_i\\bigr\\rvert_{x_i=1} = 27$.",1.0090265274047852,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.1179170608520508,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",1.1892120838165283,notebook 5_2,4.0,"return training_set, validation_set, test_set
    

training_set, validation_set, test_set = create_datasets(sequences, Dataset)
', ""print(f'We have {len(training_set)} samples in the training set.')"", ""print(f'We have {len(validation_set)} samples in the validation set.')"", ""print(f'We have {len(test_set)} samples in the test set.')""]'

 
markdown:
When working with more complex data than what we use in this exercise, creating a PyTorch `DataLoader` on top of the dataset can be beneficial. A data loader is basically a fancy generator/iterator that we can use to abstract away all of the data handling and pre-processing + it's super useful for processing batches of data as well! Data loaders will come in handy later when you start to work on your projects, so be sure to check them out!"", '
For more information on how to use datasets and data loaders in PyTorch, [consult the official guide](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html).'

 
markdown:
## Nanograd utilities'

 
markdown:
We load necessary utility functions for the Nanograd library, which we saw in Lab 2.'

 
code:
# Copy and pasted from https://github.com/rasmusbergpalm/nanograd/blob/main/nanograd.py

from math import exp, log, tanh

class Var:
    """"""
    A variable which holds a float and enables gradient computations.
    """"""

    def __init__(self, val: float, grad_fn=lambda: []):
        assert type(val) == float
        self.v = val
        self.grad_fn = grad_fn
        self.grad = 0.0

    def backprop(self, bp):
        self.grad += bp
        for input, grad in self.grad_fn():
            input.backprop(grad * bp)

    def backward(self):
        self.backprop(1.0)
', ""    def __add__(self: 'Var', other: 'Var') -> 'Var':"", '        return Var(self.v + other.v, lambda: [(self, 1.0), (other, 1.0)])
', ""    def __mul__(self: 'Var', other: 'Var') -> 'Var':"", '        return Var(self.v * other.v, lambda: [(self, other.v), (other, self.v)])

    def __pow__(self, power):
        assert type(power) in {float, int}, ""power must be float or int""
        return Var(self.v ** power, lambda: [(self, power * self.v ** (power - 1))])
', ""    def __neg__(self: 'Var') -> 'Var':"", '        return Var(-1.0) * self
', ""    def __sub__(self: 'Var', other: 'Var') -> 'Var':"", '        return self + (-other)
', ""    def __truediv__(self: 'Var', other: 'Var') -> 'Var':"", '        return self * other ** -1",1.1948691606521606,notebook 3_1,1.0,"markdown:
You can use standard numpy-like indexing with all bells and whistles!'

 
code:
print(x[:, 1])'

 
markdown:
**Read later** 100+ Tensor operations, including transposing, indexing, slicing, mathematical operations, linear algebra, random numbers, etc are described here <http://pytorch.org/docs/torch>'

 
markdown:
# Assignment

1. multiplication of two tensors (see [torch.Tensor.mul](http://pytorch.org/docs/master/tensors.html#torch.Tensor.mul))
2. do the same, but inplace
3. division of two tensors (see [torch.Tensor.div](http://pytorch.org/docs/master/tensors.html#torch.Tensor.div))
4. perform a matrix multiplication of two tensors of size (2, 4) and (4, 2)'

 
markdown:
## 3. Numpy Bridge

Converting a torch Tensor to a numpy array and vice versa is a breeze.

The torch Tensor and numpy array will share their underlying memory locations, and changing one will change the other.

### 3.1 Converting torch Tensor to numpy Array'

 
code:
a = torch.ones(5)
print(a)'

 
code:
b = a.numpy()
print(b)'

 
markdown:
See how the numpy array changed in value: the `numpy()` method provides a *view* of the original tensor, not a copy.'

 
code:
a.add_(1)
print(a)
print(b)'

 
markdown:
### 3.2 Converting numpy Array to torch Tensor

See how changing the np array changed the torch Tensor automatically'

 
code:
import numpy as np
a = np.ones(5)
b = torch.from_numpy(a)
np.add(a, 1, out=a)
print(a)
print(b)'

 
markdown:
# Assignment

1. create a tensor of size (5, 2) containing ones
2. now convert it to a numpy array
3. now convert it back to a torch tensor'

 
markdown:
All the Tensors on the CPU except a CharTensor support converting to NumPy and back.

## 4 CUDA Tensors

Tensors can be moved onto GPU using the `.cuda` function.
This is not necessary, but check the `README.md` for details on how to use a GPU with docker.'

 
code:
# let us run this cell only if CUDA is available
if torch.cuda.is_available():
    x = x.cuda()
    y = y.cuda()
    z = x + y
    # Notice that the tensors are now of type torch.cuda.FloatTensor (notice the cuda in there)
    # This is meant as a tensor to be run on the GPU.
    # The .cuda() does this to any parameter it is applied to.
    print(x)
    print(y)
    print(z)
else:
    print(""CUDA not available on your machine."")'

 
code:
'[]'",1.2046141624450684,notebook 3_3,2.0,"code:
import torch
from torch import nn
import torch.nn.functional as F'

 
markdown:
[`Parameters`](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter) have a very special property when used with [`Module`](https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=module#torch.nn.Module)s - when they’re assigned as `Module` attributes they are automatically added to the list of its parameters, and will appear e.g. in the `parameters()` iterator. \\
Assigning a Tensor doesn’t have such effect. This is because one might want to cache some temporary state (more on this later) in the model. If there was no such class as `Parameter`, these temporaries would get registered too.'

 
code:
class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        # Setting up variables, these variables are weights in your 
        # network that can be updated while running our graph.
        # Notice, to make a hidden layer, the weights need to have the 
        # following dimensionality:
        #   W[number_of_units_going_out, number_of_units_going_in]
        #   b[number_of_units_going_out]
        # in the example below we have 2 input units (num_features) and 2 output units (num_output)
        # so our weights become W[2, 2], b[2]
        # if we want to make a hidden layer with 100 units, we need to define the shape of the
        # first weight to W[100, 2], b[2] and the shape of the second weight to W[2, 100], b[2]
        
        # first layer
        self.W_1 = nn.Parameter(torch.randn(num_output, num_features)) 
        self.b_1 = nn.Parameter(torch.randn(num_output))
        
        # second layer (to be completed as an exercise)
        # NB when you create a second layer, remember that you also must change parts of the first layer
        # self.W_2 = <YOUR CODE HERE>
        # self.b_2 = <YOUR CODE HERE>
        
    def forward(self, x):
        # Setting up ops, these ops will define edges along our computational graph
        # The below ops will compute a logistic regression, 
        # but can be modified to compute a neural network
        x = F.linear(x, self.W_1, self.b_1)
        
        # second layer (to be completed as an exercise)
        # NB when you create a second layer, remember that you also must change parts of the first layer
        # x = F.linear(x, self.W_2, self.b_2)
        return F.softmax(x, dim=1) # softmax to be performed on the second dimension

net = Net()'

 
markdown:
Knowing how to print your tensors is useful'

 
code:
# list all parameters in your network
print(""NAMED PARAMETERS"")
print(list(net.named_parameters()))
print()
# the .parameters() method simply gives the Tensors in the list
print(""PARAMETERS"")
print(list(net.parameters()))
print()",1.2083592414855957,notebook 3_4,5.0,"- add L1 or L2 weight regularization (aka. weight decay) 
- add dropout to the network (**note** the `net.train()` and `net.eval()` are already in the code)
- add batchnorm

__Pointers on regularization hyperparameter:__
1. L2 and [L1 regularization](http://pytorch.org/docs/master/nn.html#torch.nn.L1Loss) (weight decay of optimization functions) 
  - Normal ranges: 1e-4  -  1e-8
1. [Dropout](http://pytorch.org/docs/master/nn.html?highlight=dropout#torch.nn.Dropout). Dropout rate 0.1-0.5
  - Remember to pick the correct version according to the input dimensionality
  - **NOTE** call `net.train()` before training to activate random dropout, and call `net.eval()` to deactivate dropout while validating or running inference with model.
1. [Batchnorm](http://pytorch.org/docs/master/nn.html#torch.nn.BatchNorm1d): Batchnorm also acts as a regularizer - Often very useful (faster and better convergence)
  - Remember to pick the correct version according to the input dimensionality
  - **NOTE** call `net.train()` before training to activate, and call `net.eval()` to have a non-stochastic variant while validating or running inference with model.
    '

 
markdown:
You are done for now. [Good job.](https://media1.tenor.com/images/0fd559b07f2174f9b8b7dbde7c5a67ca/tenor.gif)'",1.2263091802597046,notebook 7_1,2.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",1.233506679534912,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",1.2395198345184326,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0,2.0
What is the MNIST dataset?,"MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).
<image>",notebook 3_4,notebook 3_4,1.0,"code:
# plot a few MNIST examples
idx, dim, classes = 0, 28, 10
# create empty canvas
canvas = np.zeros((dim*classes, classes*dim))

# fill with tensors
for i in range(classes):
    for j in range(classes):
        canvas[i*dim:(i+1)*dim, j*dim:(j+1)*dim] = x_train[idx].reshape((dim, dim))
        idx += 1

# visualize matrix of tensors as gray scale image
plt.figure(figsize=(4, 4))', ""plt.axis('off')"", ""plt.imshow(canvas, cmap='gray')"", ""plt.title('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
## Model

One of the large challenges in deep learning is the amount of hyperparameters that needs to be selected, and the lack of a good principled way of selecting them.
Hyperparameters can be found by experience (guessing) or some search procedure (often quite slow).
Random search is easy to implement and performs decent: http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf . 
More advanced search procedures include [Spearmint](https://github.com/JasperSnoek/spearmint) and many others.

**In practice a lot of trial and error is almost always involved.** This can be frustrating and time consuming, but the best thing to do is to think as a scientist, and go about it in a ordered manner --> monitor as much as you can, take notes, and be deliberate!

Below are some guidelines that you can use as a starting point to some of the most important hyperparameters. 
(*regularization* is also very important, but will be covered later.)


### Ballpark estimates of hyperparameters
__Number of hidden units and network structure:__', ""You'll have to experiment. One rarely goes below 512 units for feedforward networks (unless your are training on CPU...)."", ""There's some research into stochastic depth networks: https://arxiv.org/pdf/1603.09382v2.pdf, but in general this is trial and error."", '
__Parameter initialization:__
Parameter initialization is extremely important.
PyTorch has a lot of different initializers, check the [PyTorch API](http://pytorch.org/docs/master/nn.html#torch-nn-init). Often used initializer are
1. Kaiming He
2. Xavier Glorot
3. Uniform or Normal with small scale (0.1 - 0.01)
4. Orthogonal (this usually works very well for RNNs)

Bias is nearly always initialized to zero using the [torch.nn.init.constant(tensor, val)](http://pytorch.org/docs/master/nn.html#torch.nn.init.constant)

__Mini-batch size:__
Usually people use 16-256. Bigger is not allways better. With smaller mini-batch size you get more updates and your model might converge faster. Also small batch sizes use less memory, which means you can train a model with more parameters.",0.9752771258354187,notebook 7_4,5.0,"|-|Autoregressive|Variational Autoencoders|Generative Adversarial Networks|Flows|
|-|--------------|---|---|---|
|Objective|log-likelihood (stable)|doubly stochastic ELBO (stable)|approximate adversarial loss (unstable)|log-likelihood (stable)|
|Latent space|None|dimension collapsing|low dimensional|high-dimensional|
|Architecture|requires ordering, arbitrary data|arbitrary|arbitrary, continuous data|requires partitioning (NVP), continuous data|'

 
code:
'[]'",1.0177974700927734,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",1.0570248365402222,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",1.0759057998657227,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",1.0938152074813843,notebook 7_1,2.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",1.0984711647033691,notebook 4_1,2.0,"code:
# Load the MNIST data. 

# Note that we reshape the data from:
#   (nsamples, num_features) = (nsamples, channels * height * width)
# to:
#   (nsamples, channels, height, width)
# in order to retain the spatial arrangements of the pixels.
', ""data = np.load('mnist.npz')"", 'channels, height, width = 1, 28, 28


def get_data(split, size):
    x = data[f""X_{split}""][:size].astype(\'float32\')
    x = x.reshape((-1, channels, height, width))
    targets = data[f""y_{split}""][:size].astype(\'int64\')
    return torch.from_numpy(x), torch.from_numpy(targets)

', ""x_train, targets_train = get_data('train', 50000)"", ""x_valid, targets_valid = get_data('valid', 2000)"", ""x_test, targets_test = get_data('test', 5000)"", '
num_classes = len(np.unique(targets_train))

print(""Information on dataset"")
print(""Shape of x_train:"", x_train.shape)
print(""Shape of targets_train:"", targets_train.shape)
print(""Shape of x_valid:"", x_valid.shape)
print(""Shape of targets_valid:"", targets_valid.shape)
print(""Shape of x_test:"", x_test.shape)
print(""Shape of targets_test:"", targets_test.shape)'

 
code:
# Plot a few MNIST examples
plt.figure(figsize=(7, 7))
plt.imshow(make_grid(x_train[:100], nrow=10).permute(1, 2, 0))', ""plt.axis('off')"", 'plt.show()'

 
markdown:
# Define a simple feed forward neural network'

 
code:
assert (channels, height, width) == x_train.shape[1:]
n_features = channels * height * width


class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first forward pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):

    def __init__(self):
        super(Model, self).__init__()
        activation_fn = nn.ReLU

        self.net = nn.Sequential(
            nn.Flatten(),  # from (1, channels, height, width) to (1, channels * height * width)
            nn.Linear(n_features, 128),
            activation_fn(),
            nn.Linear(128, 128),
            activation_fn(),
            nn.Linear(128, num_classes)
        )

    def forward(self, x):
        return self.net(x)


model = Model()
print(model)

loss_fn = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=1e-3)'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 1, 28, 28))
print(""Output shape:"", out.size())
print(f""Output logits:\{out.detach().numpy()}"")
print(f""Output probabilities:\{out.softmax(1).detach().numpy()}"")'

 
markdown:
# Train network'",1.1157903671264648,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",1.1332119703292847,notebook 7_2,12.0,"code:
#plot a few MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
## Building the model
When defining the model the latent layer must act as a bottleneck of information, so that we ensure that we find a strong internal representation. We initialize the VAE with 1 hidden layer in the encoder and decoder using relu units as non-linearity.'

 
code:
class VariationalAutoencoder(nn.Module):
    """"""A Variational Autoencoder with
    * a Bernoulli observation model `p_\\theta(x | z) = B(x | g_\\theta(z))`
    * a Gaussian prior `p(z) = N(z | 0, I)`
    * a Gaussian posterior `q_\\phi(z|x) = N(z | \\mu(x), \\sigma(x))`
    """"""
    
    def __init__(self, input_shape:torch.Size, latent_features:int) -> None:
        super(VariationalAutoencoder, self).__init__()
        
        self.input_shape = input_shape
        self.latent_features = latent_features
        self.observation_features = np.prod(input_shape)",1.1365976333618164,notebook 4_1,0.0,"markdown:
# Convolutional neural networks 101

Convolution neural networks are one of the most successful types of neural networks for image recognition and an integral part of reigniting the interest in neural networks. They are able to extract structural relations in the data, such as spatial in images or temporal in time series.

In this lab, we will experiment with inserting 2D-convolution layers in the fully connected neural networks introduced previously. We will also try to visualize the learned convolution filters and try to understand what kind of features they learn to recognize.
', ""If you have not watched Jason Yosinski's [video on visualizing convolutional networks](https://www.youtube.com/watch?v=AgkfIQ4IGaM), you definitely should do so now. If you are unfamiliar with the convolution operation, [Vincent Dumoulin](https://github.com/vdumoulin/conv_arithmetic) has a nice visualization of different convolution variants. For a more in-depth tutorial, please see http://cs231n.github.io/convolutional-networks/ or http://neuralnetworksanddeeplearning.com/chap6.html.""]'

 
markdown:
## Reminder: what are convolutional networks?

Standard ConvNets are, in many respects, very similar to the dense feedforward networks we saw previously:
 * The network is still organized into layers.
 * Each layer is parameterized by weights and biases.
 * Each layer has an element-wise non-linear transformation (activation function).
 * There are no cycles in the connections (more on this in later labs).

*So what is the difference?*
The networks we saw previously are called *dense* because each unit receives input from all the units in the previous layer. This is not the case for ConvNets. In ConvNets each unit is only connected to a small subset of the input units. This is called the *receptive field* of the unit.

#### Example
The input (green matrix) is a tensor of size `1x5x5` -- i.e. it has one ""channel"" (like a grayscale image), and the feature map has size `5x5`. Let us define a `1x3x3` kernel (yellow submatrix). The kernel weights are indicated in red at the bottom right of each element. The computation can be thought of as an elementwise multiplication followed by a sum. Here we use a *stride* of 1, as shown in this animation:

<img src=""https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/convolutions.gif"" style=""width: 400px;""/>

GIF courtesy of [Stanford](http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution)

After having convolved the image, we perform an elementwise non-linear transformation on the *convolved features*.
In this example, the input is a 2D *feature map* with depth 1.'

 
markdown:
# Assignment 1

### Assignment 1.1: Manual calculations

Perform the following computation, and write the result below.

![](https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/conv_exe.png)",1.139397144317627,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
Which optimizers are mentioned in the exercise notebook?,"Optimizer and learning rate:
SGD + Momentum: learning rate 0.01 - 0.1
ADAM: learning rate 3e-4 - 1e-5
RMSPROP: somewhere between SGD and ADAM",notebook 3_4,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",1.2271997928619385,notebook 3_3,6.0,"markdown:
# Assignments

1. A linear logistic classifier is only able to create a linear decision boundary. Change the Logistic classifier into a (nonlinear) Neural network by inserting a dense hidden layer between the input and output layers of the model
 
2. Experiment with multiple hidden layers or more / less hidden units. What happens to the decision boundary?
 
3. Overfitting: When increasing the number of hidden layers / units, the neural network will fit the training data better by creating a highly nonlinear decision boundary. If the model is too complex it will often generalize poorly to new data (validation and test set). Can you observe this from the training and validation errors? 
 
4. We used the vanilla stochastic gradient descent algorithm for parameter updates. This usually converges slowly and more sophisticated pseudo-second-order methods usually work better. Try changing the optimizer to [adam or momentum](http://pytorch.org/docs/master/optim.html#torch.optim.Adam)'

 
markdown:
When you're done, continue to the next part of this lab.""]'

 
code:
'[]'",1.2836607694625854,notebook 3_4,2.0,"__Nonlinearity:__ [The most commonly used nonliearities are](http://pytorch.org/docs/master/nn.html#non-linear-activations)
1. ReLU
2. Leaky ReLU
3. ELU
3. Sigmoid (rarely, if ever, used in hidden layers anymore, squashes the output to the interval [0, 1] - appropriate if the targets are binary.
4. Tanh is similar to the sigmoid, but squashes to [-1, 1]. Rarely used any more.
4. Softmax normalizes the output to 1, usrful if you have a multi-class classification problem.

See the plot below.

__Optimizer and learning rate:__
1. SGD + Momentum: learning rate 0.01 - 0.1 
2. ADAM: learning rate 3e-4 - 1e-5
3. RMSPROP: somewhere between SGD and ADAM'

 
code:
# Illustrate different output units
x = np.linspace(-6, 6, 100)
units = {
    ""ReLU"": lambda x: np.maximum(0, x),
    ""Leaky ReLU"": lambda x: np.maximum(0, x) + 0.1 * np.minimum(0, x),
    ""Elu"": lambda x: (x > 0) * x + (1 - (x > 0)) * (np.exp(x) - 1),
    ""Sigmoid"": lambda x: (1 + np.exp(-x))**(-1),
    ""tanh"": lambda x: (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))
}

plt.figure(figsize=(5, 5))
[plt.plot(x, unit(x), label=unit_name, lw=2) for unit_name, unit in units.items()]
plt.legend(loc=2, fontsize=16)', ""plt.title('Non-linearities', fontsize=20)"", 'plt.ylim([-2, 5])
plt.xlim([-6, 6])

# assert that all class probablities sum to one
softmax = lambda x: np.exp(x) / np.sum(np.exp(x))
print(""softmax should sum to one (approxiamtely):"", np.sum(softmax(x)))'

 
code:
#Hyperparameters
num_classes = 10
num_l1 = 512
num_features = x_train.shape[1]

# define network
class Net(nn.Module):

    def __init__(self, num_features, num_hidden, num_output):
        super(Net, self).__init__()  
        # input layer
        self.W_1 = Parameter(init.xavier_normal_(torch.Tensor(num_hidden, num_features)))
        self.b_1 = Parameter(init.constant_(torch.Tensor(num_hidden), 0))
        # hidden layer
        self.W_2 = Parameter(init.xavier_normal_(torch.Tensor(num_output, num_hidden)))
        self.b_2 = Parameter(init.constant_(torch.Tensor(num_output), 0))
        # define activation function in constructor
        self.activation = torch.nn.ELU()",1.299455165863037,notebook 7_1,4.0,"train_loss.append(np.mean(batch_loss))

    # Evaluate, do not propagate gradients
    with torch.no_grad():
        net.eval()
        
        # Just load a single batch from the test loader
        x, y = next(iter(test_loader))
        
        if cuda:
            x = x.cuda()
        
        outputs = net(x)

        # We save the latent variable and reconstruction for later use
        # we will need them on the CPU to plot', ""        x_hat = outputs['x_hat']"", ""        z = outputs['z'].cpu().numpy()"", '
        loss = loss_function(x_hat, x)

        valid_loss.append(loss.item())
    
    if epoch == 0:
        continue

    # live plotting of the trainig curves and representation
    plot_autoencoder_stats(x=x,
                           x_hat=x_hat,
                           z=z,
                           y=y,
                           train_loss=train_loss,
                           valid_loss=valid_loss,
                           epoch=epoch,
                           classes=classes,
                           dimensionality_reduction_op=None)
    
   '

 
markdown:
'# Assignments'

 
markdown:
## Assignment 1 - Analyzing the AE
1. The above implementation of an AE is very simple.
    - Experiment with the number of layers and try different non-linearities in order to improve the reconstructions
    - What happens with the network when we change the non-linearities in the latent layer (e.g. sigmoid)?
    - Try to increase the number of digit classes in the training set and analyze the results
    - Test different optimization algorithms such as ADAM and RMSProp and decide whether you should use regularizers
       
2. Currently we optimize w.r.t. mean squared error. 
    - Find another error function that could fit this problem better
    - Evaluate whether the similarity function $d$ is a better choice and explain your findings

3. Complexity of the bottleneck.
    - Increase the number of units in the latent layer and train
    - Visualize by using [PCA](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) or [t-SNE](http://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html)'

 
markdown:
## Assignment 2 - Adding classification for semi-supervised learning

The above training has been performed unsupervised. Now let us assume that we only have a fraction of labeled data points from each class. As we know, semi-supervised learning can be utilized by combining unsupervised and supervised learning. Now you must analyze whether a trained AE from the above exercise can aid a classifier.

1. Build a simple classifier (like the ones from week1) where you:
    - Train on the labeled dataset and evaluate the results
2. Build a second classifier and train on the latent output $\\mathbf{z}$ of the AE.
3. Build a third classifier and train on the reconstructions of the AE.
4. Evaluate the classifiers against each other and implement a model that improves the classification by combining the input, latent output, and reconstruction.

Below we provide some starting code for using only a subset of the labelled data.'",1.3131535053253174,notebook 8_2_Prerequisites_ipynb,0.0,"markdown:
# Prerequisites

> By Jonas Busk ([jbusk@dtu.dk](mailto:jbusk@dtu.dk))

**2019 update:** Changes have been made to the display of environments due to the previous `viewer` being incompatible with newer versions of Gym.

**2022 update:** Rendering was disabled, and the notebook now uses the `colabgymrender` package to render a video.

In this lab we will create neural network reinforcement learning agents with [PyTorch](https://pytorch.org/) to navigate various environments from [OpenAI Gym](https://gym.openai.com/) developed by [OpenAI](https://openai.com/).

Please refer to the [docs](https://gym.openai.com/docs/) on how to get started with Gym. You are also encouraged to take a look at this short [post on the OpenAI blog](https://blog.openai.com/openai-gym-beta/).'

 
markdown:
## Installation

Below is a brief guide on how to install OpenAI Gym. For more details, please refer to the repository on [GitHub](https://github.com/openai/gym) and the [docs](https://gym.openai.com/docs).

You can do a minimal install of the packaged version of Gym directly from PyPI:

```
pip install gym
```

Or you can perform a minimal install from GitHub:

```
git clone https://github.com/openai/gym.git
cd gym
pip install -e .
```

If you run in Colab, you can do a quick pip install of Gym in the cell below:'

 
code:
!pip install gym[classic_control] > /dev/null 2>&1
!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1
!pip install colabgymrender > /dev/null 2>&1
!pip install imageio==2.4.1 > /dev/null 2>&1'

 
markdown:
You will also need an installation of `ffmpeg` locally. If you do not have it installed already, you can install it by one of the following commands depending on your system:

```sudo apt-get install ffmpeg``` (Linux)

```conda install -c conda-forge ffmpeg``` (Anaconda)'

 
markdown:
## Running an environment

Here is a bare minimum example of running a Gym environment. This creates an instance of the [CartPole-v0](https://gym.openai.com/envs/CartPole-v0) environment and runs until the rollout is done, taking random actions and rendering the environment at each step. With Gym installed, you should be able to see a small animation of the environment below.'

 
code:
import gym
from gym import wrappers
from colabgymrender.recorder import Recorder
', ""env = gym.make('CartPole-v0') # Create the environment"", ""directory = './video' # Directory for the recorded video"", 'env = Recorder(env, directory)
env.reset() # Reset environment

# Run environment
while True:
    action = env.action_space.sample() # Get a random action
    _, _, done, _ = env.step(action) # Take a step
    if done: break # Break if environment is done",1.3166067600250244,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.3197836875915527,notebook 7_4,5.0,"|-|Autoregressive|Variational Autoencoders|Generative Adversarial Networks|Flows|
|-|--------------|---|---|---|
|Objective|log-likelihood (stable)|doubly stochastic ELBO (stable)|approximate adversarial loss (unstable)|log-likelihood (stable)|
|Latent space|None|dimension collapsing|low dimensional|high-dimensional|
|Architecture|requires ordering, arbitrary data|arbitrary|arbitrary, continuous data|requires partitioning (NVP), continuous data|'

 
code:
'[]'",1.3216371536254883,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",1.3278915882110596,notebook 7_2,23.0,"markdown:
### 2. Application: Accurate Estimate of $\\log p_\\theta(\\mathbf{x})$ using Importance Sampling

The ELBO is a lower bound to the marginal log likelihood, however it is not guaranteed to be accurate. [Importance-sampling can be leveraged in VAEs](https://arxiv.org/abs/1509.00519) to provide a more accurate estimate of the marginal log-likelihood $\\log p_\\theta(\\mathbf{x})$ using multiple samples from $q_\\phi(\\mathbf{z}_1,\\dots,\\mathbf{z}_K | \\mathbf{x})$. With $K+1$ samples $q_\\phi(\\mathbf{z} | \\mathbf{x})$, the following inequality holds:

$$\\log p_\\theta(\\mathbf{x}) \\geq \\mathcal{L}_{K+1}(\\mathcal{x}) \\geq \\mathcal{L}_K(\\mathcal{x}) \\geq \\mathcal{L}(\\mathcal{x})$$

where

$$ \\mathcal{L}_{K}(\\mathcal{x}) := \\mathbb{E}_{q_\\phi(\\mathbf{z}_1,\\dots,\\mathbf{z}_K | \\mathbf{x})} \\left[ 
\\log \\frac{1}{K} \\sum_{k=1}^K \\frac{p_\\theta(\\mathbf{x}, \\mathbf{z}_k)}{q_\\phi(\\mathbf{z}_k | \\mathbf{x})} 
\\right]$$
'",1.3574566841125488,notebook 7_2,18.0,"**Answers**:

`[...]`

### Exercise 4. 

**Analyze the purpose of the KL-term and the $\\beta$ parameter.**

1. How does the KL-term, $\\mathcal{D}_{\\operatorname{KL}}\\left(q_\\phi(\\mathbf{z}|\\mathbf{x})\\ |\\ p(\\mathbf{z})\\right)$, work as a regulariser on the distributions over latent variables? *HINT*: When maximising the ELBO, the probability-distance measure is minimised $\\operatorname{KL} \\rightarrow 0$ so that $q(z|x) \\rightarrow p(z) = \\mathcal{N}(z|0,I)$ for all examples, x. At $\\operatorname{KL} = 0$ variations in x stops having an affect on the latent distribution and latent units are all described by the same distribution, $\\mathcal{N}(z|0,I)$, so they produce a noisy output without signal (i.e. $\\mathbf{z}=\\epsilon \\sim \\mathcal{N}(0,I)$) to the decoder.
2. Try removing the KL-term (using the $\\beta$ parameter) and analyze what happens during training, in the learning curves, latent representation and reconstructions compared to before removing it.
3. What does the loss reduces to? Explain how this can affect a VAE. *HINT*: Compare loss function for AE and VAE, and remember that we can use the pixel-wise binary crossentropy error as the loss in the AEs and for the reconstruction error, $\\log p_\\theta(\\mathbf{x}|\\mathbf{z}) = \\log \\mathcal{B}(\\mathbf{x} | g_\\theta(z))$, in VAEs.
4. Experiment with different $\\beta$ values (e.g. [0.1, 10, 50]) and explain how this affects the reconstruction quality and the latent representations. *HINT* what is the tradeoff between reconstruction error ($\\log p_\\theta(\\mathbf{x} | \\mathbf{z})$) and the KL term?

**Answers**:

`[...]`'

 
markdown:
## Optional exercises",1.3756675720214844,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
Describe the model given in the exercise notebook?,"The provided code defines a PyTorch neural network for a classification task with the following characteristics:

It has two layers: an input layer and a hidden layer.
The activation function used is Exponential Linear Unit (ELU).
The network is designed for a classification task with 10 output classes.
The number of hidden units in the hidden layer is 512.
The number of input features is determined based on the shape of the input data .
The forward method defines how data flows through the network by applying linear transformations followed by ELU activation.",notebook 3_3,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.1583905220031738,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",1.2206224203109741,notebook 5_1,6.0,"### II.a Language Modelling

*Figure: Left-to-right language models*
![Autoregressive left-to-right language model](images/ar-lm.png)

**Autoregressive factorization** Language models aim at grasping the underlying linguistic structure of a text fragment: whereas word vectors model words independently of each others, a language model tracks the grammatical and semantic relationships between word tokens. Given a piece of text encoded into tokens $\\mathbf{w}_{1:T} = [\\mathbf{w_1}, \\ldots, \\mathbf{w}_T]$ a *left-to-right* language model describes $\\mathbf{w}_{1:T}$ with the following factorization:
$$
 p_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t}) \\ ,
$$
where $\\theta$ is a model parameter. The above *autoregressive* factorization describes a *recursive* function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$, which is shared across all the time steps. In the above figure, we represent a left-to-right language model with dependencies represented by arrows for fixed steps $t=3$ and $t=4$. Because of this choice of factorization, a language model defines a graphical model where each step $t$ depends on all the previous steps $<t$ and the conditional $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ models the dependendies between the context $\\mathbf{w}_{<t}$ and the variable $\\mathbf{w}_t$.

**Other factorizations** Autoregressive models are not required to adopt a left-to-right factorization and other forms of factorizations can be implemented (right-to-left or arbitrary permutations). See [""XLNet: Generalized Autoregressive Pretraining for Language Understanding"", Yang et al. (2019)](https://arxiv.org/abs/1906.08237) for an example.'

 
markdown:
*Figure: Categorical distribution over the possible next tokens given the context*
![Categorical distribution](images/categorical-dist.png)",1.2933708429336548,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.3005681037902832,notebook 7_4,5.0,"|-|Autoregressive|Variational Autoencoders|Generative Adversarial Networks|Flows|
|-|--------------|---|---|---|
|Objective|log-likelihood (stable)|doubly stochastic ELBO (stable)|approximate adversarial loss (unstable)|log-likelihood (stable)|
|Latent space|None|dimension collapsing|low dimensional|high-dimensional|
|Architecture|requires ordering, arbitrary data|arbitrary|arbitrary, continuous data|requires partitioning (NVP), continuous data|'

 
code:
'[]'",1.3026669025421143,notebook 8_2_Prerequisites_ipynb,0.0,"markdown:
# Prerequisites

> By Jonas Busk ([jbusk@dtu.dk](mailto:jbusk@dtu.dk))

**2019 update:** Changes have been made to the display of environments due to the previous `viewer` being incompatible with newer versions of Gym.

**2022 update:** Rendering was disabled, and the notebook now uses the `colabgymrender` package to render a video.

In this lab we will create neural network reinforcement learning agents with [PyTorch](https://pytorch.org/) to navigate various environments from [OpenAI Gym](https://gym.openai.com/) developed by [OpenAI](https://openai.com/).

Please refer to the [docs](https://gym.openai.com/docs/) on how to get started with Gym. You are also encouraged to take a look at this short [post on the OpenAI blog](https://blog.openai.com/openai-gym-beta/).'

 
markdown:
## Installation

Below is a brief guide on how to install OpenAI Gym. For more details, please refer to the repository on [GitHub](https://github.com/openai/gym) and the [docs](https://gym.openai.com/docs).

You can do a minimal install of the packaged version of Gym directly from PyPI:

```
pip install gym
```

Or you can perform a minimal install from GitHub:

```
git clone https://github.com/openai/gym.git
cd gym
pip install -e .
```

If you run in Colab, you can do a quick pip install of Gym in the cell below:'

 
code:
!pip install gym[classic_control] > /dev/null 2>&1
!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1
!pip install colabgymrender > /dev/null 2>&1
!pip install imageio==2.4.1 > /dev/null 2>&1'

 
markdown:
You will also need an installation of `ffmpeg` locally. If you do not have it installed already, you can install it by one of the following commands depending on your system:

```sudo apt-get install ffmpeg``` (Linux)

```conda install -c conda-forge ffmpeg``` (Anaconda)'

 
markdown:
## Running an environment

Here is a bare minimum example of running a Gym environment. This creates an instance of the [CartPole-v0](https://gym.openai.com/envs/CartPole-v0) environment and runs until the rollout is done, taking random actions and rendering the environment at each step. With Gym installed, you should be able to see a small animation of the environment below.'

 
code:
import gym
from gym import wrappers
from colabgymrender.recorder import Recorder
', ""env = gym.make('CartPole-v0') # Create the environment"", ""directory = './video' # Directory for the recorded video"", 'env = Recorder(env, directory)
env.reset() # Reset environment

# Run environment
while True:
    action = env.action_space.sample() # Get a random action
    _, _, done, _ = env.step(action) # Take a step
    if done: break # Break if environment is done",1.320873737335205,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.334559679031372,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",1.3448928594589233,notebook 7_2,17.0,"# gather data for the full epoch
    for k, v in training_epoch_data.items():
        training_data[k] += [np.mean(training_epoch_data[k])]

    # Evaluate on a single batch, do not propagate gradients
    with torch.no_grad():
        vae.eval()
        
        # Just load a single batch from the test loader
        x, y = next(iter(test_loader))
        x = x.to(device)
        
        # perform a forward pass through the model and compute the ELBO
        loss, diagnostics, outputs = vi(vae, x)
        
        # gather data for the validation step
        for k, v in diagnostics.items():
            validation_data[k] += [v.mean().item()]
    
    # Reproduce the figure from the begining of the notebook, plot the training curves and show latent samples
    make_vae_plots(vae, x, y, outputs, training_data, validation_data)'

 
markdown:
# Analyzing the VAE

## Mandatory Exercises

### Exercise 1.

1. Implement the class `ReparameterizedDiagonalGaussian` (`log_prob()` and `rsample()`).
2. Import the class `Bernoulli`
3. Implement the class `VariationalInference` (computation of the `elbo` and `beta_elbo`).

### Exercise 2.

**Trainnig and Evaluating a VAE model**

1. Why do we use the reparameterization trick?
2. What available metric can you use to estimate the marginal likelihood ($p_\\theta(\\mathbf{x})$) ?
3. In the above plots, we display numerous model samples. If you had to pick one plot, which one would you pick to evaluate the quality of a VAE (i.e. using posterior samples $\\mathbf{z} \\sim q_\\phi(\\mathbf{z} | \\mathbf{x})$ or prior samples $\\mathbf{z} \\sim p(\\mathbf{z})$) ? Why?.
4. How could you exploit the VAE model for classification?

**Answers**:

`[...]`

### Exercise 3.

**Experiment with the VAE model.**

1. Experiment with the number of layers and activation functions in order to improve the reconstructions and latent representation. What solution did you find the best and why?
2. Try to increase the number of digit classes in the training set and analyze the learning curves, latent space and reconstructions. For which classes and why does the VAE fail in reconstructing?  *HINT: Try the combination: `classes=[0, 1, 4, 9]`, to see how well VAE can separate these digits in the latent representation and reconstructions.*
3. Increase the number of units in the latent layer. Does it increase the models representational power and how can you see and explain this? How does this affect the quality of the reconstructions?

**Answers**:

`[...]`

### Exercise 4. 

**Analyze the purpose of the KL-term and the $\\beta$ parameter.**",1.3560807704925537,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",1.360046148300171,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
"What is the initial assignment in exercise notebook 3.4-EXE-FFN-MNIST.ipynb, and what are the steps to execute it?","The first task is to use Kaiming He initialization instead of Xavier Glorot.
In order to implement this task:
We replace the Xavier initialization for self.W_1 and self.W_2 with init.kaiming_normal_, which initializes the weight matrices using the Kaiming He initialization method suitable for ReLU activation.
Code:
<code>",notebook 3_4,notebook 5_1,14.0,"# backward and optimize
            loss.backward()
            optimiser.step()
            step += 1
            pbar.update(1)

            # Report
            if step % 5 ==0 :
                loss = loss.detach().cpu()
                pbar.set_description(f""epoch={epoch}, step={step}, loss={loss:.1f}"")

            # save checkpoint
            if step % 50 ==0 :
                torch.save(rnn.state_dict(), checkpoint_file)
            if step >= num_steps:
                break
        epoch += 1'

 
code:
# sample the RNN language model
with torch.no_grad():
    sample = rnn.sample(num_steps=10, batch_size=10, temperature=0.5, prevent_repetitions=True)
    rich.print(glove_tokenizer.decode_batch(sample.detach().cpu().numpy()))'

 
code:
_ = rnn.cpu()
# free-up memory if needed: delete the RNN model
# del rnn'

 
markdown:
**Exercise 3**: What would happen if the inputs of the RNN were not shifted to the right (in sample in the RNNLM class)?  

> *Insert your answer here.*'

 
markdown:
___
## III. Attention mechanism and Transformers


The attention mechanism was first introduce in machine learning for machine translation tasks [(""Neural Machine Translation by Jointly Learning to Align and Translate"", Bahdanau et al. (2014))](https://arxiv.org/abs/1409.0473). Translation is a sequence-to-sequence problem which goal is to generate a translation of a source text. The attention mechanism was introduced to allow *attenting* the whole source text at any of the generation steps. We implement attention with the softmax function because it is a differential version of a hard zero-one attention.

In this section, we will introduce the *scaled dot-product* self-attention mechanism and the Transformer architecture [(""Attention is All You Need"", Wasrani et al. (2016))](https://arxiv.org/abs/1706.03762).

### III.a Attention mechanism

Attention has become a very important concept in deep learning beginning with [""Neural Machine Translation by Jointly Learning to Align and Translate"", Badanau et. al. (2015)](https://arxiv.org/abs/1409.0473). The idea key idea in that paper is that when you translate a sentence from for example German to English then it is a good is helpful for the model when it generates",1.1355102062225342,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.1825621128082275,notebook 8_2_Prerequisites_ipynb,0.0,"markdown:
# Prerequisites

> By Jonas Busk ([jbusk@dtu.dk](mailto:jbusk@dtu.dk))

**2019 update:** Changes have been made to the display of environments due to the previous `viewer` being incompatible with newer versions of Gym.

**2022 update:** Rendering was disabled, and the notebook now uses the `colabgymrender` package to render a video.

In this lab we will create neural network reinforcement learning agents with [PyTorch](https://pytorch.org/) to navigate various environments from [OpenAI Gym](https://gym.openai.com/) developed by [OpenAI](https://openai.com/).

Please refer to the [docs](https://gym.openai.com/docs/) on how to get started with Gym. You are also encouraged to take a look at this short [post on the OpenAI blog](https://blog.openai.com/openai-gym-beta/).'

 
markdown:
## Installation

Below is a brief guide on how to install OpenAI Gym. For more details, please refer to the repository on [GitHub](https://github.com/openai/gym) and the [docs](https://gym.openai.com/docs).

You can do a minimal install of the packaged version of Gym directly from PyPI:

```
pip install gym
```

Or you can perform a minimal install from GitHub:

```
git clone https://github.com/openai/gym.git
cd gym
pip install -e .
```

If you run in Colab, you can do a quick pip install of Gym in the cell below:'

 
code:
!pip install gym[classic_control] > /dev/null 2>&1
!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1
!pip install colabgymrender > /dev/null 2>&1
!pip install imageio==2.4.1 > /dev/null 2>&1'

 
markdown:
You will also need an installation of `ffmpeg` locally. If you do not have it installed already, you can install it by one of the following commands depending on your system:

```sudo apt-get install ffmpeg``` (Linux)

```conda install -c conda-forge ffmpeg``` (Anaconda)'

 
markdown:
## Running an environment

Here is a bare minimum example of running a Gym environment. This creates an instance of the [CartPole-v0](https://gym.openai.com/envs/CartPole-v0) environment and runs until the rollout is done, taking random actions and rendering the environment at each step. With Gym installed, you should be able to see a small animation of the environment below.'

 
code:
import gym
from gym import wrappers
from colabgymrender.recorder import Recorder
', ""env = gym.make('CartPole-v0') # Create the environment"", ""directory = './video' # Directory for the recorded video"", 'env = Recorder(env, directory)
env.reset() # Reset environment

# Run environment
while True:
    action = env.action_space.sample() # Get a random action
    _, _, done, _ = env.step(action) # Take a step
    if done: break # Break if environment is done",1.1895430088043213,notebook 7_3,6.0,"code:
for epoch in range(num_epochs):    
    for x, y in train_loader:
        batch_size = x.size(0)
        # True data is given label 1, while fake data is given label 0
        true_label = torch.ones(batch_size, 1).to(device)
        fake_label = torch.zeros(batch_size, 1).to(device)

        x_true = Variable(x).to(device)
        y = Variable(y).to(device)
        
        # Create random noise
        z = torch.randn(batch_size, latent_dim, 1, 1)
        z = Variable(z, requires_grad=False).to(device)
        
        # --- Define you training here ---'",1.1983760595321655,notebook 3_1,0.0,"markdown:
# Credits

This is heavily based on https://github.com/pytorch/tutorials'

 
markdown:
# What is PyTorch?

> **NOTE** In the last part of this lab cuda is used. If you have a cuda enabled machine, read the README.md in the root of this repo on how to use nvidia-docker.


It’s a Python based scientific computing package targeted at two sets of
audiences:
-  A replacement for numpy to use the power of GPUs
-  a deep learning research platform that provides maximum flexibility
   and speed'

 
markdown:
# Getting Started

In this lab you will get a quick start on what pytorch is and how to use it.

## 1. Tensors

Tensors are similar to numpy’s ndarrays, with the addition being that
Tensors can also be used on a GPU to accelerate computing.'

 
code:
['import torch'

 
markdown:
Construct a 5x3 matrix, uninitialized'

 
code:
x = torch.Tensor(5, 3)
print(x)'

 
markdown:
Construct a randomly initialized matrix'

 
code:
x = torch.rand(5, 3)
print(x)'

 
markdown:
['Get its size'

 
code:
print(x.size())'

 
markdown:
**NOTE**: `torch.Size` is in fact a tuple, so it supports the same operations that a tuple supports.'

 
code:
x[1:3] = 2
print(x)'

 
markdown:
# Assignment

Make use of the pytorch docs <http://pytorch.org/docs/torch>
1. Make a tensor of size (2, 17)
2. Make a torch.FloatTensor of size (3, 1)
3. Make a torch.LongTensor of size (5, 2, 1)
  - fill the entire tensor with 7s
4. Make a torch.ByteTensor of size (5,)
  - fill the middle 3 indices with ones such that it records [0, 1, 1, 1, 0]'

 
markdown:
## 2. Operations', ""There are multiple syntaxes for operations. Let's see addition as an example:"", '
### 2.1 Addition: syntax 1'

 
code:
y = torch.rand(5, 3)
print(x + y)'

 
markdown:
### 2.2 Addition: syntax 2'

 
code:
print(torch.add(x, y))'

 
markdown:
### 2.3 Addition: giving an output tensor'

 
code:
result = torch.Tensor(5, 3)
torch.add(x, y, out=result)
print(result)'

 
markdown:
### 2.4 Addition: in-place

adds `x`to `y`'

 
code:
y.add_(x)
print(y)'

 
markdown:
**NOTE**: Any operation that mutates a tensor in-place is post-fixed with an `_`. For example: `x.copy_(y)`, `x.t_()`, will change `x`.'

 
markdown:
You can use standard numpy-like indexing with all bells and whistles!'

 
code:
print(x[:, 1])'",1.2155723571777344,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",1.2398912906646729,notebook 4_2,1.0,"print(""\Test data"")
print(""Number of points:"", len(test_set))
x, y = next(iter(test_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(test_set.targets))} (unique labels: {set(test_set.targets)})"")

n_classes = len(set(test_set.targets))'

 
markdown:
### Show example images

Run multiple times to see different examples.'

 
code:
# Get random training images and show them.
images, labels = next(iter(train_loader))
show_image(torchvision.utils.make_grid(images))'

 
markdown:
## Define a convolutional neural network


**Assignment 1:** Define a convolutional neural network. 
You may use the code from previous notebooks.
We suggest that you start with a small network, and make sure that everything is working.
Once you can train successfully, come back and improve the architecture.'

 
code:
class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.num_classes = num_classes
        # Your code here!

    def forward(self, x):
        # Your code here!
        return x


model = Model(n_classes)', ""device = torch.device('cpu')  # use cuda or cpu"", 'model.to(device)
print(model)'

 
markdown:
## Define a loss function and optimizer

**Assignment 2:** Define the loss function and optimizer.
You might need to experiment a bit with the learning rate.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network

**Assignment 3:** Finish the training loop below. 
Start by using a small number of epochs (e.g. 2).
Even with a low number of epochs you should be able to see results that are better than chance.
When everything is working increase the number of epochs to find out how good your network really is.'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 32, 32, device=device))
print(""Output shape:"", out.size())
print(f""Output logits:\{out.detach().cpu().numpy()}"")
print(f""Output probabilities:\{out.softmax(1).detach().cpu().numpy()}"")'

 
code:
batch_size = 64
num_epochs = 2
validation_every_steps = 500

step = 0
model.train()",1.2412991523742676,notebook 7_1,2.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",1.253252625465393,notebook 8_5_Deep,2.0,"replay_memory = ReplayMemory(replay_memory_capacity)

# prefill replay memory with random actions
if prefill_memory:', ""    print('prefill replay memory')"", '    s = env.reset()
    while replay_memory.count() < replay_memory_capacity:
        a = env.action_space.sample()
        s1, r, d, _ = env.step(a)
        replay_memory.add(s, a, r, s1, d)
        s = s1 if not d else env.reset()
        
# training loop
try:', ""    print('start training')"", '    epsilon = 1.0
    rewards, lengths, losses, epsilons = [], [], [], []
    for i in range(num_episodes):
        # init new episode
        s, ep_reward, ep_loss = env.reset(), 0, 0
        for j in range(episode_limit):
            # select action with epsilon-greedy strategy
            if np.random.rand() < epsilon:
                a = env.action_space.sample()
            else:
                with torch.no_grad():
                    a = policy_dqn(torch.from_numpy(one_hot([s], n_inputs)).float()).argmax().item()
            # perform action
            s1, r, d, _ = env.step(a)
            # store experience in replay memory
            replay_memory.add(s, a, r, s1, d)
            # batch update
            if replay_memory.count() >= batch_size:
                # sample batch from replay memory
                batch = np.array(replay_memory.sample(batch_size), dtype=int)
                ss, aa, rr, ss1, dd = batch[:,0], batch[:,1], batch[:,2], batch[:,3], batch[:,4]
                # do forward pass of batch
                policy_dqn.optimizer.zero_grad()
                Q = policy_dqn(torch.from_numpy(one_hot(ss, n_inputs)).float())
                # use target network to compute target Q-values
                with torch.no_grad():
                    # TODO: use target net
                    Q1 = target_dqn(torch.from_numpy(one_hot(ss1, n_inputs)).float())
                # compute target for each sampled experience
                q_targets = Q.clone()
                for k in range(batch_size):
                    q_targets[k, aa[k]] = rr[k] + gamma * Q1[k].max().item() * (not dd[k])
                # update network weights
                loss = policy_dqn.loss(Q, q_targets)
                loss.backward()
                policy_dqn.optimizer.step()
                # update target network parameters from policy network parameters
                target_dqn.update_params(policy_dqn.state_dict(), tau)
            else:
                loss = 0
            # bookkeeping
            s = s1
            ep_reward += r
            ep_loss += loss.item()
            if d: break
        # bookkeeping
        epsilon *= num_episodes/(i/(num_episodes/20)+num_episodes) # decrease epsilon
        epsilons.append(epsilon); rewards.append(ep_reward); lengths.append(j+1); losses.append(ep_loss)', ""        if (i+1) % val_freq == 0: print('%5d mean training reward: %5.2f' % (i+1, np.mean(rewards[-val_freq:])))"", ""    print('done')"", 'except KeyboardInterrupt:', ""    print('interrupt')""]'",1.2539074420928955,notebook 7_1,4.0,"train_loss.append(np.mean(batch_loss))

    # Evaluate, do not propagate gradients
    with torch.no_grad():
        net.eval()
        
        # Just load a single batch from the test loader
        x, y = next(iter(test_loader))
        
        if cuda:
            x = x.cuda()
        
        outputs = net(x)

        # We save the latent variable and reconstruction for later use
        # we will need them on the CPU to plot', ""        x_hat = outputs['x_hat']"", ""        z = outputs['z'].cpu().numpy()"", '
        loss = loss_function(x_hat, x)

        valid_loss.append(loss.item())
    
    if epoch == 0:
        continue

    # live plotting of the trainig curves and representation
    plot_autoencoder_stats(x=x,
                           x_hat=x_hat,
                           z=z,
                           y=y,
                           train_loss=train_loss,
                           valid_loss=valid_loss,
                           epoch=epoch,
                           classes=classes,
                           dimensionality_reduction_op=None)
    
   '

 
markdown:
'# Assignments'

 
markdown:
## Assignment 1 - Analyzing the AE
1. The above implementation of an AE is very simple.
    - Experiment with the number of layers and try different non-linearities in order to improve the reconstructions
    - What happens with the network when we change the non-linearities in the latent layer (e.g. sigmoid)?
    - Try to increase the number of digit classes in the training set and analyze the results
    - Test different optimization algorithms such as ADAM and RMSProp and decide whether you should use regularizers
       
2. Currently we optimize w.r.t. mean squared error. 
    - Find another error function that could fit this problem better
    - Evaluate whether the similarity function $d$ is a better choice and explain your findings

3. Complexity of the bottleneck.
    - Increase the number of units in the latent layer and train
    - Visualize by using [PCA](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) or [t-SNE](http://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html)'

 
markdown:
## Assignment 2 - Adding classification for semi-supervised learning

The above training has been performed unsupervised. Now let us assume that we only have a fraction of labeled data points from each class. As we know, semi-supervised learning can be utilized by combining unsupervised and supervised learning. Now you must analyze whether a trained AE from the above exercise can aid a classifier.

1. Build a simple classifier (like the ones from week1) where you:
    - Train on the labeled dataset and evaluate the results
2. Build a second classifier and train on the latent output $\\mathbf{z}$ of the AE.
3. Build a third classifier and train on the reconstructions of the AE.
4. Evaluate the classifiers against each other and implement a model that improves the classification by combining the input, latent output, and reconstruction.

Below we provide some starting code for using only a subset of the labelled data.'",1.2594951391220093,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
What do we expect to learn from week4?,"In this lab, we will learn how to create your own convolutional classifier for different datasets, and the technologies to improve the performance of your convolutional classifier. ","notebook 4_1, notebook 4_2",CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",1.2425429821014404,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",1.414595365524292,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.4655908346176147,notebook 5_2,20.0,"# Plot training and validation loss
epoch = np.arange(len(training_loss))
plt.figure()', ""plt.plot(epoch, training_loss, 'r', label='Training loss',)"", ""plt.plot(epoch, validation_loss, 'b', label='Validation loss')"", 'plt.legend()', ""plt.xlabel('Epoch'), plt.ylabel('NLL')"", 'plt.show()'

 
markdown:
# Exercise k) Compare PyTorch and Nanograd implementations

Compare the two implementations (in terms of predictive performance, training speed, etc.). Are they similar? How do they differ?


Try to play around with the choice of hyper-parameters, optimizer, and hidden dimensions. How much can you improve the negative log-likelihood by these simple changes?'

 
markdown:
## Exercise l) Other RNN cells (optional)

Aside from the LSTM cell, various other RNN cells exist. The gated recurrent unit (GRU) is a variation of the LSTM cell that uses less gating mechanisms. Try to look it up in the [PyTorch documentation](https://pytorch.org/docs/stable/nn.html#gru) and switch out the LSTM cell in the code above. What do you notice in terms of performance and convergence speed?'

 
markdown:
## Exercise m) More complex tasks (optional)

Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between a vanilla RNN and LSTM (implemented in e.g. PyTorch) when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",1.4961528778076172,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.5241541862487793,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",1.545224666595459,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",1.5480366945266724,notebook 8_3,5.0,"*Hint: See introdution notebook.*

**Answer:**

*Answer here...*

### Exercise 3

*In the training output, you will sometimes observe the validation reward starts out lower than the training reward but as training progresses they cross over and the validation reward becomes higher than the training reward. How can you explain this behavior?*

*Hint: Do we use the policy network in the same way during training and validation?*

**Answer:**

*Answer here...*

### Exercise 4

*How does the policy gradient method we have used address the exploration-exploitation dilemma?*

*Hint: See the introduction notebook about exploration-exploitation.*

**Answer:**

*Answer here...*

### Exercise 5 [optional]

Extend the code above to reduce variance of the gradient estimator by computing and subtracting the baseline estimate. 

*Hint: You need to sample a batch of rollouts (now we sample just one) for each update in order to compute the baseline, $b_t$.*'",1.562852144241333,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.5636523962020874,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",1.5719521045684814,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
What is CIFAR-10 dataset?,The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes.,notebook 4_2,notebook 4_2,0.0,"markdown:
# CNN on CIFAR-10

In this notebook you need to put what you have learned into practice, and create your own convolutional classifier for the CIFAR-10 dataset.

The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes. See examples below.

![cifar10](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/cifar10.png?raw=1)'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import make_grid
from sklearn import metrics

sns.set_style(""whitegrid"")

def accuracy(target, pred):
    return metrics.accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def compute_confusion_matrix(target, pred, normalize=None):
    return metrics.confusion_matrix(
        target.detach().cpu().numpy(), 
        pred.detach().cpu().numpy(),
        normalize=normalize
    )

def show_image(img):
    img = img.detach().cpu()
    img = img / 2 + 0.5   # unnormalize
    with sns.axes_style(""white""):
        plt.figure(figsize=(8, 8))
        plt.imshow(img.permute((1, 2, 0)).numpy())', ""        plt.axis('off')"", '        plt.show()'

 
code:
# The output of torchvision datasets are PIL images in the range [0, 1]. 
# We transform them to PyTorch tensors and rescale them to be in the range [-1, 1].
transform = transforms.Compose(
    [transforms.ToTensor(),
     transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),  # subtract 0.5 and divide by 0.5
    ]
)

batch_size = 64  # both for training and testing

# Load datasets', ""train_set = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)"", ""test_set = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)"", 'train_loader = DataLoader(train_set, batch_size=batch_size, shuffle=True, num_workers=0, drop_last=False)
test_loader = DataLoader(test_set, batch_size=batch_size, shuffle=False, num_workers=0, drop_last=True)

# Map from class index to class name.
classes = {index: name for name, index in train_set.class_to_idx.items()}'

 
code:
print(""Training data"")
print(""Number of points:"", len(train_set))
x, y = next(iter(train_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(train_set.targets))} (unique labels: {set(train_set.targets)})"")",1.3258328437805176,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",1.367081880569458,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",1.3961189985275269,notebook 7_4,5.0,"|-|Autoregressive|Variational Autoencoders|Generative Adversarial Networks|Flows|
|-|--------------|---|---|---|
|Objective|log-likelihood (stable)|doubly stochastic ELBO (stable)|approximate adversarial loss (unstable)|log-likelihood (stable)|
|Latent space|None|dimension collapsing|low dimensional|high-dimensional|
|Architecture|requires ordering, arbitrary data|arbitrary|arbitrary, continuous data|requires partitioning (NVP), continuous data|'

 
code:
'[]'",1.4419760704040527,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.4427666664123535,notebook 4_3,0.0,"markdown:
# Transfer learning on the Caltech101 dataset

In this notebook, we will consider a more complex dataset than MNIST or CIFAR10. The images in Caltech101 are RGB images (3 channels) with variable size. There are 101 different classes. We will try a very common practice in computer vision nowadays: transfer learning from a pre-trained ImageNet model. 

Roadmap:
- Modify the network from the previous exercise (CIFAR-10) to work with 224x224 images.
- Train the model for a while on Caltech101 and see how far we can get.
- Take a ResNet34 that was pre-trained on ImageNet-1k and fine-tune it to Caltech101.
  - Consider both training only the head (the linear classifier at the end of the network) or the entire network.
  - We should be able to reach better performance than our original network in fewer training steps.
- Optional: play around with other pre-trained models from `timm` (see info [here](https://github.com/rwightman/pytorch-image-models)).'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
from typing import List, Optional, Callable, Iterator
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torchvision import transforms
from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, Dataset, Subset

sns.set_style(""whitegrid"")

!pip install timm
import timm

def accuracy(target, pred):
    return accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def show_image(img, title=None):
    img = img.detach().cpu()
    img = img.permute((1, 2, 0)).numpy()
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    img = std * img + mean   # unnormalize
    img = np.clip(img, 0, 1)
    plt.imshow(img)
    plt.gca().tick_params(axis=""both"", which=""both"", bottom=False, left=False, labelbottom=False, labelleft=False)
    if title is not None:
        plt.title(title)'

 
markdown:
### Set up dataset'

 
code:
imagenet_mean = [0.485, 0.456, 0.406]
imagenet_std = [0.229, 0.224, 0.225]
default_imagenet_normalization = transforms.Normalize(mean=imagenet_mean, std=imagenet_std)
train_transform = transforms.Compose([
    transforms.RandomResizedCrop(224, scale=(0.25, 1)),  # crop of random size and aspect ratio, resize to square
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    default_imagenet_normalization,
])
test_transform = transforms.Compose([
    transforms.Resize(224),  # keep aspect ratio
    transforms.CenterCrop(224),  # square crop
    transforms.ToTensor(),
    default_imagenet_normalization,
])",1.450893521308899,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.490457534790039,notebook 4_1,0.0,"markdown:
# Convolutional neural networks 101

Convolution neural networks are one of the most successful types of neural networks for image recognition and an integral part of reigniting the interest in neural networks. They are able to extract structural relations in the data, such as spatial in images or temporal in time series.

In this lab, we will experiment with inserting 2D-convolution layers in the fully connected neural networks introduced previously. We will also try to visualize the learned convolution filters and try to understand what kind of features they learn to recognize.
', ""If you have not watched Jason Yosinski's [video on visualizing convolutional networks](https://www.youtube.com/watch?v=AgkfIQ4IGaM), you definitely should do so now. If you are unfamiliar with the convolution operation, [Vincent Dumoulin](https://github.com/vdumoulin/conv_arithmetic) has a nice visualization of different convolution variants. For a more in-depth tutorial, please see http://cs231n.github.io/convolutional-networks/ or http://neuralnetworksanddeeplearning.com/chap6.html.""]'

 
markdown:
## Reminder: what are convolutional networks?

Standard ConvNets are, in many respects, very similar to the dense feedforward networks we saw previously:
 * The network is still organized into layers.
 * Each layer is parameterized by weights and biases.
 * Each layer has an element-wise non-linear transformation (activation function).
 * There are no cycles in the connections (more on this in later labs).

*So what is the difference?*
The networks we saw previously are called *dense* because each unit receives input from all the units in the previous layer. This is not the case for ConvNets. In ConvNets each unit is only connected to a small subset of the input units. This is called the *receptive field* of the unit.

#### Example
The input (green matrix) is a tensor of size `1x5x5` -- i.e. it has one ""channel"" (like a grayscale image), and the feature map has size `5x5`. Let us define a `1x3x3` kernel (yellow submatrix). The kernel weights are indicated in red at the bottom right of each element. The computation can be thought of as an elementwise multiplication followed by a sum. Here we use a *stride* of 1, as shown in this animation:

<img src=""https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/convolutions.gif"" style=""width: 400px;""/>

GIF courtesy of [Stanford](http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution)

After having convolved the image, we perform an elementwise non-linear transformation on the *convolved features*.
In this example, the input is a 2D *feature map* with depth 1.'

 
markdown:
# Assignment 1

### Assignment 1.1: Manual calculations

Perform the following computation, and write the result below.

![](https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/conv_exe.png)",1.4976545572280884,notebook 7_1,4.0,"train_loss.append(np.mean(batch_loss))

    # Evaluate, do not propagate gradients
    with torch.no_grad():
        net.eval()
        
        # Just load a single batch from the test loader
        x, y = next(iter(test_loader))
        
        if cuda:
            x = x.cuda()
        
        outputs = net(x)

        # We save the latent variable and reconstruction for later use
        # we will need them on the CPU to plot', ""        x_hat = outputs['x_hat']"", ""        z = outputs['z'].cpu().numpy()"", '
        loss = loss_function(x_hat, x)

        valid_loss.append(loss.item())
    
    if epoch == 0:
        continue

    # live plotting of the trainig curves and representation
    plot_autoencoder_stats(x=x,
                           x_hat=x_hat,
                           z=z,
                           y=y,
                           train_loss=train_loss,
                           valid_loss=valid_loss,
                           epoch=epoch,
                           classes=classes,
                           dimensionality_reduction_op=None)
    
   '

 
markdown:
'# Assignments'

 
markdown:
## Assignment 1 - Analyzing the AE
1. The above implementation of an AE is very simple.
    - Experiment with the number of layers and try different non-linearities in order to improve the reconstructions
    - What happens with the network when we change the non-linearities in the latent layer (e.g. sigmoid)?
    - Try to increase the number of digit classes in the training set and analyze the results
    - Test different optimization algorithms such as ADAM and RMSProp and decide whether you should use regularizers
       
2. Currently we optimize w.r.t. mean squared error. 
    - Find another error function that could fit this problem better
    - Evaluate whether the similarity function $d$ is a better choice and explain your findings

3. Complexity of the bottleneck.
    - Increase the number of units in the latent layer and train
    - Visualize by using [PCA](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) or [t-SNE](http://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html)'

 
markdown:
## Assignment 2 - Adding classification for semi-supervised learning

The above training has been performed unsupervised. Now let us assume that we only have a fraction of labeled data points from each class. As we know, semi-supervised learning can be utilized by combining unsupervised and supervised learning. Now you must analyze whether a trained AE from the above exercise can aid a classifier.

1. Build a simple classifier (like the ones from week1) where you:
    - Train on the labeled dataset and evaluate the results
2. Build a second classifier and train on the latent output $\\mathbf{z}$ of the AE.
3. Build a third classifier and train on the reconstructions of the AE.
4. Evaluate the classifiers against each other and implement a model that improves the classification by combining the input, latent output, and reconstruction.

Below we provide some starting code for using only a subset of the labelled data.'",1.5298104286193848,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",1.5431816577911377,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What are convolutional neural networks?,"The standard ConvNets are organised into layers. Each layer is parameterized by weights and biases. Each layer has an element-wise activation function, and there are no cycles in the connections. In ConvNets, each unit is only connected to a small subset of the input units, which is called the receptive field of the unit. ",notebook 4_1,notebook 4_1,0.0,"markdown:
# Convolutional neural networks 101

Convolution neural networks are one of the most successful types of neural networks for image recognition and an integral part of reigniting the interest in neural networks. They are able to extract structural relations in the data, such as spatial in images or temporal in time series.

In this lab, we will experiment with inserting 2D-convolution layers in the fully connected neural networks introduced previously. We will also try to visualize the learned convolution filters and try to understand what kind of features they learn to recognize.
', ""If you have not watched Jason Yosinski's [video on visualizing convolutional networks](https://www.youtube.com/watch?v=AgkfIQ4IGaM), you definitely should do so now. If you are unfamiliar with the convolution operation, [Vincent Dumoulin](https://github.com/vdumoulin/conv_arithmetic) has a nice visualization of different convolution variants. For a more in-depth tutorial, please see http://cs231n.github.io/convolutional-networks/ or http://neuralnetworksanddeeplearning.com/chap6.html.""]'

 
markdown:
## Reminder: what are convolutional networks?

Standard ConvNets are, in many respects, very similar to the dense feedforward networks we saw previously:
 * The network is still organized into layers.
 * Each layer is parameterized by weights and biases.
 * Each layer has an element-wise non-linear transformation (activation function).
 * There are no cycles in the connections (more on this in later labs).

*So what is the difference?*
The networks we saw previously are called *dense* because each unit receives input from all the units in the previous layer. This is not the case for ConvNets. In ConvNets each unit is only connected to a small subset of the input units. This is called the *receptive field* of the unit.

#### Example
The input (green matrix) is a tensor of size `1x5x5` -- i.e. it has one ""channel"" (like a grayscale image), and the feature map has size `5x5`. Let us define a `1x3x3` kernel (yellow submatrix). The kernel weights are indicated in red at the bottom right of each element. The computation can be thought of as an elementwise multiplication followed by a sum. Here we use a *stride* of 1, as shown in this animation:

<img src=""https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/convolutions.gif"" style=""width: 400px;""/>

GIF courtesy of [Stanford](http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution)

After having convolved the image, we perform an elementwise non-linear transformation on the *convolved features*.
In this example, the input is a 2D *feature map* with depth 1.'

 
markdown:
# Assignment 1

### Assignment 1.1: Manual calculations

Perform the following computation, and write the result below.

![](https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/conv_exe.png)",0.7063499689102173,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.9622450470924377,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.9858070611953735,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.030553936958313,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",1.099048376083374,notebook 7_4,5.0,"|-|Autoregressive|Variational Autoencoders|Generative Adversarial Networks|Flows|
|-|--------------|---|---|---|
|Objective|log-likelihood (stable)|doubly stochastic ELBO (stable)|approximate adversarial loss (unstable)|log-likelihood (stable)|
|Latent space|None|dimension collapsing|low dimensional|high-dimensional|
|Architecture|requires ordering, arbitrary data|arbitrary|arbitrary, continuous data|requires partitioning (NVP), continuous data|'

 
code:
'[]'",1.1000698804855347,notebook 5_3,5.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN'

 
markdown:
We will implement the forward pass, backward pass, optimization and training loop for an RNN in numpy so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch and appreciate how convenient the implementation becomes!'

 
markdown:
Let's first define the necessary model parameters. Recall that an $n \\times m$ weight matrix maps $\\mathbb{R}^{m} \\rightarrow \\mathbb{R}^{n}$.""]'

 
code:
hidden_size = 50 # Number of dimensions in the hidden state
vocab_size  = len(word_to_idx) # Size of the vocabulary used",1.1119517087936401,notebook 4_1,4.0,"predictions = output.max(1)[1]

        # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy_score(targets, predictions) * len(inputs))

    test_accuracy = np.sum(test_accuracies) / len(x_test)
    print(f""Validation accuracy: {valid_accuracies[-1]:.3f}"")
    print(f""Test accuracy: {test_accuracy:.3f}"")
    
    model.train()'

 
markdown:
### Assignment 2

1. Note the performance of the standard feedforward neural network. Add a [2D convolution layer](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html) before the first layer. Insert the utility module `PrintSize` to check the size of the tensor at any point in `Sequential`, and notice that the size of the image reduces after the convolution. This can cause loss of information, and can be avoided by using adequate padding in the convolutional layer.
  Does adding a convolutional layer increase the generalization performance of the network (try num_filters=32 and filter_size=5 as a starting point)?
  
2. Can the performance be increases even further by stacking more convolution layers?

3. We now have a deeper network than the initial simple feedforward network. What happens if we replace all convolutional layers with linear layers? Is this deep feedforward network performing as well as the convolutional one?
 
4. Max-pooling is a technique for decreasing the spatial resolution of an image while retaining the important features. Effectively this gives a local translational invariance and reduces the computation by a factor of four. In the classification algorithm which is usually desirable. You can either: 
 
   - add a maxpool layer (see the PyTorch docs, and try with kernel_size=2 and stride=2) after the convolution layer, or
   - add stride=2 to the arguments of the convolution layer directly.
     
  Verify that this decreases the spatial dimension of the image (insert a `PrintSize` module in the `Sequential`). Does this increase the performance of the network? Note that, to increase performance, you may need to stack multiple layers, increase the number of filters, or tune the learning rate.

5. Dropout is a very useful technique for preventing overfitting. Try to add a DropoutLayer after some of the convolution layers. You may observe a higher validation accuracy but lower train accuracy. Can you explain why this might be the case?
 
6. Batch normalization may help convergence in larger networks as well as generalization performance. Try to insert batch normalization layers into the network.'

 
markdown:
Again, if you didn't already, you really should [watch this video](https://www.youtube.com/watch?v=AgkfIQ4IGaM).""]'",1.1276614665985107,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.1357169151306152,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",1.143755316734314,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0
Can you provide some suggestions to improve the model’s performance?,"Tell us something like increase the depth of the network, modify the convolutional layer parameters(number of filters, filter sizes and strides), pooling layers, batch normalization,  change the learning rate, dropout or weight regularization.",notebook 4_2,notebook 3_3,6.0,"markdown:
# Assignments

1. A linear logistic classifier is only able to create a linear decision boundary. Change the Logistic classifier into a (nonlinear) Neural network by inserting a dense hidden layer between the input and output layers of the model
 
2. Experiment with multiple hidden layers or more / less hidden units. What happens to the decision boundary?
 
3. Overfitting: When increasing the number of hidden layers / units, the neural network will fit the training data better by creating a highly nonlinear decision boundary. If the model is too complex it will often generalize poorly to new data (validation and test set). Can you observe this from the training and validation errors? 
 
4. We used the vanilla stochastic gradient descent algorithm for parameter updates. This usually converges slowly and more sophisticated pseudo-second-order methods usually work better. Try changing the optimizer to [adam or momentum](http://pytorch.org/docs/master/optim.html#torch.optim.Adam)'

 
markdown:
When you're done, continue to the next part of this lab.""]'

 
code:
'[]'",0.905705451965332,notebook 4_3,5.0,"num_trainable_model_parameters = 0
    for p in model.parameters():
        if p.requires_grad:
            num_trainable_model_parameters += p.numel()

    return model, {
        ""num_model_parameters"": num_model_parameters,
        ""num_trainable_model_parameters"": num_trainable_model_parameters,
    }
', ""model, data = initialize_model('resnet34d', num_classes=len(np.unique(labels)), finetune_entire_model=False)"", '
print(model)
print(""Number of model parameters:"", data[""num_model_parameters""])
print(""Number of trainable parameters:"", data[""num_trainable_model_parameters""])
', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)'

 
markdown:
**Assignment 3:** 

1. Train the linear classifier on top of the pre-trained network, and observe how quickly you can get pretty good results, compared to training a smaller network from scratch as above.

2. Go back and change argument to finetune entire network, maybe adjust learning rate, see if you can get better performance than before and if you run into any issues.

3. Optional: experiment with `timm`: try smaller or larger models, including state-of-the-art models, e.g. based on vision transformers (ViT) or MLP-Mixers.

4. Briefly describe what you did and any experiments you did along the way as well as what results you obtained.
Did anything surprise you during the exercise?

5. Write down key lessons/insights you got during this exercise.'

 
code:
'[]'",1.0555729866027832,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.1652464866638184,notebook 7_2,17.0,"# gather data for the full epoch
    for k, v in training_epoch_data.items():
        training_data[k] += [np.mean(training_epoch_data[k])]

    # Evaluate on a single batch, do not propagate gradients
    with torch.no_grad():
        vae.eval()
        
        # Just load a single batch from the test loader
        x, y = next(iter(test_loader))
        x = x.to(device)
        
        # perform a forward pass through the model and compute the ELBO
        loss, diagnostics, outputs = vi(vae, x)
        
        # gather data for the validation step
        for k, v in diagnostics.items():
            validation_data[k] += [v.mean().item()]
    
    # Reproduce the figure from the begining of the notebook, plot the training curves and show latent samples
    make_vae_plots(vae, x, y, outputs, training_data, validation_data)'

 
markdown:
# Analyzing the VAE

## Mandatory Exercises

### Exercise 1.

1. Implement the class `ReparameterizedDiagonalGaussian` (`log_prob()` and `rsample()`).
2. Import the class `Bernoulli`
3. Implement the class `VariationalInference` (computation of the `elbo` and `beta_elbo`).

### Exercise 2.

**Trainnig and Evaluating a VAE model**

1. Why do we use the reparameterization trick?
2. What available metric can you use to estimate the marginal likelihood ($p_\\theta(\\mathbf{x})$) ?
3. In the above plots, we display numerous model samples. If you had to pick one plot, which one would you pick to evaluate the quality of a VAE (i.e. using posterior samples $\\mathbf{z} \\sim q_\\phi(\\mathbf{z} | \\mathbf{x})$ or prior samples $\\mathbf{z} \\sim p(\\mathbf{z})$) ? Why?.
4. How could you exploit the VAE model for classification?

**Answers**:

`[...]`

### Exercise 3.

**Experiment with the VAE model.**

1. Experiment with the number of layers and activation functions in order to improve the reconstructions and latent representation. What solution did you find the best and why?
2. Try to increase the number of digit classes in the training set and analyze the learning curves, latent space and reconstructions. For which classes and why does the VAE fail in reconstructing?  *HINT: Try the combination: `classes=[0, 1, 4, 9]`, to see how well VAE can separate these digits in the latent representation and reconstructions.*
3. Increase the number of units in the latent layer. Does it increase the models representational power and how can you see and explain this? How does this affect the quality of the reconstructions?

**Answers**:

`[...]`

### Exercise 4. 

**Analyze the purpose of the KL-term and the $\\beta$ parameter.**",1.1889910697937012,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'",1.2087455987930298,notebook 4_3,0.0,"markdown:
# Transfer learning on the Caltech101 dataset

In this notebook, we will consider a more complex dataset than MNIST or CIFAR10. The images in Caltech101 are RGB images (3 channels) with variable size. There are 101 different classes. We will try a very common practice in computer vision nowadays: transfer learning from a pre-trained ImageNet model. 

Roadmap:
- Modify the network from the previous exercise (CIFAR-10) to work with 224x224 images.
- Train the model for a while on Caltech101 and see how far we can get.
- Take a ResNet34 that was pre-trained on ImageNet-1k and fine-tune it to Caltech101.
  - Consider both training only the head (the linear classifier at the end of the network) or the entire network.
  - We should be able to reach better performance than our original network in fewer training steps.
- Optional: play around with other pre-trained models from `timm` (see info [here](https://github.com/rwightman/pytorch-image-models)).'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
from typing import List, Optional, Callable, Iterator
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torchvision import transforms
from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, Dataset, Subset

sns.set_style(""whitegrid"")

!pip install timm
import timm

def accuracy(target, pred):
    return accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def show_image(img, title=None):
    img = img.detach().cpu()
    img = img.permute((1, 2, 0)).numpy()
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    img = std * img + mean   # unnormalize
    img = np.clip(img, 0, 1)
    plt.imshow(img)
    plt.gca().tick_params(axis=""both"", which=""both"", bottom=False, left=False, labelbottom=False, labelleft=False)
    if title is not None:
        plt.title(title)'

 
markdown:
### Set up dataset'

 
code:
imagenet_mean = [0.485, 0.456, 0.406]
imagenet_std = [0.229, 0.224, 0.225]
default_imagenet_normalization = transforms.Normalize(mean=imagenet_mean, std=imagenet_std)
train_transform = transforms.Compose([
    transforms.RandomResizedCrop(224, scale=(0.25, 1)),  # crop of random size and aspect ratio, resize to square
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    default_imagenet_normalization,
])
test_transform = transforms.Compose([
    transforms.Resize(224),  # keep aspect ratio
    transforms.CenterCrop(224),  # square crop
    transforms.ToTensor(),
    default_imagenet_normalization,
])",1.2117842435836792,notebook 4_2,2.0,"code:
batch_size = 64
num_epochs = 2
validation_every_steps = 500

step = 0
model.train()

train_accuracies = []
valid_accuracies = []
        
for epoch in range(num_epochs):
    
    train_accuracies_batches = []
    
    for inputs, targets in train_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        
        # Forward pass, compute gradients, perform one training step.
        # Your code here!
        
        # Increment step counter
        step += 1
        
        # Compute accuracy.
        predictions = output.max(1)[1]
        train_accuracies_batches.append(accuracy(targets, predictions))
        
        if step % validation_every_steps == 0:
            
            # Append average training accuracy to list.
            train_accuracies.append(np.mean(train_accuracies_batches))
            
            train_accuracies_batches = []
        
            # Compute accuracies on validation set.
            valid_accuracies_batches = []
            with torch.no_grad():
                model.eval()
                for inputs, targets in test_loader:
                    inputs, targets = inputs.to(device), targets.to(device)
                    output = model(inputs)
                    loss = loss_fn(output, targets)

                    predictions = output.max(1)[1]

                    # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=False).
                    valid_accuracies_batches.append(accuracy(targets, predictions) * len(inputs))

                model.train()
                
            # Append average validation accuracy to list.
            valid_accuracies.append(np.sum(valid_accuracies_batches) / len(test_set))
     
            print(f""Step {step:<5}   training accuracy: {train_accuracies[-1]}"")
            print(f""             test accuracy: {valid_accuracies[-1]}"")

print(""Finished training."")'

 
markdown:
## Test the network

Now we show a batch of test images and generate a table below with the true and predicted class for each of these images.'

 
code:
inputs, targets = next(iter(test_loader))
inputs, targets = inputs.to(device), targets.to(device)
show_image(make_grid(inputs))
plt.show()

outputs = model(inputs)
_, predicted = torch.max(outputs.data, 1)

print(""    TRUE        PREDICTED"")
print(""-----------------------------"")
for target, pred in zip(targets, predicted):
    print(f""{classes[target.item()]:^13} {classes[pred.item()]:^13}"")'

 
markdown:
We now evaluate the network as above, but on the entire test set.'

 
code:
# Evaluate test set
confusion_matrix = np.zeros((n_classes, n_classes))
with torch.no_grad():
    model.eval()
    test_accuracies = []
    for inputs, targets in test_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        output = model(inputs)
        loss = loss_fn(output, targets)

        predictions = output.max(1)[1]

        # Multiply by len(inputs) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy(targets, predictions) * len(inputs))
        
        confusion_matrix += compute_confusion_matrix(targets, predictions)

    test_accuracy = np.sum(test_accuracies) / len(test_set)
    
    model.train()'",1.2160577774047852,notebook 4_1,4.0,"predictions = output.max(1)[1]

        # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy_score(targets, predictions) * len(inputs))

    test_accuracy = np.sum(test_accuracies) / len(x_test)
    print(f""Validation accuracy: {valid_accuracies[-1]:.3f}"")
    print(f""Test accuracy: {test_accuracy:.3f}"")
    
    model.train()'

 
markdown:
### Assignment 2

1. Note the performance of the standard feedforward neural network. Add a [2D convolution layer](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html) before the first layer. Insert the utility module `PrintSize` to check the size of the tensor at any point in `Sequential`, and notice that the size of the image reduces after the convolution. This can cause loss of information, and can be avoided by using adequate padding in the convolutional layer.
  Does adding a convolutional layer increase the generalization performance of the network (try num_filters=32 and filter_size=5 as a starting point)?
  
2. Can the performance be increases even further by stacking more convolution layers?

3. We now have a deeper network than the initial simple feedforward network. What happens if we replace all convolutional layers with linear layers? Is this deep feedforward network performing as well as the convolutional one?
 
4. Max-pooling is a technique for decreasing the spatial resolution of an image while retaining the important features. Effectively this gives a local translational invariance and reduces the computation by a factor of four. In the classification algorithm which is usually desirable. You can either: 
 
   - add a maxpool layer (see the PyTorch docs, and try with kernel_size=2 and stride=2) after the convolution layer, or
   - add stride=2 to the arguments of the convolution layer directly.
     
  Verify that this decreases the spatial dimension of the image (insert a `PrintSize` module in the `Sequential`). Does this increase the performance of the network? Note that, to increase performance, you may need to stack multiple layers, increase the number of filters, or tune the learning rate.

5. Dropout is a very useful technique for preventing overfitting. Try to add a DropoutLayer after some of the convolution layers. You may observe a higher validation accuracy but lower train accuracy. Can you explain why this might be the case?
 
6. Batch normalization may help convergence in larger networks as well as generalization performance. Try to insert batch normalization layers into the network.'

 
markdown:
Again, if you didn't already, you really should [watch this video](https://www.youtube.com/watch?v=AgkfIQ4IGaM).""]'",1.2176542282104492,notebook 5_2,20.0,"# Plot training and validation loss
epoch = np.arange(len(training_loss))
plt.figure()', ""plt.plot(epoch, training_loss, 'r', label='Training loss',)"", ""plt.plot(epoch, validation_loss, 'b', label='Validation loss')"", 'plt.legend()', ""plt.xlabel('Epoch'), plt.ylabel('NLL')"", 'plt.show()'

 
markdown:
# Exercise k) Compare PyTorch and Nanograd implementations

Compare the two implementations (in terms of predictive performance, training speed, etc.). Are they similar? How do they differ?


Try to play around with the choice of hyper-parameters, optimizer, and hidden dimensions. How much can you improve the negative log-likelihood by these simple changes?'

 
markdown:
## Exercise l) Other RNN cells (optional)

Aside from the LSTM cell, various other RNN cells exist. The gated recurrent unit (GRU) is a variation of the LSTM cell that uses less gating mechanisms. Try to look it up in the [PyTorch documentation](https://pytorch.org/docs/stable/nn.html#gru) and switch out the LSTM cell in the code above. What do you notice in terms of performance and convergence speed?'

 
markdown:
## Exercise m) More complex tasks (optional)

Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between a vanilla RNN and LSTM (implemented in e.g. PyTorch) when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",1.2320284843444824,notebook 7_1,4.0,"train_loss.append(np.mean(batch_loss))

    # Evaluate, do not propagate gradients
    with torch.no_grad():
        net.eval()
        
        # Just load a single batch from the test loader
        x, y = next(iter(test_loader))
        
        if cuda:
            x = x.cuda()
        
        outputs = net(x)

        # We save the latent variable and reconstruction for later use
        # we will need them on the CPU to plot', ""        x_hat = outputs['x_hat']"", ""        z = outputs['z'].cpu().numpy()"", '
        loss = loss_function(x_hat, x)

        valid_loss.append(loss.item())
    
    if epoch == 0:
        continue

    # live plotting of the trainig curves and representation
    plot_autoencoder_stats(x=x,
                           x_hat=x_hat,
                           z=z,
                           y=y,
                           train_loss=train_loss,
                           valid_loss=valid_loss,
                           epoch=epoch,
                           classes=classes,
                           dimensionality_reduction_op=None)
    
   '

 
markdown:
'# Assignments'

 
markdown:
## Assignment 1 - Analyzing the AE
1. The above implementation of an AE is very simple.
    - Experiment with the number of layers and try different non-linearities in order to improve the reconstructions
    - What happens with the network when we change the non-linearities in the latent layer (e.g. sigmoid)?
    - Try to increase the number of digit classes in the training set and analyze the results
    - Test different optimization algorithms such as ADAM and RMSProp and decide whether you should use regularizers
       
2. Currently we optimize w.r.t. mean squared error. 
    - Find another error function that could fit this problem better
    - Evaluate whether the similarity function $d$ is a better choice and explain your findings

3. Complexity of the bottleneck.
    - Increase the number of units in the latent layer and train
    - Visualize by using [PCA](http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) or [t-SNE](http://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html)'

 
markdown:
## Assignment 2 - Adding classification for semi-supervised learning

The above training has been performed unsupervised. Now let us assume that we only have a fraction of labeled data points from each class. As we know, semi-supervised learning can be utilized by combining unsupervised and supervised learning. Now you must analyze whether a trained AE from the above exercise can aid a classifier.

1. Build a simple classifier (like the ones from week1) where you:
    - Train on the labeled dataset and evaluate the results
2. Build a second classifier and train on the latent output $\\mathbf{z}$ of the AE.
3. Build a third classifier and train on the reconstructions of the AE.
4. Evaluate the classifiers against each other and implement a model that improves the classification by combining the input, latent output, and reconstruction.

Below we provide some starting code for using only a subset of the labelled data.'",1.2342677116394043,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0
What do RNN and LSTM stand for?,RNN stands for Reccurent Neural Network and LSTM stands for Long Short-Term Memory (unit).,notebook 5_1,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.8651162981987,notebook 5_3,5.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN'

 
markdown:
We will implement the forward pass, backward pass, optimization and training loop for an RNN in numpy so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch and appreciate how convenient the implementation becomes!'

 
markdown:
Let's first define the necessary model parameters. Recall that an $n \\times m$ weight matrix maps $\\mathbb{R}^{m} \\rightarrow \\mathbb{R}^{n}$.""]'

 
code:
hidden_size = 50 # Number of dimensions in the hidden state
vocab_size  = len(word_to_idx) # Size of the vocabulary used",0.8961846828460693,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",0.9204062819480896,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",0.934319257736206,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",0.9547405242919922,notebook 5_1,10.0,"**Long Short-Term Memory (LSTM) networks** A standard RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the [Long Short-Term Memory (LSTM, Hochreiter and Schmidhuber. (1997))](https://dl.acm.org/doi/10.1162/neco.1997.9.8.1735) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. RNNs coupled with gated mechanisms are less prone to the problem of vanishing gradients, and can therefore model dependencies over longer number of steps.'

 
markdown:
*Figure: bi-directional recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"" (left-to-right), and the information flowing from the context ""fast"" (right-to-left).*
![Recurrent Neural Network](images/bidirectional-lm-activated.png)

**Bi-directional recurrent neural networks** Using two RNNs running in reverse direction allows building bidirectional language models. The distribution $p_\\theta(\\mathbf{x}_t \\mid \\mathbf{x}_{-t})$ can be parameterized as
$$
p_\\theta( \\cdot \\mid \\mathbf{x}_{-t}) = \\mathrm{Softmax}((\\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t) F^T) \\ ,
$$
where the hidden state  $\\mathbf{h}^\\mathrm{bi}_t = \\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t$ defines hidden state contextualized on all the tokens but $\\mathbf{w}_t$. 

This is the strategy adopted by [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), which popularized learning deep contextualized representations as a pre-training step, and at the samd time, started a [tradition of naming models after Seame Street characters](https://www.theverge.com/2019/12/11/20993407/ai-language-models-muppets-sesame-street-muppetware-elmo-bert-ernie).'

 
markdown:
**Experiment: train your own LSTM language model**
', ""> **NB:**  *training on CPU is very slow. If you don't have access to a GPU, it will be difficult to train a model that generate acceptable samples. In the end of the notebook, we will use pre-trained models directly, so feel free to skip this experiment.* **You still need to implement the loss in the training loop.**""]'

 
code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences",0.9836896061897278,notebook 5_3,25.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",0.9853038787841797,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",1.1044734716415405,notebook 5_2,20.0,"# Plot training and validation loss
epoch = np.arange(len(training_loss))
plt.figure()', ""plt.plot(epoch, training_loss, 'r', label='Training loss',)"", ""plt.plot(epoch, validation_loss, 'b', label='Validation loss')"", 'plt.legend()', ""plt.xlabel('Epoch'), plt.ylabel('NLL')"", 'plt.show()'

 
markdown:
# Exercise k) Compare PyTorch and Nanograd implementations

Compare the two implementations (in terms of predictive performance, training speed, etc.). Are they similar? How do they differ?


Try to play around with the choice of hyper-parameters, optimizer, and hidden dimensions. How much can you improve the negative log-likelihood by these simple changes?'

 
markdown:
## Exercise l) Other RNN cells (optional)

Aside from the LSTM cell, various other RNN cells exist. The gated recurrent unit (GRU) is a variation of the LSTM cell that uses less gating mechanisms. Try to look it up in the [PyTorch documentation](https://pytorch.org/docs/stable/nn.html#gru) and switch out the LSTM cell in the code above. What do you notice in terms of performance and convergence speed?'

 
markdown:
## Exercise m) More complex tasks (optional)

Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between a vanilla RNN and LSTM (implemented in e.g. PyTorch) when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",1.1330362558364868,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",1.194079875946045,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0
How can I give text as input to my network?,"Before text can be used as input for a neural network, it needs to be represented as a vector. This can be done by tokenizing the text, and then looking up the embedding vector for each token. Tokenization transforms characters, words, or parts of words into tokens, which can be numbers.",notebook 5_1,notebook 5_3,4.0,"markdown:
When working with more complex data than what we use in this exercise, creating a PyTorch `DataLoader` on top of the dataset can be beneficial. A data loader is basically a fancy generator/iterator that we can use to abstract away all of the data handling and pre-processing + it's super useful for processing batches of data as well! Data loaders will come in handy later when you start to work on your projects, so be sure to check them out!"", '
For more information on how to use datasets and data loaders in PyTorch, [consult the official guide](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html).'

 
markdown:
## One-hot encodings'

 
markdown:
We now create a simple function that returns the one-hot encoded representation of a given index of a word in our vocabulary. Notice that the shape of the one-hot encoding is equal to the entire vocabulary (which can be huge!). Additionally, we define a function to automatically one-hot encode a sentence.'

 
code:
def one_hot_encode(idx, vocab_size):
    """"""
    One-hot encodes a single word given its index and the size of the vocabulary.
    
    Args:
     `idx`: the index of the given word
     `vocab_size`: the size of the vocabulary
    
    Returns a 1-D numpy array of length `vocab_size`.
    """"""
    # Initialize the encoded array
    one_hot = np.zeros(vocab_size)
    
    # Set the appropriate element to one
    one_hot[idx] = 1.0

    return one_hot


def one_hot_encode_sequence(sequence, vocab_size):
    """"""
    One-hot encodes a sequence of words given a fixed vocabulary size.
    
    Args:
     `sentence`: a list of words to encode
     `vocab_size`: the size of the vocabulary
     
    Returns a 3-D numpy array of shape (num words, vocab size, 1).
    """"""
    # Encode each word in the sentence
    encoding = np.array([one_hot_encode(word_to_idx[word], vocab_size) for word in sequence])

    # Reshape encoding s.t. it has shape (num words, vocab size, 1)
    encoding = encoding.reshape(encoding.shape[0], encoding.shape[1], 1)
    
    return encoding

', ""test_word = one_hot_encode(word_to_idx['a'], vocab_size)"", ""print(f'Our one-hot encoding of \\'a\\' has shape {test_word.shape}.')"", '', ""test_sentence = one_hot_encode_sequence(['a
b'], vocab_size)"", ""print(f'Our one-hot encoding of \\'a b\\' has shape {test_sentence.shape}.')""]'

 
markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___",1.3475571870803833,notebook 5_2,16.0,"def forward_step(self, input: Sequence[Var], input_hid: Sequence[Var], input_c: Sequence[Var]) -> Sequence[Var]:
        hids = []
        cs = []
        concatenated_input = []
        for val in input_hid:
          concatenated_input.append(val)
        for val in input:
          concatenated_input.append(val)

        # Insert code here

        return hids, cs
    
    def forward_sequence(self, input: Sequence[Sequence[Var]], use_stored_hid = False) -> Sequence[Sequence[Var]]:
        out = []
        if use_stored_hid:
            hid = self.stored_hid
            c = self.stored_c
        else:
            hid = self.initial_hid
            c = self.initial_c
        # Takes a sequence and loops over each character in the sequence. Note that each character has dimenson equal to the embeddng dimenson
        for i in range(len(input)):
            hid, c = # insert code here
            out.append(hid)
        self.stored_hid = hid
        self.stored_c = c
        return out'

 
markdown:
Here is a bit of code to test it out:'

 
code:
NN = [
    LSTMLayer(1, 5, lambda x: x.tanh()),
    DenseLayer(5, 1, lambda x: x.identity())
]

print(NN[0])
x_train =[[[Var(1.0)], [Var(2.0)], [Var(3.0)]],
          [[Var(1.0)], [Var(2.0)], [Var(3.0)]]]

output_train = forward_batch(x_train, NN)          
output_train[0][0][0].backward()

print(output_train)'

 
markdown:
## Exercise i) LSTM training

Complete the LSTM training loop

Run the training loop. Training time in Nanograd will likely be long, but see if you can find settings to compare your LSTM learning curve (NLL and number of epochs) to the vanilla RNN from earlier. Do you observe any improvements? Motivate your answer.

Finally, below we will implement LSTM in PyTorch. You will notice it is much, much faster!'

 
code:
# Initialize training hyperparameters
EPOCHS = 
LR = 
LR_DECAY = '

 
code:
NN = [
    LSTMLayer(4, 1, lambda x: x.tanh()),
    DenseLayer(1, 4, lambda x: x.identity())
]

train_loss = []
val_loss = []

batch_size = 8

for e in range(EPOCHS):
    for b in range(int(np.ceil(len(encoded_training_set_x)/batch_size))):
        # Forward pass and loss computation
        Loss =
        # Backward pass
        Loss.backward()
        
        # gradient descent update
        update_parameters(parameters(NN), LR)
        zero_gradients(parameters(NN))
      
    LR = LR * LR_DECAY",1.3724582195281982,notebook 5_2,14.0,"code:
def freestyle(NN, sentence='', num_generate=10):"", '    """"""
    Takes in a sentence as a string and outputs a sequence
    based on the predictions of the RNN.
    
    Args:
     `params`: the parameters of the network
     `sentence`: string with whitespace-separated tokens
     `num_generate`: the number of tokens to generate
    """"""', ""    sentence = sentence.split(' ')"", '    output_sentence = sentence
    sentence_one_hot = one_hot_encode_sequence(sentence, vocab_size)

    # Begin predicting
    outputs = forward_batch([sentence_one_hot], NN, use_stored_hid=False)
    output_words = [idx_to_word[np.argmax(output)] for output in Var_to_nparray(outputs[0])]
    word = output_words[-1]

    # Append first prediction
    output_sentence.append(word)

    # Forward pass - Insert code here!', ""    if word != 'EOS':"", '      for i in range(num_generate-1):
          sentence_one_hot = 
          outputs = 
          output_words = 
          word = 
          output_sentence.append(word)', ""          if word == 'EOS':"", '              break
          
    return output_sentence


# Perform freestyle (extrapolation)', ""test_examples = ['a a b
a a a a b
a a a a a a b
a
r n n']"", 'for i, test_example in enumerate(test_examples):', ""    print(f'Example {i}:', test_example)"", ""    print('Predicted sequence:', freestyle(NN, sentence=test_example), end='\\')""]'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell
', ""Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$",1.4085559844970703,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.4131860733032227,notebook 5_1,29.0,"markdown:
**Exercise 11**: Test your prompt [with GPT-3](https://beta.openai.com/playground)

> *Insert your prompt and the GPT-3 completion here*
'

 
markdown:

**More prompt-based learning** Large language models can answer complex questions. In [""Can large language models reason about medical questions? Liévin et al. (2022)""](https://arxiv.org/abs/2207.08143), we observed that GPT-3 can in many cases solve complex medical problems which require 1) reading and understaing the provided medical cases, 2) retrieving expert knowledge (implicitely stored in the weights) and 3) detail a multi-step reasoning to reach a conclusion. Multi-step reasoning can be triggered using zero-shot chain-of-thought prompting ([""Large Language Models are Zero-Shot Reasoners"", Kojima et al. (2022)](https://arxiv.org/abs/2205.11916)), which boils down to prompting a language model with ""*Let\'s think step by step*"". 

You can experiment with an example of chain-of-thought prompt using [this template](https://beta.openai.com/playground/p/ka3F37wLN57m62YkYjvyDx0N?model=text-davinci-002).'

 
markdown:
### V.c Language Translation
', ""**Experiment** Let's use the `Pipeline` object to translate French to English in one line of code:""]'

 
code:
fr_en_translator = transformers.pipeline(""translation_fr_to_en"", model=""Helsinki-NLP/opus-mt-fr-en"")
output = fr_en_translator([""Mon cheval est très rapide"", ""Omelette du fromage""])
rich.print(output)
# del fr_en_translator'

 
markdown:
### V.d Information Retrieval

BERT allows converting pieces of text (sentences, paragraphs or even documents) into vectors. [DPR (""Dense Passage Retrieval for Open-Domain Question Answering"", Karpukhin et al. (2020))](https://arxiv.org/abs/2004.04906) is a BERT model fine-tuned for the task of information retrieval. DPR converts documents and questions into vectors fixed-size vectors which can be compared via inner product. It is then possible to index large collections of documents (Wikipedia) efficiently using maximum inner product search libraries like [`faiss`](https://faiss.ai).

**Experiment** Let\'s implement a simple search engine using a pre-trained DPR. In the same vein as the previous experiments, we define each document as a short factual sentences ""*`<city>` is the capital city of `<country>`*"". The questions are set to ""*What is the capital city of `<country>`?*"".'

 
code:
model_id = ""facebook/dpr-ctx_encoder-single-nq-base""
tokenizer = transformers.AutoTokenizer.from_pretrained(model_id)
model = transformers.AutoModel.from_pretrained(model_id).eval()'

 
code:
# Define some documents and questions
documents = [f""{city} is the capital of {country}"" for city, country in zip(keys_cities_labels, keys_labels)]
questions =  [f""What is the capital city of {country}?"" for country in keys_cities_labels]",1.4173427820205688,notebook 5_3,8.0,"markdown:
### Implement the forward pass'

 
markdown:
Now that we have all the definitions in place, we can start to implement a forward pass.'

 
code:
def forward_pass(inputs, hidden_state, params):
    """"""
    Computes the forward pass of a vanilla RNN.
    
    Args:
     `inputs`: sequence of inputs to be processed
     `hidden_state`: an already initialized hidden state
     `params`: the parameters of the RNN
    """"""
    # First we unpack our parameters
    U, V, W, b_hidden, b_out = params
    
    # Create a list to store outputs and hidden states
    outputs, hidden_states = [], []
    
    # For each element in input sequence
    for t in range(len(inputs)):

        # Compute new hidden state
        # YOUR CODE HERE!
        hidden_state = 

        # Compute output
        # YOUR CODE HERE!
        out = 
        
        # Save results and continue
        outputs.append(out)
        hidden_states.append(hidden_state.copy())
    
    return outputs, hidden_states


# Get first sequence in training set
test_input_sequence, test_target_sequence = training_set[0]

# One-hot encode input and target sequence
test_input = one_hot_encode_sequence(test_input_sequence, vocab_size)
test_target = one_hot_encode_sequence(test_target_sequence, vocab_size)

# Initialize hidden state as zeros
hidden_state = np.zeros((hidden_size, 1))
', ""# Now let's try out our new function"", 'outputs, hidden_states = forward_pass(test_input, hidden_state, params)
', ""print('Input sequence:')"", 'print(test_input_sequence)
', ""print('\Target sequence:')"", 'print(test_target_sequence)
', ""print('\Predicted sequence:')"", 'print([idx_to_word[np.argmax(output)] for output in outputs])'

 
markdown:
## Exercise C:'

 
markdown:
Implement the forward pass in the code above. Use $\\tanh{x}$ as the non-linear activation function $f$. You can use `np.dot()` to compute dot products. Refer to the equations and the figure if you're in doubt.""]'

 
markdown:
## Backward pass'

 
markdown:
It's now time to implement the backward pass. This can be a bit tricky so it may be helpful to take another look at the RNN equations, figure and your forward pass implementation. Note that (depending on your implementation) you may sometimes need to transpose using `np.transpose()` or simply `.T`.""]'

 
markdown:
## Exercise D:'

 
markdown:
Implement the missing code in the backward pass code given below using a cross-entropy loss and $\\tanh{x}$ as non-linear activation function $f$.

To complete the implementation, we need to compute the partial derivatives
$
\\frac{\\partial E}{\\partial W},~\\frac{\\partial E}{\\partial U},~\\frac{\\partial E}{\\partial V}
$. 
We repeat the definition of the RNN forward pass from above:",1.4221361875534058,notebook 5_2,6.0,"def init_bias(self, n_out):
    return [Var(self.bias) for _ in range(n_out)]'

 
markdown:
## One-hot encodings'

 
markdown:
We now create a simple function that returns the one-hot encoded representation of a given index of a word in our vocabulary. Notice that the shape of the one-hot encoding is equal to the entire vocabulary (which can be huge!). Additionally, we define a function to automatically one-hot encode a sentence.'

 
code:
def one_hot_encode(idx, vocab_size):
    """"""
    One-hot encodes a single word given its index and the size of the vocabulary.
    
    Args:
     `idx`: the index of the given word
     `vocab_size`: the size of the vocabulary
    
    Returns a 1-D numpy array of length `vocab_size`.
    """"""
    # Initialize the encoded array
    one_hot = np.array([np.zeros(vocab_size)])
    
    # Set the appropriate element to one
    one_hot[0][idx] = 1.0
    return nparray_to_Var(one_hot)


def one_hot_encode_sequence(sequence, vocab_size):
    """"""
    One-hot encodes a sequence of words given a fixed vocabulary size.
    
    Args:
     `sentence`: a list of words to encode
     `vocab_size`: the size of the vocabulary
     
    Returns a 3-D numpy array of shape (num words, vocab size, 1).
    """"""
    # Encode each word in the sentence
    encoding = np.array([Var_to_nparray(one_hot_encode(word_to_idx[word], vocab_size)) for word in sequence])

    # Reshape encoding s.t. it has shape (num words, vocab size, 1)
    encoding = encoding.reshape(encoding.shape[0], encoding.shape[2], 1)
    return nparray_to_Var(encoding)
', ""test_word = one_hot_encode(word_to_idx['a'], vocab_size)"", ""print(f'Our one-hot encoding of \\'a\\' has shape {Var_to_nparray(test_word).shape}.')"", '', ""test_sentence = one_hot_encode_sequence(['a
b'], vocab_size)"", ""print(f'Our one-hot encoding of \\'a b\\' has shape {Var_to_nparray(test_sentence).shape}.')"", '
print(test_word)
print(test_sentence)'

 
code:
encoded_training_set_x = []
encoded_training_set_y = []
encoded_validation_set_x = []
encoded_validation_set_y = []
encoded_test_set_x = []
encoded_test_set_y = []

for n in range(len(training_set)):
  encoded_training_set_x.append(one_hot_encode_sequence(training_set[n][0], vocab_size))
  encoded_training_set_y.append(one_hot_encode_sequence(training_set[n][1], vocab_size))
for n in range(len(validation_set)):
  encoded_validation_set_x.append(one_hot_encode_sequence(validation_set[n][0], vocab_size))
  encoded_validation_set_y.append(one_hot_encode_sequence(validation_set[n][1], vocab_size))
for n in range(len(test_set)):
  encoded_test_set_x.append(one_hot_encode_sequence(test_set[n][0], vocab_size))
  encoded_test_set_y.append(one_hot_encode_sequence(test_set[n][1], vocab_size))'

 
markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'",1.4461853504180908,notebook 5_3,13.0,"# Plot training and validation loss
epoch = np.arange(len(training_loss))
plt.figure()', ""plt.plot(epoch, training_loss, 'r', label='Training loss',)"", ""plt.plot(epoch, validation_loss, 'b', label='Validation loss')"", 'plt.legend()', ""plt.xlabel('Epoch'), plt.ylabel('NLL')"", 'plt.show()'

 
markdown:
## Exercise E:'

 
markdown:
Complete the training loop above and run the training. You can leave the hyper-parameters and network size unchanged.

A correct implementation should yield a loss of around **1** (using mean CE) or around **4** (using sum CE) after 1000 epochs. Does it work? If not, try to identify the issue -- perhaps something in the backward pass is not right?'

 
markdown:
## Extrapolation'

 
markdown:
Now that we have trained an RNN, it's time to put it to test. We will provide the network with a starting sentence and let it `freestyle` from there!""]'

 
code:
def freestyle(params, sentence='', num_generate=10):"", '    """"""
    Takes in a sentence as a string and outputs a sequence
    based on the predictions of the RNN.
    
    Args:
     `params`: the parameters of the network
     `sentence`: string with whitespace-separated tokens
     `num_generate`: the number of tokens to generate
    """"""', ""    sentence = sentence.split(' ')"", '    
    sentence_one_hot = one_hot_encode_sequence(sentence, vocab_size)
    
    # Initialize hidden state as zeros
    hidden_state = np.zeros((hidden_size, 1))

    # Generate hidden state for sentence
    outputs, hidden_states = forward_pass(sentence_one_hot, hidden_state, params)
    
    # Output sentence
    output_sentence = sentence
    
    # Append first prediction
    word = idx_to_word[np.argmax(outputs[-1])]    
    output_sentence.append(word)
    
    # Forward pass
    for i in range(num_generate):

        # Get the latest prediction and latest hidden state
        output = outputs[-1]
        hidden_state = hidden_states[-1]
    
        # Reshape our output to match the input shape of our forward pass
        output = output.reshape(1, output.shape[0], output.shape[1])
    
        # Forward pass
        outputs, hidden_states = forward_pass(output, hidden_state, params)
        
        # Compute the index of the most likely word and look up the corresponding word
        word = idx_to_word[np.argmax(outputs)]
        
        output_sentence.append(word)
        ', ""        if word == 'EOS':"", '            break
        
    return output_sentence


# Perform freestyle (extrapolation)', ""test_examples = ['a a b
a a a a b
a a a a a a b
a
r n n']"", 'for i, test_example in enumerate(test_examples):', ""    print(f'Example {i}:', test_example)"", ""    print('Predicted sequence:', freestyle(params, sentence=test_example), end='\\')""]'

 
markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'",1.447474479675293,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",1.4758803844451904,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",1.4830923080444336,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0
What variables are used in the attention function?,"The attention mechanism is defined using the query Q, the keys K, the values V, and the scaling parameter tau.",notebook 5_1,notebook 5_1,21.0,"# visualized the log of the attention map
plot_attention_map(attention_map.log(), tokens, tokens)'

 
markdown:
**Exercise 7**: Comment on the structure of the attention map. Why is that the case?

> *Insert your answer here*'

 
markdown:
### IV.b Masked attention

The self-attention layer allows computing the hidden state $\\mathbf{h}_{t}$ based on all the input vectors $\\mathbf{w}_{1:T}$. In language modelling, we want to enforce constrains on the dependencies of $\\mathbf{h}_t$ to allow left-to-right or masked factorizations. A attention mask $\\mathbf{M} \\in \\{0, -\\infty \\}^{T \\times T}$ is of the same dimension as the matrix $ \\mathbf{Q} \\mathbf{K}^T$ and can be utilized to enforce the attention weights $\\mathbf{\\lambda}_1, \\ldots, \\mathbf{{\\lambda}_T}$ to be zero wherever it is necessary. The masked attention mechanism is expressed as
$$
\\mathrm{Attention} \\left(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}, \\mathbf{M} \\right) = \\mathrm{Softmax}\\left( \\mathbf{M} + \\frac{\\mathbf{Q} \\mathbf{K}^T}{\\tau} \\right) \\mathbf{V} \\ .
$$'

 
markdown:
**Exercise 8**:  Let's implement an attention mask corresponding to:"", '1. Left-to-right language model $p(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$
1. bidirection language model $p(\\mathbf{w}_t \\mid \\mathbf{w}_{-t})$
1. right-to-left language model $p(\\mathbf{w}_t \\mid \\mathbf{w}_{t>})$

> Answer in the code below.

**NB** In the visualization bellow, we re-use the gradient map extracted from the left-to-right RNN language model.'

 
code:
def masked_attention(Q, K, V, tau=None, mask=None):
    """"""A simple masked attention layer""""""
    if tau is None:
        tau = math.sqrt(float(Q.shape[-1]))
    assert Q.shape[-1] == K.shape[-1]
    assert K.shape[0] == V.shape[0]
    attention_map = Q @ K.T / tau
    if mask is not None:
        attention_map = mask + attention_map
    attention_weights = attention_map.softmax(dim=1)
    return torch.einsum(""qk, kh -> qh"", attention_weights, V), attention_weights

# get a more natural sentence
sentence = ""Masked attention allows implementing dependency constrains between inputs and outputs.""
token_ids = torch.tensor(glove_tokenizer.encode(sentence).ids)
tokens = [glove_vocabulary[x] for x in token_ids]
vectors = embeddings(token_ids)",1.0263800621032715,notebook 5_1,25.0,"**Multi-head attention** The attention mechanism introduced in the previous section depends on a softmax of inner-products, which might be sparse depending on the value of the vectors, in that case, the layer can only attend to a few positions in the sequence. To enable attending to more positions in the input sentence, multiple attention mechanism can be used in parallel. This is what we call a multi-head attention layer:
$$
\\begin{align}
\\mathrm{MultiHeadAttention} \\left(\\mathbf{Q}^{1:P}, \\mathbf{K^{1:P}}, \\mathbf{V}^{1:P}, \\mathbf{M} \\right) = [ \\mathrm{Attention} \\left(\\mathbf{Q}^{1}, \\mathbf{K^{1}}, \\mathbf{V}^{1}, \\mathbf{P} \\right), 
\\ldots
\\mathrm{Attention} \\left(\\mathbf{Q}^{P}, \\mathbf{K^{P}}, \\mathbf{V}^{P}, \\mathbf{M} \\right)] \\ ,
\\end{align}
$$
where each set of vectors $\\mathbf{Q}^{i}, \\mathbf{Q}^{i}, \\mathbf{Q}^{i}$ corresponding to the head index $i$ is obtained using a separate linear transformation of the input sequence.

**Feed-forward** The multi-head attention layer allows looking up multiple positions of the input sequence, but the output is only a linear combination of the value vector $\\mathbf{V}$. A multi-layer neural network (feed-forward layer) is applied **element-wise** to each element of the sequence of hidden states to allow modelling more complex non-linear dependencies.

**Add & Norm** A Transformer is a deep neural network, and therefore might be difficult to optimize. Similarly deep neural networks in the image processing field, Transformer layer rely on two stabilizing components:
1. [Residual connections](https://arxiv.org/abs/1512.03385) allow to bypass the attention layer as well as the feed-forward layer.
2. [Layer normalization](https://arxiv.org/abs/1607.06450): allow enforcing that the output of a Transformer layer has values that are properly distributed

**Implementation:** Here is an implementation for the attention and multi-head attention. You can also check the official [PyTorch implementation](https://pytorch.org/docs/stable/_modules/torch/nn/modules/activation.html#MultiheadAttention).'

 
code:
def attention(query, key, value, mask=None, dropout=None):
    ""Compute \'Scaled Dot Product Attention\'""
    d_k = query.size(-1)
    scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)
    if mask is not None:
        scores = scores.masked_fill(mask == 0, -math.inf)
    p_attn = F.softmax(scores, dim = -1)
    if dropout is not None:
        p_attn = dropout(p_attn)
    return torch.matmul(p_attn, value), p_attn'",1.1775339841842651,notebook 5_1,16.0,"The above expresson is equivalent to applying attention to each query vector $\\mathbf{q}$ separately. The output for each vector $\\mathbf{q}$ depends on the vector of weights $\\mathbf{\\Lambda} = \\mathrm{Softmax}\\left( \\frac{\\mathbf{q} \\mathbf{K}^T}{\\tau} \\right)$ with values $[\\lambda_1, \\ldots \\lambda_{T_{\\mathbf{K}\\mathbf{V}}}]$. The vector of weights $\\Lambda$ is a function of the inner-product $\\mathbf{q} \\mathbf{K}^T$, which defines a similarity metric between the the vectors $\\mathbf{q}$ and each of the key vectors $[\\mathbf{k}_1, \\ldots \\mathbf{k}_{T_{\\mathbf{K}\\mathbf{V}}}]$. Furthermore, as the weights sum to one, the output of the attention function is a convex combinations of the values:
$$
\\mathrm{Attention}(\\mathbf{q}, \\mathbf{K}, \\mathbf{V}) = \\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i \\ .
$$'

 
markdown:
**Experiment** We will use the GloVe word vectors to illustrate the attention mechanism. 

We define queries and keys using the GloVe word vectors correspond to country names:
$$
\\begin{align}
\\mathbf{Q} =& [\\mathrm{vec(""Italy"")}, \\mathrm{vec(""Korea"")}, \\mathrm{vec(""Nicaragua"")}, \\ldots] \\\\
\\mathbf{K} =& [\\mathrm{vec(""China"")}, \\mathrm{vec(""Russia"")}, \\mathrm{vec(""Turkey"")}, \\ldots] \\ .
\\end{align}
$$
The inner-product between paris is of country vectors will have a large values when the vectors are similar, this might happend when two countries are geographically or culturally close to each other because of the properties of the GloVe vectors. The last component required to apply the attention mechanism is set of value vectors $\\mathbf{V}$.

The choice of values depends on the end problem, for this exercise we choose stay in the same theme as for the word2vec experiments. We choose the value vectors to represent the relative concept ""*capital city of a country*"", which correspond to the vector $\\mathrm{vec(""Capital\\, city"")} - \\mathrm{vec(""Country"")}$ in the gloVe vector space. In practice, for each country we set:
$$
\\begin{align}
\\mathbf{V} =& [\\mathrm{vec(""Beijing"")} - \\mathbf{K}_1, \\mathrm{vec(""Moscow"")} - \\mathbf{K}_2, \\mathrm{vec(""Ankara"")} - \\mathbf{K}_3, \\ldots] \\\\
\\end{align}
$$",1.1795308589935303,notebook 5_1,19.0,"markdown:
**Implementing the attention function** We obtained a set of attention weights for each query, concatenating them results in a 2D matrix that will display bellow. Let's implement the `attention` function in the cell bellow using the inputs vectors $\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}$ and visualize the output vector. we use [`torch.einsum`](https://pytorch.org/docs/stable/generated/torch.einsum.html) to implement the sum $\\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i$.""]'

 
code:

def plot_attention_map(attention_map, queries_labels, keys_labels, print_values:bool=False, ax=None, color_bar:bool=True):
    """"""Plot the attention weights as a 2D heatmap""""""
    if ax is None:
        fig, ax = plt.subplots(figsize = (10,6), dpi=300)
    else:
        fig = plt.gcf()
    im = ax.imshow(attention_map, cmap=sns.color_palette(""viridis"", as_cmap=True))
    ax.grid(False)
    ax.set_ylabel(""$\\mathbf{Q}$"")
    ax.set_xlabel(""$\\mathbf{K}$"")
    ax.set_yticks(np.arange(len(queries_labels)))
    ax.set_yticklabels(queries_labels)
    ax.set_xticks(np.arange(len(keys_labels)))
    ax.set_xticklabels(keys_labels)
    plt.setp(ax.get_xticklabels(), rotation=45, ha=""right"",
            rotation_mode=""anchor"")

    # Loop over data dimensions and create text annotations.
    if print_values:
        for i in range(len(queries_labels)):
            for j in range(len(keys_labels)):
                text = ax.text(j, i, f""{attention_map[i, j]:.2f}"",
                            ha=""center"", va=""center"", color=""w"")

    if color_bar:
      fig.colorbar(im, fraction=0.02, pad=0.04)
    fig.tight_layout()

def attention(Q, K, V, tau=None):
    """"""A simple parallelized attention layer""""""
    if tau is None:
        tau = math.sqrt(float(Q.shape[-1]))
    assert Q.shape[-1] == K.shape[-1]
    assert K.shape[0] == V.shape[0]
    attention_map = Q @ K.T / tau
    attention_weights = attention_map.softmax(dim=1)
    return torch.einsum(""qk, kh -> qh"", attention_weights, V), attention_weights

# return the output of the attention
output, attention_weights = attention(Q, K, V, tau=1.)

# plot the attention weights
plot_attention_map(attention_weights, queries_labels, keys_labels, print_values=True)'

 
markdown:
**Exercise 5**:  What effect has the parameter $\\tau$ on the attention mechanism? What is happening when using a large value for $\\tau$? using a small value for $\\tau$? In the limits $\\tau \\rightarrow 0$ and $\\tau \\rightarrow \\infty$

> *Insert your answer here*",1.2649474143981934,notebook 5_1,17.0,"*Figure: Word vectors vec(""capital city"") - vec(""country"") represented in a vector space. Vectors might point in different direction depending on their position in the vector space.*
![Attention analogies](images/attention-analogies.png)

We represent the query, key and value vectors in the GloVe vector space in the above figure. The intuition is that the value vector $\\mathrm{vec}(\\text{""capital city of a country""})$ is not always the same depending on the country. Therefore, in this experiment, we will attempt to extract value vectors that are contextualized on the query. To do so, we will add the output of the attention (a mixture of vectors $\\mathrm{vec}(\\text{""capital city""}) - \\mathrm{vec}(\\text{""country""})$) to the vector representation of the query (a country). This corresponds to:

$$
\\mathrm{vec(""Capital\\,city\\,of\\,the\\,query\\,country"")} =  \\mathrm{vec(""Query\\,country"")} + \\underbrace{\\mathrm{Attention}(\\mathrm{vec(""Query\\,country"")}, \\mathbf{K}, \\mathbf{V})}_{\\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i}
$$
', ""First, let's investigate the attention weights $\\lambda_1, \\ldots, \\lambda_{T_{\\mathbf{K}\\mathbf{V}}}$ for each query $\\mathbf{q}_1, \\ldots, \\mathbf{q}_\\mathbf{Q} $ separately:""]'

 
code:
# instantiate some embeddings
embeddings = torch.nn.Embedding(*glove_vectors.shape)
embeddings.weight.data = glove_vectors
embeddings.weight.requires_grad = False

def names_to_vectors(values: List[str]) -> torch.Tensor:
    encodings = glove_tokenizer.encode_batch(values)
    vectors = [embeddings(torch.tensor(e.ids)).mean(dim=0) for e in encodings]
    return torch.stack(vectors)",1.2889906167984009,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.3575975894927979,notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",1.3645656108856201,notebook 5_1,26.0,"code:
class MultiHeadedAttention(nn.Module):
    """"""A simple Multi-head attention layer.""""""
    def __init__(self, h, d_model, dropout=0.1):
        ""Take in model size and number of heads.""
        super(MultiHeadedAttention, self).__init__()
        assert d_model % h == 0
        # We assume d_v always equals d_k
        self.d_k = d_model // h
        self.h = h
        self.linears = nn.ModuleList([nn.Linear(d_model, d_model) for _ in range(4)])
        self.attn = None # store the attention maps
        self.dropout = nn.Dropout(p=dropout)

    def forward(self, query, key, value, mask=None):
        nbatches = query.size(0)
        if mask is not None:
            # Same mask applied to all h heads.
            mask = mask.unsqueeze(1)

        # 1) Do all the linear projections in batch from d_model => h x d_k 
        query, key, value = [l(x).view(nbatches, -1, self.h, self.d_k).transpose(1, 2) for l, x in zip(self.linears, (query, key, value))]

        # 2) Apply attention on all the projected vectors in batch. 
        x, self.attn = attention(query, key, value, mask=mask, dropout=self.dropout)

        # 3) ""Concat"" using a view and apply a final linear. 
        x = x.transpose(1, 2).contiguous().view(nbatches, -1, self.h * self.d_k)
        return self.linears[-1](x)'

 
markdown:
### IV.c Conditional layers
', ""In the description of the base layer, we have applied attention to the input sequence (*self-attention*). Machine translation is a sequence-to-sequence task, which requires and *encoder* component, that encodes a source text into a sequence of hidden states $\\mathbf{g_{1:T'}}$. The base layer can be modified with an additional attention layer that is conditionned on the source text. Given a sequence of hidden states $\\mathbf{h}_{1:T}$, the conditional attention layer is:"", '$$', ""\\mathrm{Attention}(\\mathbf{Q}(\\mathbf{h}_{1:T}), \\mathbf{K}(\\mathbf{g}_{1:T'}), \\mathbf{V}(\\mathbf{g}_{1:T'})) \\ ."", '$$
Conditional attention layers are place right after the self-attention layers, before the feed-forward layer (see diagram).

### IV.d Pre-training as language models

Transformers (the decoder component) are language models can therefore be pre-train on vast amount of unlabelled text via maximum likelihood or pseudo likelihood. They allow obtaining contextualized text representations, that can be applied to a multitude of downstream tasks (question-answering, classification, ...). While the original Transformer architecture was applied to a sequence-to-sequence problem with a component that encodes the source text and a language model decoder conditioned on the encoded source text. Transformer-based language models consist in a single decoder component (without conditional attention). The two main alternatives for language modelling are:",1.387164831161499,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",1.3978601694107056,notebook 5_1,30.0,"# Tokenizer
tokenizer_args = {""padding"":True, ""truncation"":True, ""return_tensors"": ""pt""}
documents_ = tokenizer(documents, **tokenizer_args)
questions_ = tokenizer(questions, **tokenizer_args)

# Compute the question and document vectors
with torch.no_grad():
    document_vectors = model(**documents_).pooler_output
    question_vectors = model(**questions_).pooler_output

# compute the inner product (attention map) between all pairs of questions and documents
attention_map = question_vectors @ document_vectors.T
attention_map = attention_map.softmax(dim=1)

# plot as an attention map
plot_attention_map(attention_map, questions, documents)'

 
markdown:
**Exercise 12**: Is DPR retrieving the right document for each question? Comment on the shape of the attention map.

> *Insert your answer here*'

 
markdown:
---
## Credits and additional references

### Credits

Written by Valentin Liévin and reusing parts of the [Notebook](https://github.com/DeepLearningDTU/Deep-Learning-with-PyTorch-1weekcourse/tree/master/3_Recurrent/notebook_transformer) from Frederico Bergamin.


### Additional references

1. RNNs.
- [Blog post: ""The Unreasonable Effectiveness of Recurrent Neural Networks"" (Karpathy)](http://karpathy.github.io/2015/05/21/rnn-effectiveness/)
- [lecture: ""Language Models and RNNs"" (Stanford)](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

2. Transformers
- [Video from the main author of the paper](https://www.youtube.com/watch?v=rBCqOTEfxvg&t=894s)
- [Video lecture from Deepmind](https://www.youtube.com/watch?v=8zAP2qWAsKg&t=2073s)
- [Annotated Transformer](https://nlp.seas.harvard.edu/2018/04/03/attention.html)
- [Blog Post on the Positional Encoder](https://kazemnejad.com/blog/transformer_architecture_positional_encoding/)
- [Transformer from Scratch](https://e2eml.school/transformers.html#positional_encoding)
- [Another blog post explaining transformer](https://jalammar.github.io/illustrated-transformer/)

### Re-using the images

[Figma design file](https://www.figma.com/file/d7BHs0yMhM9CTer43mrTe5/deep-learning-course?node-id=0%3A1)'

 
markdown:
'[]'",1.3984073400497437,1.0,2.0,3.0,4.0,5.0,5.0,5.0,6.0,6.0,7.0
What is sampling for a language model?,"Sampling text means that the language model is generating text. This corresponds to the inference process of the network, as opposed to training.",notebook 5_1,notebook 5_1,8.0,"**Training** As long as the transition function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ is differentiable (i.e., using neural networks), a language model can be  trained via maximum likelihood, e.g. maximizing the log-likelihood with the loss:
$$
L = - \\log p_\\theta(\\mathbf{w}_{1:T}) = - \\sum_{t=1}^T \\log p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})
$$
Each term $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ can be evaluated using the observed variables $\\mathbf{w}_t$ and $\\mathbf{w}_{<t}$ (no sampling is required) and thus training of auto-regressive models is fast when the evaluation of $f_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ can be parallelized.'

 
markdown:
*Figure: Bidirectional language models*
![Masked language model](images/masked-lm.png)

**Bidirectional and masked language models** Autoregressive language models learn to predict a token $\\mathbf{w}_t$ given the context up to the step $t-1$. One can also use a [pseudo likelihood](https://en.wikipedia.org/wiki/Pseudolikelihood), where $\\mathbf{w}_t$ is not only conditioned on the preceeding tokens $\\mathbf{w}_{<t}$, but also on the next tokens $\\mathbf{w}_{>t}$. This defines a bidirectional language model, which factorizes as
$$
L_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{-t}) \\ ,
$$
where $\\mathbf{w}_{-t}$ represent the set of tokens $\\mathbf{w}_{1:T} \\backslash \\{ \\mathbf{w}_t \\}$. We call it pseudo because this likelihood is not forming a valid distribution (because the graph formed by $\\mathbf{w}_{1:T}$ is not a directed acyclic graph (a DAG)).  Bidirectional language models such as [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), learn token representation contextualized on the whole context.",1.1328115463256836,notebook 5_1,6.0,"### II.a Language Modelling

*Figure: Left-to-right language models*
![Autoregressive left-to-right language model](images/ar-lm.png)

**Autoregressive factorization** Language models aim at grasping the underlying linguistic structure of a text fragment: whereas word vectors model words independently of each others, a language model tracks the grammatical and semantic relationships between word tokens. Given a piece of text encoded into tokens $\\mathbf{w}_{1:T} = [\\mathbf{w_1}, \\ldots, \\mathbf{w}_T]$ a *left-to-right* language model describes $\\mathbf{w}_{1:T}$ with the following factorization:
$$
 p_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t}) \\ ,
$$
where $\\theta$ is a model parameter. The above *autoregressive* factorization describes a *recursive* function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$, which is shared across all the time steps. In the above figure, we represent a left-to-right language model with dependencies represented by arrows for fixed steps $t=3$ and $t=4$. Because of this choice of factorization, a language model defines a graphical model where each step $t$ depends on all the previous steps $<t$ and the conditional $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ models the dependendies between the context $\\mathbf{w}_{<t}$ and the variable $\\mathbf{w}_t$.

**Other factorizations** Autoregressive models are not required to adopt a left-to-right factorization and other forms of factorizations can be implemented (right-to-left or arbitrary permutations). See [""XLNet: Generalized Autoregressive Pretraining for Language Understanding"", Yang et al. (2019)](https://arxiv.org/abs/1906.08237) for an example.'

 
markdown:
*Figure: Categorical distribution over the possible next tokens given the context*
![Categorical distribution](images/categorical-dist.png)",1.1865471601486206,notebook 5_1,7.0,"markdown:
*Figure: Categorical distribution over the possible next tokens given the context*
![Categorical distribution](images/categorical-dist.png)

**Distribution of the possible next tokens** The distribution $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ is a categorical distribution defined on the whole token vocabulary $\\mathcal{v}$. Without loss of generality, we denote $f_\\theta(\\mathbf{w}_t, \\mathbf{w}_{<t})$ the function with parameter $\\theta$ that parametrize:
$$
p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t}) = \\frac{\\exp f_\\theta(\\mathbf{w}_t, \\mathbf{w}_{<t})}{\\sum_{\\mathbf{v} \\in \\mathcal{V}} \\exp f_\\theta(\\mathbf{v}, \\mathbf{w}_{<t})} \\ .
$$
The distribution $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ assigns a probability for each token in the vocabulary to appear right after the context $\\mathbf{w}_{<t}$. As pictured in the above figure, many completion are possibles under the model $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$.

**Language models learn contextual representations** Assigning a probability to each word in the vocabulary requires learning abstract representations of the context $\\mathbf{w}_{<t}$. For instance, in the horse example, predicting the word ""fast"" will be easier to predict if some knowledge of the grammatical rules and common sense is acquired. In this example example, the model needs to learn that $\\mathbf{w}_4$ must be an adjective, and that this adjective can be attributed to a horse. Therefore, the function $f_\\theta$ must acquire a non-trivial representation of the context to make sensible token predictions$.'

 
markdown:
**Sampling** At each step $t$, the $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ implements a categorical distribution defined on the vocabulary $\\mathcal{V}$. Sampling or *generating* text can by iteratively sampling tokens, as showed in the pseudo-code bellow:
```python
ws = [] # placeholder for all the samples w_t
for t in range(T):
    wt_logits = f(ws, theta) # logits of p(w_t | w_{<t})
    wt = Categorical(logits=wt_logits).sample() # sampled w_t
    ws.append(wt) # append the new sample to be used as input in the next step
```
Sampling is often expensive, as it requires one evaluation of the function $f_\\theta$ for each step and cannot be trivially parallelized.",1.24161958694458,notebook 5_1,11.0,"code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences

# load and tokenizer the dataset
def batch_tokenize(batch: List[Dict[str, Any]], max_length=max_seq_size, tokenizer: tokenizers.Tokenizer = None, key:str=""text"") -> torch.Tensor:
    texts = batch[key]
    encodings = tokenizer.encode_batch(texts)
    return {""token_ids"": [x.ids[:max_length] for x in encodings]}

# load AG News, take a subset of `max_dataset_size` rows and tokenize
dataset = datasets.load_dataset(""ag_news"")
dataset = datasets.DatasetDict({split: dset.select(range(max_dataset_size)) if len(dset) > max_dataset_size else dset for split, dset in dataset.items()})
dataset = dataset.map(partial(batch_tokenize, tokenizer=glove_tokenizer), batched=True, num_proc=2, batch_size=10)
rich.print(dataset)'

 
code:
class RNNLM(torch.nn.Module):
    """"""A simple implementation of a language model using RNNs.""""""
    def __init__(self, vectors:torch.Tensor):
        super().__init__()
        # register the embeddings
        self.embeddings = torch.nn.Embedding(*glove_vectors.shape)
        self.embeddings.weight.data = glove_vectors

        # register the LSTM
        self.rnn = torch.nn.LSTM(
            input_size=glove_vectors.shape[1],
            hidden_size=glove_vectors.shape[1],
            num_layers=1,
            batch_first=True,
        )

        # project the output of the LSTM (hidden state) back to the vocabulary space
        self.proj = nn.Linear(glove_vectors.shape[1], glove_vectors.shape[0], bias=False)
        # init the projection using the embeddings weights
        self.proj.weight.data = glove_vectors

    def forward(self, token_ids: torch.Tensor, retain_ws:bool=False) -> torch.Tensor:
        # convert the tokens into vectors
        ws = self.embeddings(token_ids)

        # store the word vectors for debugging
        if retain_ws:
          ws.retain_grad()
          self.ws = ws

        # shift the input `ws` right
        w0 = torch.zeros((ws.shape[0], 1, self.embeddings.weight.shape[1]),
                         device=self.embeddings.weight.device, dtype=torch.long)
        ws_shifted = torch.cat([w0, ws[:, :-1]], dim=1)

        # call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)

        # project the hidden state to the vocabulary space
        logits = self.proj(hidden_states)
        return logits",1.2686837911605835,notebook 5_1,1.0,"# tokenizer for GloVe
glove_tokenizer = tokenizers.Tokenizer(tokenizers.models.WordLevel(vocab={v:i for i,v in enumerate(glove_vocabulary)}, unk_token=""<|unknown|>""))
glove_tokenizer.normalizer = tokenizers.normalizers.BertNormalizer(strip_accents=False)
glove_tokenizer.pre_tokenizer = tokenizers.pre_tokenizers.Whitespace()'

 
markdown:
# Language Modelling and Transformers

___
## Content

* I. Text to vectors
* II. Language models
* III. Attention mechanism
* IV. Transformers
* V. Applications of Transformer-based language models


___
## Introduction

Since its introduction ([""Attention is All You Need"", Wasrani et al. (2016)](https://arxiv.org/abs/1706.03762)), Transformers have overtaken the field of Machine Learning. Initially applied to translation tasks, Transformers pre-trained on vast amounts of unlabelled data such as BERT and GPT have been acquired as central components in most of the modern natural language processing (NLP) systems. Transformers power question answering (QA) models, machine translation services, search engines and chat bots. Independently of the language applications, the Transformer is also a versatile neural architecture and, therefore, has found success outside the field of NLP. Transformers are rapidly being adopted in image processing ([""An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale"", Dosovitskiy et al. (2021)](https://arxiv.org/abs/2010.11929)), in reinforcement learning ([""A Generalist Agent"", Reed et al. (2022)](https://arxiv.org/abs/2205.06175)), video generation ([""VideoGPT: Video Generation using VQ-VAE and Transformers"", Yan et al. (2021)](https://arxiv.org/abs/2104.10157)), and more. In the following sections, we will first introduce the basics of NLP (tokenization, token embeddings, language modelling), introduce the attention mechanism. In the second part, we will study the Transformer architecture and apply it to NLP tasks.

___
## I. Text to vectors

In the previous labs, we have applied deep learning to processing images encoded as RGB pixels. We found that processing arrays of RGB pixels using convolutional neural network was effective. In NLP, other neural interfaces are required to enable plugging text into neural networks. Raw text cannot trivially be plugged-in neural networks. In this section we show how to convert text units or *tokens* into vectors and introduce the notion of text vector spaces.

### I.a. Tokenization

In [alphabetic languages](https://en.wikipedia.org/wiki/List_of_writing_systems), text can be decomposed into various types of units or *tokens*: characters, syllables, words or even sentences. Each tokenization system comes with vocabulary $\\mathcal{V}$ that references all known symbols.",1.2820942401885986,notebook 5_1,28.0,"### V.a Language generation
', ""Let's experiment with GPT-2 (in the notebook, we use the smaller [`distilgpt2`](https://huggingface.co/distilgpt2), but feel free to use the original `gpt2` if you have enough compute)"", '
**Experiment** Generate text using GPT-2:'

 
code:
# load a GPT-2 model
model_id = ""distilgpt2""
# model_id = ""gpt2""
tokenizer = transformers.AutoTokenizer.from_pretrained(model_id)
model = transformers.AutoModel.from_pretrained(model_id)
# Here we want to load the weights of GPT2 as an autoregressive LM, or ""causal"" LM: we use the class `AutoModelForCausalLM`.
model = transformers.AutoModelForCausalLM.from_pretrained(model_id)'

 
code:
# encode context the generation is conditioned on
prompt = tokenizer.bos_token # use the Begining Of Sentence token to initialize allow generating text from scratch', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", '# expand input_ids, so we can sample multiple generations in parallel
input_ids = input_ids.repeat(5, 1)

# generate text until the output length (which includes the context length) reaches 50
# documentation for `model.generate()` https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate
output = model.generate(input_ids, do_sample=True, temperature=1., max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 9**: Play with the temperature parameter, what is it controlling? how can you related it to the definition of a language model?

> *Insert your your answer here*'

 
markdown:
### V.b. Prompt-based learning

Prompt-based learning consists in framing a problem into a *prompt* which completion by a language model corresponds to the answer. In other words, it consists in using natural language to interface with language models.

**Experiment** Do language models know what hygge is?

**Exercise 10**: Write a prompt that triggers a language model to define ""hygge"".

> *write your prompt here and test it using GPT-2 and GPT-3*'

 
code:
prompt = ""Q: What is Hygge? A:""', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", 'input_ids = input_ids.repeat(5, 1)
output = model.generate(input_ids, do_sample=True, temperature=1, max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 11**: Test your prompt [with GPT-3](https://beta.openai.com/playground)

> *Insert your prompt and the GPT-3 completion here*
'

 
markdown:",1.286206603050232,notebook 5_1,9.0,"In the case, of bidirectional language models, the context $\\mathbf{w}_{-t}$ corresponds to the whole sequence of tokens with the predicted element masked out. It is possible to generalize the bidirectional factorization to masking out one or more tokens. In that case, we consider a model $p_\\theta(\\mathbf{w}_m \\mid \\mathbf{w}_{-m})$ where $m$ is a set of indices of the tokens being predicted and $-m$ is the set of the other tokens. This is notably the approach adopted in [""BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"", Delvin et al. (2018)](https://arxiv.org/abs/1810.04805).'

 
markdown:
### II.b Recurrent Neural Networks

*Figure: Left-to-right recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"".*
![Recurrent Neural Network](images/recurrent-lm-activated.png)

**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",1.2953778505325317,notebook 5_3,1.0,"markdown:
### One-hot encoding over vocabulary

One way to represent a fixed amount of words is by making a one-hot encoded vector, which consists of 0s in all cells with the exception of a single 1 in a cell used uniquely to identify each word.

| vocabulary    | one-hot encoded vector   |
| ------------- |--------------------------|
| Paris         | $= [1, 0, 0, \\ldots, 0]$ |
| Rome          | $= [0, 1, 0, \\ldots, 0]$ |
| Copenhagen    | $= [0, 0, 1, \\ldots, 0]$ |

Representing a large vocabulary with one-hot encodings often becomes inefficient because of the size of each sparse vector.
To overcome this challenge it is common practice to truncate the vocabulary to contain the $k$ most used words and represent the rest with a special symbol, $\\mathtt{UNK}$, to define unknown/unimportant words.
This often causes entities such as names to be represented with $\\mathtt{UNK}$ because they are rare.

Consider the following text', ""> I love the corny jokes in Spielberg's new movie."", '
where an example result would be similar to', ""> I love the corny jokes in $\\mathtt{UNK}$'s new movie.""]'

 
markdown:
## Generating a dataset'

 
markdown:
For this exercise we will create a simple dataset that we can learn from. We generate sequences of the form:

`a b EOS`,

`a a b b EOS`,

`a a a a a b b b b b EOS`

where `EOS` is a special character denoting the end of a sequence. The task is to predict the next token $t_n$, i.e. `a`, `b`, `EOS` or the unknown token `UNK` given a sequence of tokens $\\{ t_{1}, t_{2}, \\dots , t_{n-1}\\}$, and we are to process sequences in a sequential manner. As such, the network will need to learn that e.g. 5 `b`s and an `EOS` token will follow 5 `a`s.'

 
code:
import numpy as np

# Set seed such that we always get the same dataset
# (this is a good idea in general)
np.random.seed(42)

def generate_dataset(num_sequences=2**8):
    """"""
    Generates a number of sequences as our dataset.
    
    Args:
     `num_sequences`: the number of sequences to be generated.
     
    Returns a list of sequences.
    """"""
    samples = []
    
    for _ in range(num_sequences): 
        num_tokens = np.random.randint(1, 12)', ""        sample = ['a'] * num_tokens + ['b'] * num_tokens + ['EOS']"", '        samples.append(sample)
        
    return samples


sequences = generate_dataset()
', ""print('A single sample from the generated dataset:')"", 'print(sequences[0])'

 
markdown:
## Representing tokens as indices'",1.3227896690368652,notebook 5_2,6.0,"def init_bias(self, n_out):
    return [Var(self.bias) for _ in range(n_out)]'

 
markdown:
## One-hot encodings'

 
markdown:
We now create a simple function that returns the one-hot encoded representation of a given index of a word in our vocabulary. Notice that the shape of the one-hot encoding is equal to the entire vocabulary (which can be huge!). Additionally, we define a function to automatically one-hot encode a sentence.'

 
code:
def one_hot_encode(idx, vocab_size):
    """"""
    One-hot encodes a single word given its index and the size of the vocabulary.
    
    Args:
     `idx`: the index of the given word
     `vocab_size`: the size of the vocabulary
    
    Returns a 1-D numpy array of length `vocab_size`.
    """"""
    # Initialize the encoded array
    one_hot = np.array([np.zeros(vocab_size)])
    
    # Set the appropriate element to one
    one_hot[0][idx] = 1.0
    return nparray_to_Var(one_hot)


def one_hot_encode_sequence(sequence, vocab_size):
    """"""
    One-hot encodes a sequence of words given a fixed vocabulary size.
    
    Args:
     `sentence`: a list of words to encode
     `vocab_size`: the size of the vocabulary
     
    Returns a 3-D numpy array of shape (num words, vocab size, 1).
    """"""
    # Encode each word in the sentence
    encoding = np.array([Var_to_nparray(one_hot_encode(word_to_idx[word], vocab_size)) for word in sequence])

    # Reshape encoding s.t. it has shape (num words, vocab size, 1)
    encoding = encoding.reshape(encoding.shape[0], encoding.shape[2], 1)
    return nparray_to_Var(encoding)
', ""test_word = one_hot_encode(word_to_idx['a'], vocab_size)"", ""print(f'Our one-hot encoding of \\'a\\' has shape {Var_to_nparray(test_word).shape}.')"", '', ""test_sentence = one_hot_encode_sequence(['a
b'], vocab_size)"", ""print(f'Our one-hot encoding of \\'a b\\' has shape {Var_to_nparray(test_sentence).shape}.')"", '
print(test_word)
print(test_sentence)'

 
code:
encoded_training_set_x = []
encoded_training_set_y = []
encoded_validation_set_x = []
encoded_validation_set_y = []
encoded_test_set_x = []
encoded_test_set_y = []

for n in range(len(training_set)):
  encoded_training_set_x.append(one_hot_encode_sequence(training_set[n][0], vocab_size))
  encoded_training_set_y.append(one_hot_encode_sequence(training_set[n][1], vocab_size))
for n in range(len(validation_set)):
  encoded_validation_set_x.append(one_hot_encode_sequence(validation_set[n][0], vocab_size))
  encoded_validation_set_y.append(one_hot_encode_sequence(validation_set[n][1], vocab_size))
for n in range(len(test_set)):
  encoded_test_set_x.append(one_hot_encode_sequence(test_set[n][0], vocab_size))
  encoded_test_set_y.append(one_hot_encode_sequence(test_set[n][1], vocab_size))'

 
markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'",1.3246628046035767,notebook 5_1,27.0,"* [Generative Pre-trained Transformers (GPT)](https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf): autoregressive left-to-right language models implemented using a Transformer.

* [Bidirectional Encoder Representations from Transformers (BERT)](https://arxiv.org/abs/1810.04805): a masked language model trained to predict tokens that are randomly masked out (masked language model) and trained to predict whether two sentences are related or not (next-sentence prediction (NSP) task).'

 
markdown:
___
## V. Applications of Transformer-based language models
', ""Let's experiment with a few pre-trained Transformers using the [🤗 HuggingFace](https://huggingface.co/) environment and the [OpenAI API](https://beta.openai.com/docs/guides/completion). "", '
HuggingFace is a company that manages multiple open source projects:
* **[tokenizers](https://huggingface.co/docs/tokenizers/index)**: a very efficient implementation of tokenizers using Rust.
* **[datasets](https://huggingface.co/docs/datasets/index)**:a library for handling and sharing large datasets (in particular they use [Apache Arrow](https://arrow.apache.org/)  for efficient data loading from disk)
* **[transformers](https://huggingface.co/docs/transformers/index)**: implementation and sharing of Transformers in Tensorflow, PyTorch and JAX

All HuggingFace models and datasets (text, audio, image and more) can be accessed through the [🤗 Hub](https://huggingface.co/), and many models can tested lives on [🤗 spaces](https://huggingface.co/spaces). In the examples bellow, we will first try to manipulate data and models using lower primitives (tokenizing data, loading a model, generating / inference), so you can interact if the intermediate variables if you want to. Then we will us the blackbox [`Pipeline`](https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/pipelines#transformers.pipeline) object. If you want to apply Transformers without modifying any of the components, the `Pipeline` can be used to perform complex tasks in one line of code, as showed here with the translation task.

The OpenAI API gives access to GPT-3 ([""Language Models are Few-Shot Learners"", Brown et al. (2020)](https://arxiv.org/abs/2005.14165)) through a [playground](https://beta.openai.com/playground), where you can test the text completion capabilities of these models. GPT-3 is a large language model (up to 175 billion parameters) which has acquired impressive language understanding capabilities. It can be applied to solve new tasks without task-specific fine-tuning. [OpenAI gives you $18 to of API credits, but careful with the number of calls: running the largest version of GPT-3 (´davinci´) can be expensive](https://openai.com/api/pricing/).",1.3254194259643555,1.0,2.0,3.0,4.0,5.0,6.0,7.0,7.0,7.0,8.0
What is a rnn?,"A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc. A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence. The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations"," notebook 5_2, notebook 5_3",notebook 5_2,7.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN

We will implement the forward pass, backward pass, optimization and training loop for an RNN in Nanograd so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch.'",0.5988482236862183,notebook 5_3,5.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:

- $h_t = f(U\\,{x_t} + V\\,{h_{t-1}})$, where $f$ is a non-linear activation function, e.g. $\\mathrm{tanh}$.
- $o_t = W\\,{h_t}$

When we are doing language modelling using a cross-entropy loss, we additionally apply the softmax function to the output $o_{t}$:

- $\\hat{y}_t = \\mathrm{softmax}(o_{t})$


### Backpropagation through time

We define a loss function

- $E = \\sum_t E_t  = \\sum_t E_t(y_t ,\\hat{y}_t ) \\ , $

where $E_t(y_t ,\\hat{y}_t )$ is the cross-entropy function.

Backpropagation through time amounts to computing the gradients of the loss using the same type of clever bookkeeping we applied to the feed-forward network in week 1. This you will do in Exercise D.'

 
markdown:
## Implementing an RNN'

 
markdown:
We will implement the forward pass, backward pass, optimization and training loop for an RNN in numpy so that you can get familiar with the recurrent nature of RNNs. Later, we will go back to PyTorch and appreciate how convenient the implementation becomes!'

 
markdown:
Let's first define the necessary model parameters. Recall that an $n \\times m$ weight matrix maps $\\mathbb{R}^{m} \\rightarrow \\mathbb{R}^{n}$.""]'

 
code:
hidden_size = 50 # Number of dimensions in the hidden state
vocab_size  = len(word_to_idx) # Size of the vocabulary used",0.6555638909339905,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",0.8738992214202881,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",0.9165387153625488,notebook 5_3,14.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:

The LSTM cell contains three gates, input, forget, output gates and a memory cell.
The output of the LSTM unit is computed with the following functions, where $\\sigma = \\mathrm{sigmoid}$.
We have input gate $i$, forget gate $f$, and output gate $o$ defines as

- $i = \\sigma ( W^i [h_{t-1}, x_t])$

- $f = \\sigma ( W^f [h_{t-1},x_t])$

- $o = \\sigma ( W^o [h_{t-1},x_t])$

where $W^i, W^f, W^o$ are weight matrices applied to a concatenated $h_{t-1}$ (hidden state vector) and $x_t$ (input vector)  for each respective gate.

$h_{t-1}$, from the previous time step along with the current input $x_t$ are used to compute the a candidate $g$

- $g = \\mathrm{tanh}( W^g [h_{t-1}, x_t])$
', ""The value of the cell's memory, $c_t$, is updated as"", '
- $c_t = c_{t-1} \\circ f + g \\circ i$

where $c_{t-1}$ is the previous memory, and $\\circ$ refers to element-wise multiplication (hint: element-wise multiplication is computed with the `*` operator in numpy).

The output, $h_t$, is computed as",0.9321950674057007,notebook 5_1,14.0,"# backward and optimize
            loss.backward()
            optimiser.step()
            step += 1
            pbar.update(1)

            # Report
            if step % 5 ==0 :
                loss = loss.detach().cpu()
                pbar.set_description(f""epoch={epoch}, step={step}, loss={loss:.1f}"")

            # save checkpoint
            if step % 50 ==0 :
                torch.save(rnn.state_dict(), checkpoint_file)
            if step >= num_steps:
                break
        epoch += 1'

 
code:
# sample the RNN language model
with torch.no_grad():
    sample = rnn.sample(num_steps=10, batch_size=10, temperature=0.5, prevent_repetitions=True)
    rich.print(glove_tokenizer.decode_batch(sample.detach().cpu().numpy()))'

 
code:
_ = rnn.cpu()
# free-up memory if needed: delete the RNN model
# del rnn'

 
markdown:
**Exercise 3**: What would happen if the inputs of the RNN were not shifted to the right (in sample in the RNNLM class)?  

> *Insert your answer here.*'

 
markdown:
___
## III. Attention mechanism and Transformers


The attention mechanism was first introduce in machine learning for machine translation tasks [(""Neural Machine Translation by Jointly Learning to Align and Translate"", Bahdanau et al. (2014))](https://arxiv.org/abs/1409.0473). Translation is a sequence-to-sequence problem which goal is to generate a translation of a source text. The attention mechanism was introduced to allow *attenting* the whole source text at any of the generation steps. We implement attention with the softmax function because it is a differential version of a hard zero-one attention.

In this section, we will introduce the *scaled dot-product* self-attention mechanism and the Transformer architecture [(""Attention is All You Need"", Wasrani et al. (2016))](https://arxiv.org/abs/1706.03762).

### III.a Attention mechanism

Attention has become a very important concept in deep learning beginning with [""Neural Machine Translation by Jointly Learning to Align and Translate"", Badanau et. al. (2015)](https://arxiv.org/abs/1409.0473). The idea key idea in that paper is that when you translate a sentence from for example German to English then it is a good is helpful for the model when it generates",0.9890222549438477,notebook 5_3,25.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",1.027855396270752,notebook 5_1,10.0,"**Long Short-Term Memory (LSTM) networks** A standard RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the [Long Short-Term Memory (LSTM, Hochreiter and Schmidhuber. (1997))](https://dl.acm.org/doi/10.1162/neco.1997.9.8.1735) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. RNNs coupled with gated mechanisms are less prone to the problem of vanishing gradients, and can therefore model dependencies over longer number of steps.'

 
markdown:
*Figure: bi-directional recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"" (left-to-right), and the information flowing from the context ""fast"" (right-to-left).*
![Recurrent Neural Network](images/bidirectional-lm-activated.png)

**Bi-directional recurrent neural networks** Using two RNNs running in reverse direction allows building bidirectional language models. The distribution $p_\\theta(\\mathbf{x}_t \\mid \\mathbf{x}_{-t})$ can be parameterized as
$$
p_\\theta( \\cdot \\mid \\mathbf{x}_{-t}) = \\mathrm{Softmax}((\\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t) F^T) \\ ,
$$
where the hidden state  $\\mathbf{h}^\\mathrm{bi}_t = \\mathbf{h}^\\mathrm{forward}_t + \\mathbf{h}^\\mathrm{reverse}_t$ defines hidden state contextualized on all the tokens but $\\mathbf{w}_t$. 

This is the strategy adopted by [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), which popularized learning deep contextualized representations as a pre-training step, and at the samd time, started a [tradition of naming models after Seame Street characters](https://www.theverge.com/2019/12/11/20993407/ai-language-models-muppets-sesame-street-muppetware-elmo-bert-ernie).'

 
markdown:
**Experiment: train your own LSTM language model**
', ""> **NB:**  *training on CPU is very slow. If you don't have access to a GPU, it will be difficult to train a model that generate acceptable samples. In the end of the notebook, we will use pre-trained models directly, so feel free to skip this experiment.* **You still need to implement the loss in the training loop.**""]'

 
code:
max_dataset_size = 1000 # let's use a small subset for now,"", 'max_seq_size = 10 # and very short sequences",1.0508770942687988,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",1.0660134553909302,notebook 5_3,8.0,"markdown:
### Implement the forward pass'

 
markdown:
Now that we have all the definitions in place, we can start to implement a forward pass.'

 
code:
def forward_pass(inputs, hidden_state, params):
    """"""
    Computes the forward pass of a vanilla RNN.
    
    Args:
     `inputs`: sequence of inputs to be processed
     `hidden_state`: an already initialized hidden state
     `params`: the parameters of the RNN
    """"""
    # First we unpack our parameters
    U, V, W, b_hidden, b_out = params
    
    # Create a list to store outputs and hidden states
    outputs, hidden_states = [], []
    
    # For each element in input sequence
    for t in range(len(inputs)):

        # Compute new hidden state
        # YOUR CODE HERE!
        hidden_state = 

        # Compute output
        # YOUR CODE HERE!
        out = 
        
        # Save results and continue
        outputs.append(out)
        hidden_states.append(hidden_state.copy())
    
    return outputs, hidden_states


# Get first sequence in training set
test_input_sequence, test_target_sequence = training_set[0]

# One-hot encode input and target sequence
test_input = one_hot_encode_sequence(test_input_sequence, vocab_size)
test_target = one_hot_encode_sequence(test_target_sequence, vocab_size)

# Initialize hidden state as zeros
hidden_state = np.zeros((hidden_size, 1))
', ""# Now let's try out our new function"", 'outputs, hidden_states = forward_pass(test_input, hidden_state, params)
', ""print('Input sequence:')"", 'print(test_input_sequence)
', ""print('\Target sequence:')"", 'print(test_target_sequence)
', ""print('\Predicted sequence:')"", 'print([idx_to_word[np.argmax(output)] for output in outputs])'

 
markdown:
## Exercise C:'

 
markdown:
Implement the forward pass in the code above. Use $\\tanh{x}$ as the non-linear activation function $f$. You can use `np.dot()` to compute dot products. Refer to the equations and the figure if you're in doubt.""]'

 
markdown:
## Backward pass'

 
markdown:
It's now time to implement the backward pass. This can be a bit tricky so it may be helpful to take another look at the RNN equations, figure and your forward pass implementation. Note that (depending on your implementation) you may sometimes need to transpose using `np.transpose()` or simply `.T`.""]'

 
markdown:
## Exercise D:'

 
markdown:
Implement the missing code in the backward pass code given below using a cross-entropy loss and $\\tanh{x}$ as non-linear activation function $f$.

To complete the implementation, we need to compute the partial derivatives
$
\\frac{\\partial E}{\\partial W},~\\frac{\\partial E}{\\partial U},~\\frac{\\partial E}{\\partial V}
$. 
We repeat the definition of the RNN forward pass from above:",1.1014368534088135,1.0,2.0,3.0,4.0,5.0,5.0,6.0,6.0,6.0,7.0
What topics are covered in the first three weeks of the course?,". Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper. 2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy. 3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.", CourseOutline.txt,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.9853216409683228,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.06428062915802,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",1.0654165744781494,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.2005923986434937,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",1.2019290924072266,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",1.2033677101135254,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",1.2436466217041016,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.293893814086914,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.3043897151947021,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",1.3224728107452393,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
When does project work start?,Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work., CourseOutline.txt,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.1223702430725098,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.336073875427246,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",1.3965682983398438,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",1.441561222076416,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",1.4450111389160156,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",1.5219371318817139,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",1.549959659576416,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.6039292812347412,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.637697696685791,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",1.6923887729644775,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0
How are students expected to communicate and evaluate their project work?,"Organize and present project results at the final project presentation and in report. Read, evaluate and give feedback to work of other students", LearningObjectives.txt,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",1.0572329759597778,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.1369258165359497,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.2093387842178345,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",1.2544171810150146,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",1.4169450998306274,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.585350513458252,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",1.6092243194580078,notebook 4_2,3.0,"test_accuracy = np.sum(test_accuracies) / len(test_set)
    
    model.train()'

 
markdown:
Here we report the **average test accuracy** (number of correct predictions divided by test set size).'

 
code:
print(f""Test accuracy: {test_accuracy:.3f}"")'

 
markdown:
Here we look a bit more in depth into the performance of the classifier, using the **confusion matrix**. The entry at the i-th row and j-th column indicates the number of samples with true label being the i-th class and predicted label being the j-th class.

We normalize the rows: given all examples of a specific class (row), we can observe here how they are classified by our model. Ideally, we would like the entries on the diagonals to be 1, and everything else 0. This would mean that all examples from that class are classified correctly.

The classes that are harder to classify for our model have lower numbers on the diagonal. We can then see exactly *how* they are misclassified by looking at the rest of the row.'

 
code:
def normalize(matrix, axis):', ""    axis = {'true': 1, 'pred': 0}[axis]"", '    return matrix / matrix.sum(axis=axis, keepdims=True)

x_labels = [classes[i] for i in classes]
y_labels = x_labels
plt.figure(figsize=(6, 6))
sns.heatmap(
    ax=plt.gca(),', ""    data=normalize(confusion_matrix, 'true'),"", '    annot=True,
    linewidths=0.5,
    cmap=""Reds"",
    cbar=False,
    fmt="".2f"",
    xticklabels=x_labels,
    yticklabels=y_labels,
)
plt.xticks(rotation=90)
plt.yticks(rotation=0)
plt.ylabel(""True class"")
plt.xlabel(""Predicted class"")
plt.tight_layout()
plt.show()'

 
markdown:
Here we focus on the diagonal and plot the numbers in a bar plot. This gives us a clearer picture of the accuracy of the model for different classes.'

 
code:
with sns.axes_style('whitegrid'):"", '    plt.figure(figsize=(8, 4))', ""    sns.barplot(x=x_labels, y=np.diag(normalize(confusion_matrix, 'true')))"", '    plt.xticks(rotation=90)
    plt.title(""Per-class accuracy"")
    plt.ylabel(""Accuracy"")
    plt.show()'

 
markdown:
**Assignment 4:** 
1. Go back and improve performance of the network. By using enough convolutional layers with enough channels (and by training for long enough), you should easily be able to get a test accuracy above 60%, but see how much further you can get it! Can you reach 70%?

2. Briefly describe what you did and any experiments you did along the way as well as what results you obtained.
Did anything surprise you during the exercise?
What were the changes that seemed to improve performance the most?

3. Write down key lessons/insights you got during this exercise.

**Answer:**'

 
markdown:
# Training on GPU",1.6144351959228516,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathrm{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathrm{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).
We will model functions as $\\mathrm{R}^{t \\, \\times \\, d} \\rightarrow \\mathrm{R}^c$, where $c$ is the amount of classes in the output.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.

In this exercise we will use a simple one-hot encoding but for categorical variables that can take on many values (e.g. words in the English language) this may be infeasible. For such scenarios, you can project the encodings into a smaller space by use of embeddings. If you want to learn more about tokens, encodings and embeddings than what is covered in this exercise, we highly recommend [this lecture](https://www.youtube.com/watch?v=kEMJRjEdNzM&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).'

 
markdown:
### One-hot encoding over vocabulary",1.6454029083251953,notebook 5_1,18.0,"def plot_attention_weights(attention_weights, queries_labels, keys_labels, nrows = 2):
    """"""Plot the attention scores between each of the queries and the keys.""""""
    ncols = len(attention_weights) // nrows
    fig, axes = plt.subplots(ncols=ncols, nrows=nrows, figsize = (10,6), sharex=False, sharey=True, dpi=300)
    colors = sns.color_palette(""viridis"", as_cmap=True)
    def normalize(x, values):
        return (x -  values.min()) / (values.max() - values.min())
    for k, ax in enumerate(axes.flat):
        query_label = queries_labels[k]
        attention_weights_k = attention_weights[k]
        cols = [colors(normalize(x, attention_weights).detach().item()) for x in attention_weights_k]
        ax.bar(keys_labels, attention_weights_k, color=cols)
        plt.setp(ax.get_xticklabels(), rotation=45, ha=""right"", rotation_mode=""anchor"")
        ax.set_title(f""Query={query_label}"")
        if k % ncols == 0 :
            ax.set_ylabel(""Attention score"")
        if k >= ncols:
            ax.set_xlabel(""$\\mathbf{K}$"")
    fig.tight_layout()
    plt.show()

# Define keys, queries and values
queries_labels = [""Italy"", ""Korea"", ""Nicaragua"", ""Canada"", ""Algeria"", ""India""]
keys_labels = [""China"", ""Russia"", ""Turkey"", ""Japan"", ""Thailand"", ""Germany"", ""France"", ""Sweden"", ""Poland"", ""Nigeria"", ""Morocco"", ""Colombia"", ""Chile"", ""USA"", ""Pakistan""]
keys_cities_labels = [""Beijing"", ""Moscow"", ""Ankara"", ""Tokyo"", ""Bangkok"", ""Berlin"", ""Paris"", ""Stockholm"", ""Warsaw"", ""Abuja"", ""Rabat"", ""Bogota"", ""Santiago"", ""Washington"", ""Islamabad""]
# convert to vectors
Q = names_to_vectors(queries_labels)
K = names_to_vectors(keys_labels)
V = names_to_vectors(keys_cities_labels) - K


# compute the attention weights for each query using a ´for` loop
attention_weights = []
for q in Q:
    log_lambda_q = (q @ K.T) / math.sqrt(float(Q.shape[-1]))
    attention_weights.append(log_lambda_q)
attention_weights = torch.stack(attention_weights)

# plot attention weights for each query
plot_attention_weights(attention_weights, queries_labels, keys_labels)'

 
markdown:
**Exercise 4**:  In this example, what is the value of $T_{\\mathbf{K}\\mathbf{V}}$, $T_{\\mathbf{Q}}$, $h_i$, $h_o$ and $\\tau$ ?

> * $T_{\\mathbf{K}\\mathbf{V}} = ...$ 
> * $T_{\\mathbf{Q}} = ...$ 
> * $h_i = ...$
> * $h_o = ...$
> * $\\tau = ...$'",1.6483529806137085,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What are the expectations regarding the final project report and presentation?,"Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion. Organize and present project results at the final project presentation and in report.", LearningObjectives.txt,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.9727863073348999,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",1.021934151649475,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",1.0221654176712036,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.0226526260375977,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",1.423701524734497,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",1.4253792762756348,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",1.532703161239624,notebook 5_2,20.0,"# Plot training and validation loss
epoch = np.arange(len(training_loss))
plt.figure()', ""plt.plot(epoch, training_loss, 'r', label='Training loss',)"", ""plt.plot(epoch, validation_loss, 'b', label='Validation loss')"", 'plt.legend()', ""plt.xlabel('Epoch'), plt.ylabel('NLL')"", 'plt.show()'

 
markdown:
# Exercise k) Compare PyTorch and Nanograd implementations

Compare the two implementations (in terms of predictive performance, training speed, etc.). Are they similar? How do they differ?


Try to play around with the choice of hyper-parameters, optimizer, and hidden dimensions. How much can you improve the negative log-likelihood by these simple changes?'

 
markdown:
## Exercise l) Other RNN cells (optional)

Aside from the LSTM cell, various other RNN cells exist. The gated recurrent unit (GRU) is a variation of the LSTM cell that uses less gating mechanisms. Try to look it up in the [PyTorch documentation](https://pytorch.org/docs/stable/nn.html#gru) and switch out the LSTM cell in the code above. What do you notice in terms of performance and convergence speed?'

 
markdown:
## Exercise m) More complex tasks (optional)

Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between a vanilla RNN and LSTM (implemented in e.g. PyTorch) when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",1.534820795059204,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",1.5477912425994873,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.5684459209442139,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What is the schedule for the '02456 Deep Learning 2023' course and what teaching method is used?,"Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)... We use flipped classroom teaching.", CoursePlan.txt,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.5315549969673157,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.8729215860366821,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.9684227705001831,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.9778344035148621,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.9924381971359253,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",1.046439290046692,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",1.104841709136963,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",1.1520676612854004,notebook 5_2,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.

To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in Nanograd rather than PyTorch. 
', ""We start off with a simple toy problem, build an RNN using Nanograd, train it, and see for ourselves that it really works. Once we're convinced, you will implement the Long Short-Term Memory (LSTM) cell, also in Nanograd. "", '
This is *not* simple but with the DenseLayer class we already have, it is doable. Having done it yourself will help you understand what happens under the hood of the PyTorch code we will use throughout the course.

To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in Nanograd
* How to build and train an LSTM network in Nanograd
* How to build and train an LSTM network in PyTorch


[Numpy version of the Notebook (previous version)](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/5_Recurrent/OLD-5.1-Numpy-Recurrent-Neural-Networks.ipynb)'

 
markdown:
## Representing tokens or text

In previous labs we mainly considered data $x \\in \\mathbb{R}^d$, where $d$ is the feature space dimension.
With time sequences our data can be represented as $x \\in \\mathbb{R}^{t \\, \\times \\, d}$, where $t$ is the sequence length. 
This emphasises sequence dependence and that the samples along the sequence are not independent and identically distributed (i.i.d.).

With RNNs, we can model both many-to-one functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^c$ and many-to-many functions: $\\mathbb{R}^{t \\, \\times \\, d} \\rightarrow \\mathbb{R}^{t \\, \\times \\, c}$, where $c$ is the amount of classes/output dimensions.

There are several ways to represent sequences. With text, the challenge is how to represent a word as a feature vector in $d$ dimensions, as we are required to represent text with decimal numbers in order to apply neural networks to it.",1.1534192562103271,CoursePlan.txt,7.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures",1.18272066116333,1.0,2.0,3.0,4.0,5.0,6.0,6.0,6.0,6.0,7.0
What are the requirements for students to gain access to the final project in the '02456 Deep Learning 2023' course?,The student gains access to the final project by passing 6 out of 8 lab sessions that precede it. A lab session is passed by: grading the reports from lab sessions of 3 other students on Peergrade and passing the lab as judged by the teacher, CoursePlan.txt,CoursePlan.txt,3.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.
    Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.8582185506820679,CoursePlan.txt,1.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.",0.8714817762374878,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants

    Aleksander Nagaj
    Anders Christensen
    Anna Maria Clara Schibelle
    Anshuk Uppal
    Beatrix Miranda Ginn Nielsen
    Bo Li
    Kenny Olsen
    Marco Miani
    Nina Weng
    Paul Jeha
    Pawel Tomasz Pieta
    Raul Ortega Ochoa
    Teresa Karen Scheidt
    Thea Brüsch

Google CoLab

Google CoLab is a free cloud based Jupyter notebook platform with collaboration functionality. It even has GPUs and you don't need any credits, just log in with your Google account. To start, import a notebook using a github link or upload it from your pc: https://colab.research.google.com/. Setting up is quite straightforward. If you need to install libraries you can add that in a code cell with `! pip install <library name>`. You can upload some extra files (such as additional py scripts) that your jupyter notebook will use.
Other free GPU compute resources

It might be that Google CoLab will start putting restrictions if you use it too much. But there are alternatives:
DTU HPC

Nicklas Hansen and Aleksander Nagaj and Anna Schibelle (2023 update) have made this guide.
Google cloud platform (GCP)

You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks",0.8779778480529785,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.9029279947280884,CoursePlan.txt,6.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",1.132570743560791,CoursePlan.txt,8.0,"Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima

and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",1.180922508239746,CoursePlan.txt,2.0,"Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",1.1850781440734863,CoursePlan.txt,4.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",1.2214292287826538,CoursePlan.txt,5.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.

    During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io. 

Week 2 - Feed-forward neural networks - do it yourself in NumPy",1.228454828262329,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",1.2584080696105957,1.0,2.0,3.0,3.0,4.0,5.0,6.0,7.0,8.0,8.0
