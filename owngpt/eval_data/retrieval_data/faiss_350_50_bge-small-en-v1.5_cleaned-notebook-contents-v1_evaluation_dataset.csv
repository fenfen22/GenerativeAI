Question,Answer,Source,Retrived_doc_1_source,Retrived_doc_1_id,Retrived_doc_1_content,Retrived_doc_1_score,Retrived_doc_2_source,Retrived_doc_2_id,Retrived_doc_2_content,Retrived_doc_2_score,Retrived_doc_3_source,Retrived_doc_3_id,Retrived_doc_3_content,Retrived_doc_3_score,Retrived_doc_4_source,Retrived_doc_4_id,Retrived_doc_4_content,Retrived_doc_4_score,Retrived_doc_5_source,Retrived_doc_5_id,Retrived_doc_5_content,Retrived_doc_5_score,Retrived_doc_6_source,Retrived_doc_6_id,Retrived_doc_6_content,Retrived_doc_6_score,Retrived_doc_7_source,Retrived_doc_7_id,Retrived_doc_7_content,Retrived_doc_7_score,Retrived_doc_8_source,Retrived_doc_8_id,Retrived_doc_8_content,Retrived_doc_8_score,Retrived_doc_9_source,Retrived_doc_9_id,Retrived_doc_9_content,Retrived_doc_9_score,Retrived_doc_10_source,Retrived_doc_10_id,Retrived_doc_10_content,Retrived_doc_10_score,recall@1,recall@2,recall@3,recall@4,recall@5,recall@6,recall@7,recall@8,recall@9,recall@10
What is PyTorch?,"It’s a Python based scientific computing package targeted at two sets of audiences:
A replacement for numpy to use the power of GPUs
a deep learning research platform that provides maximum flexibility and speed",notebook 3_1,notebook 3_1,1.0,"code:
x[1:3] = 2
print(x)'

 
markdown:
# Assignment

Make use of the pytorch docs <http://pytorch.org/docs/torch>
1. Make a tensor of size (2, 17)
2. Make a torch.FloatTensor of size (3, 1)
3. Make a torch.LongTensor of size (5, 2, 1)
  - fill the entire tensor with 7s
4. Make a torch.ByteTensor of size (5,)
  - fill the middle 3 indices with ones such that it records [0, 1, 1, 1, 0]'

 
markdown:
## 2. Operations', ""There are multiple syntaxes for operations. Let's see addition as an example:"", '
### 2.1 Addition: syntax 1'

 
code:
y = torch.rand(5, 3)
print(x + y)'

 
markdown:
### 2.2 Addition: syntax 2'

 
code:
print(torch.add(x, y))'

 
markdown:
### 2.3 Addition: giving an output tensor'

 
code:
result = torch.Tensor(5, 3)
torch.add(x, y, out=result)
print(result)'

 
markdown:
### 2.4 Addition: in-place

adds `x`to `y`'

 
code:
y.add_(x)
print(y)'

 
markdown:
**NOTE**: Any operation that mutates a tensor in-place is post-fixed with an `_`. For example: `x.copy_(y)`, `x.t_()`, will change `x`.'",0.5856584310531616,notebook 3_1,0.0,"markdown:
# Credits

This is heavily based on https://github.com/pytorch/tutorials'

 
markdown:
# What is PyTorch?

> **NOTE** In the last part of this lab cuda is used. If you have a cuda enabled machine, read the README.md in the root of this repo on how to use nvidia-docker.


It’s a Python based scientific computing package targeted at two sets of
audiences:
-  A replacement for numpy to use the power of GPUs
-  a deep learning research platform that provides maximum flexibility
   and speed'

 
markdown:
# Getting Started

In this lab you will get a quick start on what pytorch is and how to use it.

## 1. Tensors

Tensors are similar to numpy’s ndarrays, with the addition being that
Tensors can also be used on a GPU to accelerate computing.'

 
code:
['import torch'

 
markdown:
Construct a 5x3 matrix, uninitialized'

 
code:
x = torch.Tensor(5, 3)
print(x)'

 
markdown:
Construct a randomly initialized matrix'

 
code:
x = torch.rand(5, 3)
print(x)'

 
markdown:
['Get its size'

 
code:
print(x.size())'

 
markdown:
**NOTE**: `torch.Size` is in fact a tuple, so it supports the same operations that a tuple supports.'

 
code:
x[1:3] = 2
print(x)'

 
markdown:
# Assignment",0.5939913988113403,notebook 3_2,0.0,"markdown:
# Credits

This is heavily influenced or copied from https://github.com/pytorch/tutorials'

 
markdown:
# Autograd: automatic differentiation

Central to all neural networks in PyTorch is the ``autograd`` package.
Let’s first briefly visit this, and we will then go to training our first neural network.

The `autograd` package provides automatic differentiation for all operations on Tensors.
It is a define-by-run framework, which means that your backprop is defined by how your code is run, and that every single iteration can be different.

Let us see this in more simple terms with some examples.'

 
markdown:
## 1. Tensor

`torch.Tensor` is the central class of the package. Setting the attribute `.requires_grad` to `True` will make the tensor ""record"" all operations on it. When you finish your computation you can call `.backward()` and have all the gradients computed automatically. The gradient for this tensor will be accumulated into the `.grad` attribute.

![autograd.Variable](../static_files/autograd-variable.png)

There’s one more class which is very important for autograd implementation - a `Function`.

`Tensor` and `Function` are interconnected and build up an acyclic graph, that encodes a complete history of computation. Each tensor has a `.grad_fn` attribute that references a `Function` that has created the `Tensor` (except for Tensors created by the user - their `grad_fn` is `None`).",0.6018126010894775,notebook 3_3,4.0,"markdown:
## PyTorch 101

In this first exercise we will use basic PyTorch functions so that you can learn how to build it from scratch. This will help you later if you want to build your own custom operations.'

 
code:
import torch
from torch import nn
import torch.nn.functional as F'

 
markdown:
[`Parameters`](https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html#torch.nn.parameter.Parameter) have a very special property when used with [`Module`](https://pytorch.org/docs/stable/generated/torch.nn.Module.html?highlight=module#torch.nn.Module)s - when they’re assigned as `Module` attributes they are automatically added to the list of its parameters, and will appear e.g. in the `parameters()` iterator. \\
Assigning a Tensor doesn’t have such effect. This is because one might want to cache some temporary state (more on this later) in the model. If there was no such class as `Parameter`, these temporaries would get registered too.'

 
code:
class Net(nn.Module):",0.6151303052902222,notebook 7_1,6.0,"code:
import torch.nn as nn

# define size variables
num_features = 28*28

class AutoEncoder(nn.Module):
    def __init__(self, hidden_units, latent_features=2):
        super(AutoEncoder, self).__init__()
        # We typically employ an ""hourglass"" structure
        # meaning that the decoder should be an encoder
        # in reverse.
        
        self.encoder = nn.Sequential(
            nn.Linear(in_features=num_features, out_features=hidden_units),
            nn.ReLU(),
            # bottleneck layer
            nn.Linear(in_features=hidden_units, out_features=latent_features)
        )

        self.decoder = nn.Sequential(
            nn.Linear(in_features=latent_features, out_features=hidden_units),
            nn.ReLU(),
            # output layer, projecting back to image size
            nn.Linear(in_features=hidden_units, out_features=num_features)
        )

    def forward(self, x): 
        outputs = {}', ""        # we don't apply an activation to the bottleneck layer"", '        z = self.encoder(x)
        
        # apply sigmoid to output to get pixel intensities between 0 and 1
        x_hat = torch.sigmoid(self.decoder(z))
        
        return {', ""            'z': z,"", ""            'x_hat': x_hat"", '        }


# Choose the shape of the autoencoder
net = AutoEncoder(hidden_units=128, latent_features=2)

if cuda:
    net = net.cuda()

print(net)'

 
markdown:
Following we define the PyTorch functions for training and evaluation.'

 
code:
import torch.optim as optim",0.6154494285583496,notebook 5_2,9.0,"markdown:
When working with more complex data than what we use in this exercise, creating a PyTorch `DataLoader` on top of the dataset can be beneficial. A data loader is basically a fancy generator/iterator that we can use to abstract away all of the data handling and pre-processing + it's super useful for processing batches of data as well! Data loaders will come in handy later when you start to work on your projects, so be sure to check them out!"", '
For more information on how to use datasets and data loaders in PyTorch, [consult the official guide](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html).'

 
markdown:
## Nanograd utilities'

 
markdown:
We load necessary utility functions for the Nanograd library, which we saw in Lab 2.'

 
code:
# Copy and pasted from https://github.com/rasmusbergpalm/nanograd/blob/main/nanograd.py

from math import exp, log, tanh

class Var:
    """"""
    A variable which holds a float and enables gradient computations.
    """"""

    def __init__(self, val: float, grad_fn=lambda: []):
        assert type(val) == float
        self.v = val
        self.grad_fn = grad_fn
        self.grad = 0.0

    def backprop(self, bp):
        self.grad += bp
        for input, grad in self.grad_fn():
            input.backprop(grad * bp)",0.6221717596054077,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)",0.6224158406257629,notebook 5_2,39.0,"code:
import torch
import torch.nn as nn
import torch.nn.functional as F

class MyRecurrentNet(nn.Module):
    def __init__(self):
        super(MyRecurrentNet, self).__init__()
        
        # Recurrent layer
        # YOUR CODE HERE!
        self.lstm = 
        
        # Output layer
        self.l_out = nn.Linear(in_features=50,
                            out_features=vocab_size,
                            bias=False)
        
    def forward(self, x):
        # RNN returns output and last hidden state
        x, (h, c) = self.lstm(x)
        
        # Flatten output for feed-forward layer
        x = x.view(-1, self.lstm.hidden_size)
        
        # Output layer
        x = self.l_out(x)
        
        return x

net = MyRecurrentNet()
print(net)'

 
markdown:
## Exercise j) Train in PyTorch

Define an LSTM for our recurrent neural network `MyRecurrentNet` above. A single LSTM layer is sufficient. What should the input size and hidden size be? Hint: use the PyTorch documentation.
', ""It's time for us to train our network. In the section below, you will get to put your deep learning skills to use and create your own training loop. You may want to consult previous exercises if you cannot recall how to define the training loop.""]'",0.673872709274292,notebook 3_2,3.0,"markdown:
**Read later** \\
*Documentation* \\
`Tensor`: https://pytorch.org/docs/stable/tensors.html \\
`Function`: http://pytorch.org/docs/autograd'

 
markdown:
# Assignments

1. Define a tensor and set `requires_grad` to `True`
3. Multiply the tensor by 2 and assign the result to a new python variable (i.e. `x = result`)', ""4. Sum the variable's elements and assign to a new python variable"", '5. Print the gradients of all the variables
6. Now perform a backward pass on the last variable (NOTE: for each new python variable that you define, call `.retain_grad()`)
7. Print all gradients again
  - what did you notice?'

 
code:
'[]'",0.6782604455947876,notebook 3_3,0.0,"markdown:
# Purpose and goals
In this notebook you will implement a simple neural network in PyTorch.

The building blocks of PyTorch are Tensors, and Operations, with these we can form dynamic computational graphs that represent neural networks.', ""In this exercise we'll start right away by defining a logistic regression model using these simple building blocks."", ""We'll initially start with a simple 2D and binary (i.e. two-class) classification problem where the class decision boundary can be visualized."", 'Initially we show that logistic regression can only separate classes linearly.
Adding a nonlinear hidden layer to the algorithm permits nonlinear class separation.

In this notebook you should:
* **First** run the code as is, and see what it does.
* **Then** modify the code, following the instructions in the bottom of the notebook.
* **Lastly** play around a bit, and do some small experiments that you come up with.

> We assume that you are already familiar with backpropagation (if not please see [Andrej Karpathy](http://cs.stanford.edu/people/karpathy/) or [Michal Nielsen](http://neuralnetworksanddeeplearning.com/chap2.html)).'

 
markdown:
# Dependencies and supporting functions
Load dependencies and supporting functions by running the code block below.'

 
code:
%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import sklearn.datasets",0.6829961538314819,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
What is the MNIST dataset?,"MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).
<image>",notebook 3_4,notebook 4_1,4.0,"from sklearn.metrics import accuracy_score
from torch.utils.data import TensorDataset, DataLoader
from torchvision.utils import make_grid

sns.set_style(""whitegrid"")'

 
markdown:
# Load MNIST data

The code below downloads and loads the same MNIST dataset as before.
Note however that the data has a different shape this time: `(num_samples, num_channels, height, width)`.'

 
code:
# Download the MNIST dataset, if you have not already.
!if [ ! -f mnist.npz ]; then wget -N https://www.dropbox.com/s/qxywaq7nx19z72p/mnist.npz; else echo ""mnist.npz already downloaded""; fi'

 
code:
# Load the MNIST data. 

# Note that we reshape the data from:
#   (nsamples, num_features) = (nsamples, channels * height * width)
# to:
#   (nsamples, channels, height, width)
# in order to retain the spatial arrangements of the pixels.
', ""data = np.load('mnist.npz')"", 'channels, height, width = 1, 28, 28


def get_data(split, size):
    x = data[f""X_{split}""][:size].astype(\'float32\')
    x = x.reshape((-1, channels, height, width))
    targets = data[f""y_{split}""][:size].astype(\'int64\')
    return torch.from_numpy(x), torch.from_numpy(targets)",0.4606740474700928,notebook 3_4,1.0,"![MNIST.Exampel](../static_files/mnist.png)


## Primer', ""We use a feedforward neural network to classify the 28x28 mnist images. `num_features` is therefore $28 * 28=784$, i.e. we represent each image as a vector. The ordering of the pixels in the vector does not matter, so we could permutate all images using the same permutation and still get the same performance. (You are of course encouraged to try this using ``numpy.random.permutation`` to get a random permutation. This task is therefore called the _permutation invariant_ MNIST. Obviously this throws away a lot of structure in the data. In the next module we'll fix this with the convolutional neural network wich encodes prior knowledgde about data that has either spatial or temporal structure.  ""]'

 
markdown:
## MNIST', ""First let's load the MNIST dataset and plot a few examples:""]'

 
code:
mnist_trainset = MNIST(""./temp/"", train=True, download=True)
mnist_testset = MNIST(""./temp/"", train=False, download=True)'

 
code:
# To speed up training we'll only work on a subset of the data"", 'x_train = mnist_trainset.data[:1000].view(-1, 784).float()
targets_train = mnist_trainset.targets[:1000]

x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]",0.4753178358078003,notebook 7_1,4.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)",0.4847806692123413,notebook 7_1,5.0,"# The loaders perform the actual work
batch_size = 64
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.targets, classes), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.targets, classes), pin_memory=cuda)'

 
code:
# Plot a batch of MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
### Building the model
When defining the model the latent layer $z$ must act as a bottleneck of information. We initialize the AE with 1 hidden layer in the encoder and decoder using ReLU units as nonlinearities. The latent layer has a dimensionality of 2 in order to make it easy to visualise. Since $x$ are pixel intensities that are normalized between 0 and 1, we use the sigmoid nonlinearity to model the reconstruction.'

 
code:
import torch.nn as nn

# define size variables
num_features = 28*28",0.5083450078964233,notebook 3_4,2.0,"x_valid = mnist_trainset.data[1000:1500].view(-1, 784).float()
targets_valid = mnist_trainset.targets[1000:1500]

x_test = mnist_testset.data[:500].view(-1, 784).float()
targets_test = mnist_testset.targets[:500]

print(""Information on dataset"")
print(""x_train"", x_train.shape)
print(""targets_train"", targets_train.shape)
print(""x_valid"", x_valid.shape)
print(""targets_valid"", targets_valid.shape)
print(""x_test"", x_test.shape)
print(""targets_test"", targets_test.shape)'

 
code:
# plot a few MNIST examples
idx, dim, classes = 0, 28, 10
# create empty canvas
canvas = np.zeros((dim*classes, classes*dim))

# fill with tensors
for i in range(classes):
    for j in range(classes):
        canvas[i*dim:(i+1)*dim, j*dim:(j+1)*dim] = x_train[idx].reshape((dim, dim))
        idx += 1

# visualize matrix of tensors as gray scale image
plt.figure(figsize=(4, 4))', ""plt.axis('off')"", ""plt.imshow(canvas, cmap='gray')"", ""plt.title('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
## Model",0.5349578261375427,notebook 7_2,26.0,"**Exercise 1**: Import the `Bernoulli` from the [torch.distributions](https://pytorch.org/docs/stable/distributions.html) package.'

 
code:
# <- your code

p = Bernoulli(logits=torch.zeros((1000,)))
plt.figure(figsize=(12, 3))
sns.distplot(p.sample())
plt.title(r""$\\mathcal{B}(\\mathbf{y} \\mid \\mathbf{\\theta})$"")
plt.show()'

 
markdown:
## Dataset: MNIST

First let us load the MNIST dataset and plot a few examples. We only load a limited amount of classes, controlled through the `classes` variable, to speed up training.'

 
code:
from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
from functools import reduce

# Flatten the images into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)",0.5628479719161987,notebook 7_2,27.0,"batch_size = 64
eval_batch_size = 100
# The loaders perform the actual work
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.train_labels))
test_loader  = DataLoader(dset_test, batch_size=eval_batch_size, 
                          sampler=stratified_sampler(dset_test.test_labels))'

 
code:
#plot a few MNIST examples
f, axarr = plt.subplots(4, 16, figsize=(16, 4))

# Load a batch of images into memory
images, labels = next(iter(train_loader))

for i, ax in enumerate(axarr.flat):
    ax.imshow(images[i].view(28, 28), cmap=""binary_r"")', ""    ax.axis('off')"", '    ', ""plt.suptitle('MNIST handwritten digits')"", 'plt.show()'

 
markdown:
## Building the model
When defining the model the latent layer must act as a bottleneck of information, so that we ensure that we find a strong internal representation. We initialize the VAE with 1 hidden layer in the encoder and decoder using relu units as non-linearity.'",0.5667005777359009,notebook 3_4,0.0,"markdown:
# Credits
> This code is a slight modification to a translation (TensorFlow --> PyTorch) of a previous version of the [02456](http://kurser.dtu.dk/course/02456) course material. 
> [Original repo link (TensorFlow)](https://github.com/DeepLearningDTU/02456-deep-learning).
> [Translated repo link (PyTorch)](https://github.com/munkai/pytorch-tutorial/tree/master/2_intermediate).'

 
code:
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torch.nn.init as init

%matplotlib inline
import matplotlib
import numpy as np
import matplotlib.pyplot as plt

from torch.nn.parameter import Parameter
from torchvision.datasets import MNIST'

 
markdown:
# MNIST dataset
MNIST is a dataset that is often used for benchmarking. The MNIST dataset consists of 70,000 images of handwritten digits from 0-9. The dataset is split into a 50,000 images training set, 10,000 images validation set and 10,000 images test set. The images are 28x28 pixels, where each pixel represents a normalised value between 0-255 (0=black and 255=white).

![MNIST.Exampel](../static_files/mnist.png)",0.5710840225219727,notebook 7_3,1.0,"from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor
from functools import reduce

# The digit classes to use, these need to be in order because
# we are using one-hot representation
classes = np.arange(2)

def one_hot(labels):
    y = torch.eye(len(classes)) 
    return y[labels]

# Define the train and test sets
dset_train = MNIST(""./"", train=True, download=True, transform=ToTensor(), target_transform=one_hot)
dset_test  = MNIST(""./"", train=False, transform=ToTensor(), target_transform=one_hot)

def stratified_sampler(labels):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)


batch_size = 64
# The loaders perform the actual work
train_loader = DataLoader(dset_train, batch_size=batch_size,
                          sampler=stratified_sampler(dset_train.train_labels), pin_memory=cuda)
test_loader  = DataLoader(dset_test, batch_size=batch_size, 
                          sampler=stratified_sampler(dset_test.test_labels), pin_memory=cuda)'

 
markdown:
# Adversarial learning",0.5917090177536011,notebook 3_3,2.0,"def onehot(t, num_classes):
    out = np.zeros((t.shape[0], num_classes))
    for row, col in enumerate(t):
        out[row, col] = 1
    return out'

 
markdown:
# Problem ', ""We'll initally demonstrate that Multi-layer Perceptrons (MLPs) can classify nonlinear problems, whereas a simple logistic regression model cannot."", 'For ease of visualization and computational speed we initially experiment on the simple 2D half-moon dataset, visualized below.'

 
code:
# Generate a dataset and plot it
np.random.seed(0)
num_samples = 300

X, y = sklearn.datasets.make_moons(num_samples, noise=0.20)

# define train, validation, and test sets', ""X_tr = X[:100].astype('float32')"", ""X_val = X[100:200].astype('float32')"", ""X_te = X[200:].astype('float32')"", '
# and labels', ""y_tr = y[:100].astype('int32')"", ""y_val = y[100:200].astype('int32')"", ""y_te = y[200:].astype('int32')"", '
plt.scatter(X_tr[:,0], X_tr[:,1], s=40, c=y_tr, cmap=plt.cm.Spectral)

print(X.shape, y.shape)

num_features = X_tr.shape[-1]
num_output = 2'",0.6508048176765442,0.0,1.0,1.0,1.0,2.0,2.0,2.0,3.0,3.0,3.0
Which optimizers are mentioned in the exercise notebook?,"Optimizer and learning rate:
SGD + Momentum: learning rate 0.01 - 0.1
ADAM: learning rate 3e-4 - 1e-5
RMSPROP: somewhere between SGD and ADAM",notebook 3_4,notebook 5_3,27.0,"loss, grads = backward_pass(test_input, outputs, hidden_states, test_target, params)
', ""print('We get a loss of:')"", 'print(loss)'

 
markdown:
### Optimization'

 
markdown:
Now that we can do forward passes and compute gradients with backpropagation, we're ready to train our network. For that we will need an optimizer. A common and easy to implement optimization method is stochastic gradient descent (SGD), which has the update rule: $\\theta_{n+1} = \\theta_{n} - \\eta \\frac{\\partial E}{\\partial \\theta_{n}}$, where $\\eta$ is the learning rate and $E$ is our cost function. This is essentially what's going on behind the scenes when you run `optimizer.step()` in PyTorch using the SGD optimizer. If you want to learn more about optimization in a deep learning context, [this is a great starting point](https://arxiv.org/abs/1609.04747).""]'

 
code:
def update_parameters(params, grads, lr=1e-3):
    # Take a step
    for param, grad in zip(params, grads):
        param -= lr * grad
    
    return params'

 
markdown:
### Training loop'

 
markdown:
We need to define a full training loop with a forward pass, backward pass, optimization step and validation. Training will take approximately 5 minutes, so you might want to read on while the notebook is running.'

 
code:
import matplotlib.pyplot as plt
%matplotlib inline

# Hyper-parameters
num_epochs = 1000",0.6356408596038818,CoursePlan.txt,17.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.6521215438842773,notebook 3_3,10.0,"markdown:
The next step is to utilize our `optimizer` repeatedly in order to optimize our weights `W_1` and `b_1` to make the best possible linear seperation of the half moon dataset.'

 
code:
# number of training passses
num_epochs = 1000
# store loss and accuracy for information
train_losses, val_losses, train_accs, val_accs = [], [], [], []

def pred(X):
    """""" Compute graph\'s prediction and return numpy array
    
    Parameters
    ----------
    X : numpy.ndarray
    
    Returns
    -------
    numpy.ndarray
    """"""
    X = torch.from_numpy(X)
    y = net(X)
    return y.data.numpy()

# plot boundary on testset before training session
plot_decision_boundary(lambda x: pred(x), X_te, y_te)
plt.title(""Untrained Classifier"")",0.6538089513778687,notebook 8_3,2.0,"which is our final gradient estimator, also known as REINFORCE. In the Monte Carlo estimator we run the environment simulator for a predefined number of steps with actions chosen stochastically according to the current stochastic action network $p_\\theta(a|s)$.'

 
markdown:
*Note: For simple reinforcement learning problems (like the one we will address in this exercise) there are simpler methods that work just fine. However, the Policy Gradient method (with some extensions) has been shown to also work well for complex problems with high dimensional inputs and many parameters, where simple methods become inadequate.*'

 
markdown:
## Policy gradient'

 
code:
# Install colabgymrender to display gym environments in Colab
!pip install gym[classic_control] > /dev/null 2>&1
!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1
!pip install colabgymrender > /dev/null 2>&1
!pip install imageio==2.4.1 > /dev/null 2>&1'

 
code:
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import gym
from gym import wrappers
from colabgymrender.recorder import Recorder'

 
markdown:
First we create the environment:'

 
code:
env = gym.make('CartPole-v0') # Create environment""]'

 
markdown:
A state in this environment is four numbers describing the position and speed of the cart along with the angle and angular speed of the pole.",0.6574565172195435,notebook 7_2,34.0,"code:
vi = VariationalInference(beta=1.0)
loss, diagnostics, outputs = vi(vae, images)
print(f""{\'loss\':6} | mean = {loss:10.3f}, shape: {list(loss.shape)}"")
for key, tensor in diagnostics.items():
    print(f""{key:6} | mean = {tensor.mean():10.3f}, shape: {list(tensor.shape)}"")'

 
markdown:
## Training and Evaluation

### Initialize the model, evaluator and optimizer'

 
code:
from collections import defaultdict
# define the models, evaluator and optimizer

# VAE
latent_features = 2
vae = VariationalAutoencoder(images[0].shape, latent_features)

# Evaluator: Variational Inference
beta = 1
vi = VariationalInference(beta=beta)

# The Adam optimizer works really well with VAEs.
optimizer = torch.optim.Adam(vae.parameters(), lr=1e-3)

# define dictionary to store the training curves
training_data = defaultdict(list)
validation_data = defaultdict(list)

epoch = 0'

 
markdown:
### Training Loop

**plotting guide**:",0.6658404469490051,notebook 8_4_Q,6.0,"markdown:
## Exercises

Read and understand the code, then play around with it and try to make it learn better and faster.

Experiment with the:

* number of episodes
* discount factor
* learning rate
* network layers


### Exercise 1 

*Describe any changes you made to the code and why you think they improve the agent.*

**Answer:**

*Answer here...*

### Exercise 2

*How high mean training a reward is your solution able to achieve? Do you think it is possible to go even higher? Why/why not?*

**Answer:**

*Answer here...*

### Exercise 3

*What role does epsilon play in the code above? Try and change the epsilon start value or the line of code that decreases eplison every update step. How does it affect learning?*

**Answer:**

*Answer here...*'",0.6678510308265686,notebook 7_2,15.0,"At the end of the note book, we show that the following identity holds:

$$\\log p_\\theta(\\mathbf{x}) = \\mathcal{D}_{\\operatorname{KL}}(q_\\phi(\\mathbf{z} | \\mathbf{x}) | p_\\theta(\\mathbf{z}| \\mathbf{x})) + \\mathcal{L}(\\mathbf{x}) \\geq \\mathcal{L}(\\mathbf{x})$$

Hence maximizing the ELBO also guarantees to push the approximate posterior $q_\\phi(\\mathbf{z}| \\mathbf{x})$ to be similar to the true posterior  $p_\\theta(\\mathbf{z}| \\mathbf{x})$ because $\\mathcal{D}_{\\operatorname{KL}}(q_\\phi(\\mathbf{z} | \\mathbf{x}) | p_\\theta(\\mathbf{z}| \\mathbf{x}))$ is minimized as $\\mathcal{L}$ is maximized.

## 4. Interpreting VAEs as Autoencoders",0.674506664276123,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.6817409992218018,notebook 7_1,4.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)",0.6819021105766296,notebook 8_4_Q,4.0,"qnet.optimizer.step()
            # 6. bookkeeping
            s = s1
            ep_reward += r
            ep_loss += loss.item()
            if done: break
        # bookkeeping
        epsilon *= num_episodes/(i/(num_episodes/20)+num_episodes) # decrease epsilon
        epsilons.append(epsilon); rewards.append(ep_reward); lengths.append(j+1); losses.append(ep_loss)', ""        if (i+1) % val_freq == 0: print('{:5d} mean training reward: {:5.2f}'.format(i+1, np.mean(rewards[-val_freq:])))"", ""    print('done')"", 'except KeyboardInterrupt:', ""    print('interrupt')""]'",0.6852244138717651,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
Describe the model given in the exercise notebook?,"The provided code defines a PyTorch neural network for a classification task with the following characteristics:

It has two layers: an input layer and a hidden layer.
The activation function used is Exponential Linear Unit (ELU).
The network is designed for a classification task with 10 output classes.
The number of hidden units in the hidden layer is 512.
The number of input features is determined based on the shape of the input data .
The forward method defines how data flows through the network by applying linear transformations followed by ELU activation.",notebook 3_3,notebook 8_3,8.0,"code:
# plot results
def moving_average(a, n=10) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret / n

plt.figure(figsize=(16,6))
plt.subplot(211)', ""plt.plot(range(1, len(training_rewards)+1), training_rewards, label='training reward')"", 'plt.plot(moving_average(training_rewards))', ""plt.xlabel('episode'); plt.ylabel('reward')"", 'plt.xlim((0, len(training_rewards)))
plt.legend(loc=4); plt.grid()
plt.subplot(212)', ""plt.plot(range(1, len(losses)+1), losses, label='loss')"", 'plt.plot(moving_average(losses))', ""plt.xlabel('episode'); plt.ylabel('loss')"", 'plt.xlim((0, len(losses)))
plt.legend(loc=4); plt.grid()
plt.tight_layout(); plt.show()'

 
markdown:
Now let's review the solution!""]'

 
code:
env = Recorder(env, ""./gym-results"") # wrappers.Monitor(env, ""./gym-results"", force=True) # Create wrapper to display environment
s = env.reset()

for _ in range(500):
    a = policy(torch.from_numpy(np.atleast_2d(s)).float()).argmax().item()
    s, r, done, _ = env.step(a)
    if done: break
    
# env.close()
env.play()'

 
markdown:
## Reducing variance",0.5388060808181763,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.5614992380142212,notebook 8_4_Q,5.0,"code:
# plot results

def moving_average(a, n=10) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret / n

plt.figure(figsize=(16, 9))
plt.subplot(411)', ""plt.title('training rewards')"", 'plt.plot(range(1, num_episodes+1), rewards)
plt.plot(range(1, num_episodes+1), moving_average(rewards))
plt.xlim([0, num_episodes])
plt.subplot(412)', ""plt.title('training lengths')"", 'plt.plot(range(1, num_episodes+1), lengths)
plt.plot(range(1, num_episodes+1), moving_average(lengths))
plt.xlim([0, num_episodes])
plt.subplot(413)', ""plt.title('training loss')"", 'plt.plot(range(1, num_episodes+1), losses)
plt.plot(range(1, num_episodes+1), moving_average(losses))
plt.xlim([0, num_episodes])
plt.subplot(414)', ""plt.title('epsilon')"", 'plt.plot(range(1, num_episodes+1), epsilons)
plt.xlim([0, num_episodes])
plt.tight_layout(); plt.show()'

 
markdown:
Now let's review the solution! You can run the cell multiple times to see the behavior of the Q-network.""]'

 
code:
s = env.reset()
env.render()
for _ in range(100):
    a = qnet(torch.from_numpy(one_hot([s], n_inputs)).float()).argmax().item()
    s, r, done, _ = env.step(a)
    env.render()
    if done: break'",0.5781417489051819,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.5799086689949036,notebook 4_3,6.0,"code:
class Model(nn.Module):

    def __init__(self, num_classes):
        super().__init__()
        
        self.net = ...   # Your code here!

    def forward(self, x):
        return self.net(x)
    
    
model = Model(num_classes=len(np.unique(labels)))', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)
print(model)'

 
markdown:
## Define loss function and optimizer

**Assignment 2:** Implement the criterion and optimizer, as in the previous notebook.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 224, 224).to(device))
print(""Output shape:"", out.size())'

 
code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()",0.5801895260810852,notebook 3_3,3.0,"print(X.shape, y.shape)

num_features = X_tr.shape[-1]
num_output = 2'

 
markdown:
# From Logistic Regression to ""Deep Learning""
The code implements logistic regression. In section [__Assignments Half Moon__](#Assignments-Half-Moon) (bottom of this notebook) you are asked to modify the code into a neural network.

The standard building block for neural networks are layers, the simplest of which is called a *fully-connected layer* or *dense feed forward layer*, and it is computed as follows:

$$y = g(W^{\\top} x + b)$$

where $x$ is the input vector, $y$ is the output vector, $W, b$ are the weights and biases (a matrix and vector respectively) and $g$ is a non-linear function, called *activation function*.
The *dense* part of the name comes from the fact that every element of $x$ contributes to every element of $y$.
And the *feed forward* part of the name means that the layer processes each input independently. 
If we were to draw the layer it would be acyclical.
Later we will see layers that break from both of these conventions.'

 
markdown:
- $x$ has shape `[batch_size, num_features]`,
- $W$ has shape `[num_units, num_features]`,
- $b$ has `[num_units]`, and
- $y$ has then `[batch_size, num_units]`'

 
markdown:
## PyTorch 101",0.5915628671646118,notebook 8_5_Deep,7.0,"ep_reward += r
            ep_loss += loss.item()
            if d: break
        # bookkeeping
        epsilon *= num_episodes/(i/(num_episodes/20)+num_episodes) # decrease epsilon
        epsilons.append(epsilon); rewards.append(ep_reward); lengths.append(j+1); losses.append(ep_loss)', ""        if (i+1) % val_freq == 0: print('%5d mean training reward: %5.2f' % (i+1, np.mean(rewards[-val_freq:])))"", ""    print('done')"", 'except KeyboardInterrupt:', ""    print('interrupt')""]'",0.5944212675094604,notebook 4_2,3.0,"code:
class PrintSize(nn.Module):
    """"""Utility module to print current shape of a Tensor in Sequential, only at the first pass.""""""
    
    first = True
    
    def forward(self, x):
        if self.first:
            print(f""Size: {x.size()}"")
            self.first = False
        return x


class Model(nn.Module):
    def __init__(self, num_classes):
        super().__init__()
        self.num_classes = num_classes
        # Your code here!

    def forward(self, x):
        # Your code here!
        return x


model = Model(n_classes)', ""device = torch.device('cpu')  # use cuda or cpu"", 'model.to(device)
print(model)'

 
markdown:
## Define a loss function and optimizer

**Assignment 2:** Define the loss function and optimizer.
You might need to experiment a bit with the learning rate.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network

**Assignment 3:** Finish the training loop below. 
Start by using a small number of epochs (e.g. 2).
Even with a low number of epochs you should be able to see results that are better than chance.
When everything is working increase the number of epochs to find out how good your network really is.'",0.6037454605102539,notebook 8_5_Deep,2.0,"$$', ""\\theta' \\leftarrow \\tau \\, \\theta + (1-\\tau) \\, \\theta' \\ ,"", '$$

with $\\tau \\ll 1$.'

 
code:
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
import random
from collections import deque
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import gym'

 
code:
# initialize environment', ""env = gym.make('FrozenLake-v0')""]'

 
code:
# show initial state
s = env.reset()
env.render()'

 
markdown:
Let's define an experience replay memory that can be used to store new transitions and sample mini-batches of previous transitions. ""]'

 
code:
class ReplayMemory(object):
    """"""Experience Replay Memory""""""
    
    def __init__(self, capacity):
        #self.size = size
        self.memory = deque(maxlen=capacity)
    
    def add(self, *args):
        """"""Add experience to memory.""""""
        self.memory.append([*args])
    
    def sample(self, batch_size):
        """"""Sample batch of experiences from memory with replacement.""""""
        return random.sample(self.memory, batch_size)
    
    def count(self):
        return len(self.memory)'

 
markdown:
The Q-network is very similar to the one we have seen previously, but we add the possibility to update the parameters, so the same class can also be used as a target network.  '",0.6100271344184875,notebook 7_2,36.0,"* 2nd row: Training curves

* 2rd row: Latent samples. 
    * (Left) Prior samples $\\mathbf{x} \\sim p_\\theta(\\mathbf{x} | \\mathbf{z}), \\mathbf{z} \\sim p(\\mathbf{z})$ 
    * (Middle) Latent Interpolations. For each row: $\\mathbf{x} \\sim p_\\theta(\\mathbf{x} | t \\cdot \\mathbf{z}_1 + (1-t) \\cdot \\mathbf{z}_2), \\mathbf{z}_1, \\mathbf{z}_2 \\sim p(\\mathbf{z}), t=0 \\dots 1$. 
    * (Right): Sampling $\\mathbf{z}$ from a grid [-3:3, -3:3] $\\mathbf{x} \\sim p_\\theta(\\mathbf{x} | \\mathbf{z}), \\mathbf{z} \\sim \\operatorname{grid}(-3:3, -3:3)$ (only available for 2d latent space).

**NOTE** this will take a while on CPU.'

 
code:
num_epochs = 100

device = torch.device(""cuda:0"" if torch.cuda.is_available() else ""cpu"")
print(f"">> Using device: {device}"")

# move the model to the device
vae = vae.to(device)",0.6111752986907959,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,1.0
"What is the initial assignment in exercise notebook 3.4-EXE-FFN-MNIST.ipynb, and what are the steps to execute it?","The first task is to use Kaiming He initialization instead of Xavier Glorot.
In order to implement this task:
We replace the Xavier initialization for self.W_1 and self.W_2 with init.kaiming_normal_, which initializes the weight matrices using the Kaiming He initialization method suitable for ReLU activation.
Code:
<code>",notebook 3_4,CoursePlan.txt,10.0,"Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io.",0.5273053646087646,notebook 5_2,35.0,"markdown:
## Exercise h) Make the LSTMLayer class

Make the LSTM class.'

 
code:
# Insert code here

class LSTMLayer:
    def __init__(self, n_in: int, n_hid: int, act_fn, initializer = NormalInitializer(), initializer_hid = NormalInitializer()):
        self.n_in = n_in
        self.n_hid = n_hid
        self.g_layer = 
        self.i_layer = 
        self.f_layer = 
        self.o_layer = 
        self.initial_hid = [Var(0.0) for _ in range(n_hid)]
        self.stored_hid = [Var(0.0) for _ in range(n_hid)]
        self.initial_c = [Var(0.0) for _ in range(n_hid)]
        self.stored_c = [Var(0.0) for _ in range(n_hid)]
        self.act_fn = act_fn
    
    def __repr__(self):    ', ""        return 'Feed-forward: ' + repr(self.in_hid_layer) + ' Candidate: ' + repr(self.g_layer) + ' i gate ' + repr(self.i_layer) + ' f gate ' + repr(self.f_layer) + ' o gate ' + repr(self.o_layer) + ' Initial hidden: ' + repr(self.initial_hid)"", '
    def parameters(self) -> Sequence[Var]:      
      return self.in_hid_layer.parameters() + self.g_layer.parameters() + self.i_layer.parameters() + self.f_layer.parameters() + self.o_layer.parameters() + self.initial_hid",0.6270817518234253,notebook 8_4_Q,6.0,"markdown:
## Exercises

Read and understand the code, then play around with it and try to make it learn better and faster.

Experiment with the:

* number of episodes
* discount factor
* learning rate
* network layers


### Exercise 1 

*Describe any changes you made to the code and why you think they improve the agent.*

**Answer:**

*Answer here...*

### Exercise 2

*How high mean training a reward is your solution able to achieve? Do you think it is possible to go even higher? Why/why not?*

**Answer:**

*Answer here...*

### Exercise 3

*What role does epsilon play in the code above? Try and change the epsilon start value or the line of code that decreases eplison every update step. How does it affect learning?*

**Answer:**

*Answer here...*'",0.6313214898109436,notebook 8_2_Prerequisites_ipynb,1.0,"```
git clone https://github.com/openai/gym.git
cd gym
pip install -e .
```

If you run in Colab, you can do a quick pip install of Gym in the cell below:'

 
code:
!pip install gym[classic_control] > /dev/null 2>&1
!apt-get install -y xvfb python-opengl ffmpeg > /dev/null 2>&1
!pip install colabgymrender > /dev/null 2>&1
!pip install imageio==2.4.1 > /dev/null 2>&1'

 
markdown:
You will also need an installation of `ffmpeg` locally. If you do not have it installed already, you can install it by one of the following commands depending on your system:

```sudo apt-get install ffmpeg``` (Linux)

```conda install -c conda-forge ffmpeg``` (Anaconda)'

 
markdown:
## Running an environment

Here is a bare minimum example of running a Gym environment. This creates an instance of the [CartPole-v0](https://gym.openai.com/envs/CartPole-v0) environment and runs until the rollout is done, taking random actions and rendering the environment at each step. With Gym installed, you should be able to see a small animation of the environment below.'

 
code:
import gym
from gym import wrappers
from colabgymrender.recorder import Recorder
', ""env = gym.make('CartPole-v0') # Create the environment"", ""directory = './video' # Directory for the recorded video"", 'env = Recorder(env, directory)
env.reset() # Reset environment",0.632297158241272,notebook 4_3,6.0,"code:
class Model(nn.Module):

    def __init__(self, num_classes):
        super().__init__()
        
        self.net = ...   # Your code here!

    def forward(self, x):
        return self.net(x)
    
    
model = Model(num_classes=len(np.unique(labels)))', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)
print(model)'

 
markdown:
## Define loss function and optimizer

**Assignment 2:** Implement the criterion and optimizer, as in the previous notebook.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 224, 224).to(device))
print(""Output shape:"", out.size())'

 
code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()",0.634454607963562,notebook 7_1,4.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)",0.6455936431884766,notebook 3_4,6.0,"code:
# Illustrate different output units
x = np.linspace(-6, 6, 100)
units = {
    ""ReLU"": lambda x: np.maximum(0, x),
    ""Leaky ReLU"": lambda x: np.maximum(0, x) + 0.1 * np.minimum(0, x),
    ""Elu"": lambda x: (x > 0) * x + (1 - (x > 0)) * (np.exp(x) - 1),
    ""Sigmoid"": lambda x: (1 + np.exp(-x))**(-1),
    ""tanh"": lambda x: (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))
}

plt.figure(figsize=(5, 5))
[plt.plot(x, unit(x), label=unit_name, lw=2) for unit_name, unit in units.items()]
plt.legend(loc=2, fontsize=16)', ""plt.title('Non-linearities', fontsize=20)"", 'plt.ylim([-2, 5])
plt.xlim([-6, 6])

# assert that all class probablities sum to one
softmax = lambda x: np.exp(x) / np.sum(np.exp(x))
print(""softmax should sum to one (approxiamtely):"", np.sum(softmax(x)))'

 
code:
#Hyperparameters
num_classes = 10
num_l1 = 512
num_features = x_train.shape[1]

# define network
class Net(nn.Module):",0.6471426486968994,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.6472707986831665,notebook 8_3,8.0,"code:
# plot results
def moving_average(a, n=10) :
    ret = np.cumsum(a, dtype=float)
    ret[n:] = ret[n:] - ret[:-n]
    return ret / n

plt.figure(figsize=(16,6))
plt.subplot(211)', ""plt.plot(range(1, len(training_rewards)+1), training_rewards, label='training reward')"", 'plt.plot(moving_average(training_rewards))', ""plt.xlabel('episode'); plt.ylabel('reward')"", 'plt.xlim((0, len(training_rewards)))
plt.legend(loc=4); plt.grid()
plt.subplot(212)', ""plt.plot(range(1, len(losses)+1), losses, label='loss')"", 'plt.plot(moving_average(losses))', ""plt.xlabel('episode'); plt.ylabel('loss')"", 'plt.xlim((0, len(losses)))
plt.legend(loc=4); plt.grid()
plt.tight_layout(); plt.show()'

 
markdown:
Now let's review the solution!""]'

 
code:
env = Recorder(env, ""./gym-results"") # wrappers.Monitor(env, ""./gym-results"", force=True) # Create wrapper to display environment
s = env.reset()

for _ in range(500):
    a = policy(torch.from_numpy(np.atleast_2d(s)).float()).argmax().item()
    s, r, done, _ = env.step(a)
    if done: break
    
# env.close()
env.play()'

 
markdown:
## Reducing variance",0.6508973836898804,notebook 8_4_Q,3.0,"try:
    epsilon = epsilon_start
    rewards, lengths, losses, epsilons = [], [], [], []', ""    print('start training')"", '    for i in range(num_episodes):
        # init new episode
        s, ep_reward, ep_loss = env.reset(), 0, 0
        for j in range(episode_limit):
            # 1. do foward pass of current state to compute Q-values for all actions
            qnet.optimizer.zero_grad()
            Q = qnet(torch.from_numpy(one_hot([s], n_inputs)).float())
            # 2. select action with epsilon-greedy strategy
            a = Q.argmax().item() if np.random.rand() > epsilon else env.action_space.sample()
            s1, r, done, _ = env.step(a)
            # 3. do forward pass for the next state
            with torch.no_grad():
                Q1 = qnet(torch.from_numpy(one_hot([s1], n_inputs)).float())
            # 4. set Q-target
            q_target = Q.clone()
            q_target[0, a] = r + gamma * Q1.max().item() * (not done)
            # 5. update network weights
            loss = qnet.loss(Q, q_target)
            loss.backward()
            qnet.optimizer.step()
            # 6. bookkeeping
            s = s1
            ep_reward += r
            ep_loss += loss.item()
            if done: break
        # bookkeeping",0.6551485061645508,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0
What do we expect to learn from week4?,"In this lab, we will learn how to create your own convolutional classifier for different datasets, and the technologies to improve the performance of your convolutional classifier. ","notebook 4_1, notebook 4_2",CoursePlan.txt,12.0,"and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures",0.6459096670150757,CoursePlan.txt,17.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.6697936058044434,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.6975386142730713,CoursePlan.txt,15.0,"Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.",0.7144384384155273,CoursePlan.txt,16.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima",0.7169805765151978,notebook 8_4_Q,6.0,"markdown:
## Exercises

Read and understand the code, then play around with it and try to make it learn better and faster.

Experiment with the:

* number of episodes
* discount factor
* learning rate
* network layers


### Exercise 1 

*Describe any changes you made to the code and why you think they improve the agent.*

**Answer:**

*Answer here...*

### Exercise 2

*How high mean training a reward is your solution able to achieve? Do you think it is possible to go even higher? Why/why not?*

**Answer:**

*Answer here...*

### Exercise 3

*What role does epsilon play in the code above? Try and change the epsilon start value or the line of code that decreases eplison every update step. How does it affect learning?*

**Answer:**

*Answer here...*'",0.7248551845550537,CoursePlan.txt,9.0,"During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.",0.7523404359817505,CoursePlan.txt,8.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.",0.7644559144973755,CoursePlan.txt,13.0,"Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.7746931314468384,CoursePlan.txt,14.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures",0.7760301828384399,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
What is CIFAR-10 dataset?,The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes.,notebook 4_2,notebook 4_2,0.0,"markdown:
# CNN on CIFAR-10

In this notebook you need to put what you have learned into practice, and create your own convolutional classifier for the CIFAR-10 dataset.

The images in CIFAR-10 are RGB images (3 channels) with size 32x32 (so they have size 3x32x32). There are 10 different classes. See examples below.

![cifar10](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/cifar10.png?raw=1)'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import TensorDataset, DataLoader
import torchvision
import torchvision.transforms as transforms
from torchvision.utils import make_grid
from sklearn import metrics

sns.set_style(""whitegrid"")

def accuracy(target, pred):
    return metrics.accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def compute_confusion_matrix(target, pred, normalize=None):
    return metrics.confusion_matrix(
        target.detach().cpu().numpy(), 
        pred.detach().cpu().numpy(),
        normalize=normalize
    )",0.45681536197662354,notebook 4_3,0.0,"markdown:
# Transfer learning on the Caltech101 dataset

In this notebook, we will consider a more complex dataset than MNIST or CIFAR10. The images in Caltech101 are RGB images (3 channels) with variable size. There are 101 different classes. We will try a very common practice in computer vision nowadays: transfer learning from a pre-trained ImageNet model. 

Roadmap:
- Modify the network from the previous exercise (CIFAR-10) to work with 224x224 images.
- Train the model for a while on Caltech101 and see how far we can get.
- Take a ResNet34 that was pre-trained on ImageNet-1k and fine-tune it to Caltech101.
  - Consider both training only the head (the linear classifier at the end of the network) or the entire network.
  - We should be able to reach better performance than our original network in fewer training steps.
- Optional: play around with other pre-trained models from `timm` (see info [here](https://github.com/rwightman/pytorch-image-models)).'

 
markdown:
## Preliminaries'

 
code:
%matplotlib inline
from typing import List, Optional, Callable, Iterator
import random
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import torch
from torch import nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
from torchvision import transforms
from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, Dataset, Subset

sns.set_style(""whitegrid"")

!pip install timm
import timm",0.6685546040534973,notebook 5_3,8.0,"# Create datasets
    training_set = dataset_class(inputs_train, targets_train)
    validation_set = dataset_class(inputs_val, targets_val)
    test_set = dataset_class(inputs_test, targets_test)

    return training_set, validation_set, test_set
    

training_set, validation_set, test_set = create_datasets(sequences, Dataset)
', ""print(f'We have {len(training_set)} samples in the training set.')"", ""print(f'We have {len(validation_set)} samples in the validation set.')"", ""print(f'We have {len(test_set)} samples in the test set.')""]'

 
markdown:
When working with more complex data than what we use in this exercise, creating a PyTorch `DataLoader` on top of the dataset can be beneficial. A data loader is basically a fancy generator/iterator that we can use to abstract away all of the data handling and pre-processing + it's super useful for processing batches of data as well! Data loaders will come in handy later when you start to work on your projects, so be sure to check them out!"", '
For more information on how to use datasets and data loaders in PyTorch, [consult the official guide](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html).'

 
markdown:
## One-hot encodings'

 
markdown:
We now create a simple function that returns the one-hot encoded representation of a given index of a word in our vocabulary. Notice that the shape of the one-hot encoding is equal to the entire vocabulary (which can be huge!). Additionally, we define a function to automatically one-hot encode a sentence.'",0.6805981397628784,notebook 4_3,1.0,"from sklearn.metrics import accuracy_score
from torch.utils.data import DataLoader, Dataset, Subset

sns.set_style(""whitegrid"")

!pip install timm
import timm

def accuracy(target, pred):
    return accuracy_score(target.detach().cpu().numpy(), pred.detach().cpu().numpy())

def show_image(img, title=None):
    img = img.detach().cpu()
    img = img.permute((1, 2, 0)).numpy()
    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])
    img = std * img + mean   # unnormalize
    img = np.clip(img, 0, 1)
    plt.imshow(img)
    plt.gca().tick_params(axis=""both"", which=""both"", bottom=False, left=False, labelbottom=False, labelleft=False)
    if title is not None:
        plt.title(title)'

 
markdown:
### Set up dataset'",0.7196834087371826,notebook 7_1,4.0,"<img src=""static/autoencoder.png"" />

*The exercises are found at the bottom of the notebook*'

 
markdown:
## MNIST
First let us load the MNIST dataset and plot a few examples. In this notebook we will use the *dataloaders* and *datasets* provided by PyTorch. Defining the loading of datasets using a dataloader has the advantage that it only load the data that is *neccessary* into memory, which enables us to use very large scale datasets.

We only load a limited amount of classes defined by the `classes` variable to speed up training.'

 
code:
import torch
cuda = torch.cuda.is_available()

from torch.utils.data import DataLoader
from torch.utils.data.sampler import SubsetRandomSampler
from torchvision.datasets import MNIST
from torchvision.transforms import ToTensor

# Flatten the 2d-array image into a vector
flatten = lambda x: ToTensor()(x).view(28**2)

# Define the train and test sets
dset_train = MNIST(""./"", train=True,  transform=flatten, download=True)
dset_test  = MNIST(""./"", train=False, transform=flatten)

# The digit classes to use
classes = [3, 7]

def stratified_sampler(labels, classes):
    """"""Sampler that only picks datapoints corresponding to the specified classes""""""
    from functools import reduce
    (indices,) = np.where(reduce(lambda x, y: x | y, [labels.numpy() == i for i in classes]))
    indices = torch.from_numpy(indices)
    return SubsetRandomSampler(indices)",0.723526120185852,notebook 7_1,11.0,"indices = torch.from_numpy(indices)
    sampler = SubsetRandomSampler(indices)
    return sampler


batch_size = 64

# Specify how many labelled examples we want per digit class
labels_per_class = 10

# Large pool of unlabelled data
unlabelled = DataLoader(dset_train, batch_size=batch_size, 
                        sampler=stratified_sampler(dset_train.train_labels, classes=classes), pin_memory=cuda)

# Smaller pool of labelled data
labelled = DataLoader(dset_train, batch_size=batch_size,
                      sampler=uniform_stratified_sampler(dset_train.train_labels, classes=classes, n=labels_per_class),
                      pin_memory=cuda)'

 
code:
from itertools import cycle

# This is an example of how you can use both the labelled
# and unlabelled loader in unison

### Define your classifier ###

num_epochs = 100
for epoch in range(num_epochs):
    
    # Go through both labelled and unlabelled data
    for (x, y), (u, _) in zip(cycle(labelled), unlabelled):
        
        if cuda:
            x, y, u = x.cuda(), y.cuda(), u.cuda()
        
        # Send labelled data through autoencoder
        outputs = net(x)

        ### Define your loss function ###
        loss = 0
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()'

 
code:
'[]'",0.7254583835601807,notebook 5_1,38.0,"$$
\\mathrm{vec(""Capital\\,city\\,of\\,the\\,query\\,country"")} =  \\mathrm{vec(""Query\\,country"")} + \\underbrace{\\mathrm{Attention}(\\mathrm{vec(""Query\\,country"")}, \\mathbf{K}, \\mathbf{V})}_{\\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i}
$$
', ""First, let's investigate the attention weights $\\lambda_1, \\ldots, \\lambda_{T_{\\mathbf{K}\\mathbf{V}}}$ for each query $\\mathbf{q}_1, \\ldots, \\mathbf{q}_\\mathbf{Q} $ separately:""]'

 
code:
# instantiate some embeddings
embeddings = torch.nn.Embedding(*glove_vectors.shape)
embeddings.weight.data = glove_vectors
embeddings.weight.requires_grad = False

def names_to_vectors(values: List[str]) -> torch.Tensor:
    encodings = glove_tokenizer.encode_batch(values)
    vectors = [embeddings(torch.tensor(e.ids)).mean(dim=0) for e in encodings]
    return torch.stack(vectors)",0.730130672454834,notebook 7_2,37.0,"device = torch.device(""cuda:0"" if torch.cuda.is_available() else ""cpu"")
print(f"">> Using device: {device}"")

# move the model to the device
vae = vae.to(device)

# training..
while epoch < num_epochs:
    epoch+= 1
    training_epoch_data = defaultdict(list)
    vae.train()
    
    # Go through each batch in the training dataset using the loader
    # Note that y is not necessarily known as it is here
    for x, y in train_loader:
        x = x.to(device)
        
        # perform a forward pass through the model and compute the ELBO
        loss, diagnostics, outputs = vi(vae, x)
        
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        # gather data for the current bach
        for k, v in diagnostics.items():
            training_epoch_data[k] += [v.mean().item()]
            

    # gather data for the full epoch
    for k, v in training_epoch_data.items():
        training_data[k] += [np.mean(training_epoch_data[k])]",0.7360410690307617,notebook 4_1,4.0,"from sklearn.metrics import accuracy_score
from torch.utils.data import TensorDataset, DataLoader
from torchvision.utils import make_grid

sns.set_style(""whitegrid"")'

 
markdown:
# Load MNIST data

The code below downloads and loads the same MNIST dataset as before.
Note however that the data has a different shape this time: `(num_samples, num_channels, height, width)`.'

 
code:
# Download the MNIST dataset, if you have not already.
!if [ ! -f mnist.npz ]; then wget -N https://www.dropbox.com/s/qxywaq7nx19z72p/mnist.npz; else echo ""mnist.npz already downloaded""; fi'

 
code:
# Load the MNIST data. 

# Note that we reshape the data from:
#   (nsamples, num_features) = (nsamples, channels * height * width)
# to:
#   (nsamples, channels, height, width)
# in order to retain the spatial arrangements of the pixels.
', ""data = np.load('mnist.npz')"", 'channels, height, width = 1, 28, 28


def get_data(split, size):
    x = data[f""X_{split}""][:size].astype(\'float32\')
    x = x.reshape((-1, channels, height, width))
    targets = data[f""y_{split}""][:size].astype(\'int64\')
    return torch.from_numpy(x), torch.from_numpy(targets)",0.7409907579421997,notebook 4_2,2.0,"# Map from class index to class name.
classes = {index: name for name, index in train_set.class_to_idx.items()}'

 
code:
print(""Training data"")
print(""Number of points:"", len(train_set))
x, y = next(iter(train_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(train_set.targets))} (unique labels: {set(train_set.targets)})"")

print(""\Test data"")
print(""Number of points:"", len(test_set))
x, y = next(iter(test_loader))
print(""Batch dimension (B x C x H x W):"", x.shape)
print(f""Number of distinct labels: {len(set(test_set.targets))} (unique labels: {set(test_set.targets)})"")

n_classes = len(set(test_set.targets))'

 
markdown:
### Show example images

Run multiple times to see different examples.'

 
code:
# Get random training images and show them.
images, labels = next(iter(train_loader))
show_image(torchvision.utils.make_grid(images))'

 
markdown:
## Define a convolutional neural network


**Assignment 1:** Define a convolutional neural network. 
You may use the code from previous notebooks.
We suggest that you start with a small network, and make sure that everything is working.
Once you can train successfully, come back and improve the architecture.'",0.7417075634002686,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,2.0
What are convolutional neural networks?,"The standard ConvNets are organised into layers. Each layer is parameterized by weights and biases. Each layer has an element-wise activation function, and there are no cycles in the connections. In ConvNets, each unit is only connected to a small subset of the input units, which is called the receptive field of the unit. ",notebook 4_1,notebook 4_1,0.0,"markdown:
# Convolutional neural networks 101

Convolution neural networks are one of the most successful types of neural networks for image recognition and an integral part of reigniting the interest in neural networks. They are able to extract structural relations in the data, such as spatial in images or temporal in time series.

In this lab, we will experiment with inserting 2D-convolution layers in the fully connected neural networks introduced previously. We will also try to visualize the learned convolution filters and try to understand what kind of features they learn to recognize.
', ""If you have not watched Jason Yosinski's [video on visualizing convolutional networks](https://www.youtube.com/watch?v=AgkfIQ4IGaM), you definitely should do so now. If you are unfamiliar with the convolution operation, [Vincent Dumoulin](https://github.com/vdumoulin/conv_arithmetic) has a nice visualization of different convolution variants. For a more in-depth tutorial, please see http://cs231n.github.io/convolutional-networks/ or http://neuralnetworksanddeeplearning.com/chap6.html.""]'

 
markdown:
## Reminder: what are convolutional networks?

Standard ConvNets are, in many respects, very similar to the dense feedforward networks we saw previously:
 * The network is still organized into layers.
 * Each layer is parameterized by weights and biases.
 * Each layer has an element-wise non-linear transformation (activation function).
 * There are no cycles in the connections (more on this in later labs).",0.31723588705062866,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.4196852147579193,notebook 4_1,10.0,"3. We now have a deeper network than the initial simple feedforward network. What happens if we replace all convolutional layers with linear layers? Is this deep feedforward network performing as well as the convolutional one?
 
4. Max-pooling is a technique for decreasing the spatial resolution of an image while retaining the important features. Effectively this gives a local translational invariance and reduces the computation by a factor of four. In the classification algorithm which is usually desirable. You can either: 
 
   - add a maxpool layer (see the PyTorch docs, and try with kernel_size=2 and stride=2) after the convolution layer, or
   - add stride=2 to the arguments of the convolution layer directly.
     
  Verify that this decreases the spatial dimension of the image (insert a `PrintSize` module in the `Sequential`). Does this increase the performance of the network? Note that, to increase performance, you may need to stack multiple layers, increase the number of filters, or tune the learning rate.

5. Dropout is a very useful technique for preventing overfitting. Try to add a DropoutLayer after some of the convolution layers. You may observe a higher validation accuracy but lower train accuracy. Can you explain why this might be the case?
 
6. Batch normalization may help convergence in larger networks as well as generalization performance. Try to insert batch normalization layers into the network.'

 
markdown:
Again, if you didn't already, you really should [watch this video](https://www.youtube.com/watch?v=AgkfIQ4IGaM).""]'",0.5012716054916382,notebook 5_1,3.0,"___
## Introduction

Since its introduction ([""Attention is All You Need"", Wasrani et al. (2016)](https://arxiv.org/abs/1706.03762)), Transformers have overtaken the field of Machine Learning. Initially applied to translation tasks, Transformers pre-trained on vast amounts of unlabelled data such as BERT and GPT have been acquired as central components in most of the modern natural language processing (NLP) systems. Transformers power question answering (QA) models, machine translation services, search engines and chat bots. Independently of the language applications, the Transformer is also a versatile neural architecture and, therefore, has found success outside the field of NLP. Transformers are rapidly being adopted in image processing ([""An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale"", Dosovitskiy et al. (2021)](https://arxiv.org/abs/2010.11929)), in reinforcement learning ([""A Generalist Agent"", Reed et al. (2022)](https://arxiv.org/abs/2205.06175)), video generation ([""VideoGPT: Video Generation using VQ-VAE and Transformers"", Yan et al. (2021)](https://arxiv.org/abs/2104.10157)), and more. In the following sections, we will first introduce the basics of NLP (tokenization, token embeddings, language modelling), introduce the attention mechanism. In the second part, we will study the Transformer architecture and apply it to NLP tasks.

___
## I. Text to vectors",0.5406812429428101,notebook 5_1,57.0,"**Feed-forward** The multi-head attention layer allows looking up multiple positions of the input sequence, but the output is only a linear combination of the value vector $\\mathbf{V}$. A multi-layer neural network (feed-forward layer) is applied **element-wise** to each element of the sequence of hidden states to allow modelling more complex non-linear dependencies.

**Add & Norm** A Transformer is a deep neural network, and therefore might be difficult to optimize. Similarly deep neural networks in the image processing field, Transformer layer rely on two stabilizing components:
1. [Residual connections](https://arxiv.org/abs/1512.03385) allow to bypass the attention layer as well as the feed-forward layer.
2. [Layer normalization](https://arxiv.org/abs/1607.06450): allow enforcing that the output of a Transformer layer has values that are properly distributed

**Implementation:** Here is an implementation for the attention and multi-head attention. You can also check the official [PyTorch implementation](https://pytorch.org/docs/stable/_modules/torch/nn/modules/activation.html#MultiheadAttention).'",0.5686467885971069,notebook 5_1,4.0,"___
## I. Text to vectors

In the previous labs, we have applied deep learning to processing images encoded as RGB pixels. We found that processing arrays of RGB pixels using convolutional neural network was effective. In NLP, other neural interfaces are required to enable plugging text into neural networks. Raw text cannot trivially be plugged-in neural networks. In this section we show how to convert text units or *tokens* into vectors and introduce the notion of text vector spaces.

### I.a. Tokenization

In [alphabetic languages](https://en.wikipedia.org/wiki/List_of_writing_systems), text can be decomposed into various types of units or *tokens*: characters, syllables, words or even sentences. Each tokenization system comes with vocabulary $\\mathcal{V}$ that references all known symbols.",0.5707260966300964,notebook 4_1,1.0,"*So what is the difference?*
The networks we saw previously are called *dense* because each unit receives input from all the units in the previous layer. This is not the case for ConvNets. In ConvNets each unit is only connected to a small subset of the input units. This is called the *receptive field* of the unit.

#### Example
The input (green matrix) is a tensor of size `1x5x5` -- i.e. it has one ""channel"" (like a grayscale image), and the feature map has size `5x5`. Let us define a `1x3x3` kernel (yellow submatrix). The kernel weights are indicated in red at the bottom right of each element. The computation can be thought of as an elementwise multiplication followed by a sum. Here we use a *stride* of 1, as shown in this animation:

<img src=""https://raw.githubusercontent.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/master/4_Convolutional/images/convolutions.gif"" style=""width: 400px;""/>

GIF courtesy of [Stanford](http://deeplearning.stanford.edu/wiki/index.php/Feature_extraction_using_convolution)

After having convolved the image, we perform an elementwise non-linear transformation on the *convolved features*.
In this example, the input is a 2D *feature map* with depth 1.'

 
markdown:
# Assignment 1

### Assignment 1.1: Manual calculations

Perform the following computation, and write the result below.",0.581548273563385,notebook 7_4,11.0,"|-|Autoregressive|Variational Autoencoders|Generative Adversarial Networks|Flows|
|-|--------------|---|---|---|
|Objective|log-likelihood (stable)|doubly stochastic ELBO (stable)|approximate adversarial loss (unstable)|log-likelihood (stable)|
|Latent space|None|dimension collapsing|low dimensional|high-dimensional|
|Architecture|requires ordering, arbitrary data|arbitrary|arbitrary, continuous data|requires partitioning (NVP), continuous data|'

 
code:
'[]'",0.5877605676651001,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.5886116623878479,CoursePlan.txt,9.0,"During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.",0.6045852303504944,1.0,1.0,2.0,2.0,2.0,2.0,3.0,3.0,3.0,3.0
Can you provide some suggestions to improve the model’s performance?,"Tell us something like increase the depth of the network, modify the convolutional layer parameters(number of filters, filter sizes and strides), pooling layers, batch normalization,  change the learning rate, dropout or weight regularization.",notebook 4_2,notebook 4_2,8.0,"markdown:
**Assignment 4:** 
1. Go back and improve performance of the network. By using enough convolutional layers with enough channels (and by training for long enough), you should easily be able to get a test accuracy above 60%, but see how much further you can get it! Can you reach 70%?

2. Briefly describe what you did and any experiments you did along the way as well as what results you obtained.
Did anything surprise you during the exercise?
What were the changes that seemed to improve performance the most?

3. Write down key lessons/insights you got during this exercise.

**Answer:**'

 
markdown:
# Training on GPU

**Optional Assignment:**
If you have a GPU, we suggest that you try training your model on GPU. For this, you need to move the model to GPU after defining it, which will recursively go over all modules and convert their parameters and buffers to CUDA tensors. You also need to transfer both the inputs and targets to GPU at each training step, before performing the forward pass.
', ""The code for this is already in place: notice the `.to(device)` statements. The only thing left to do is change the definition of `device` from `'cpu'` to `'cuda'`."", '', ""If you don't have a GPU, you can do this on [Google Colab](https://research.google.com/colaboratory/)."", '
Use the code below to check if any GPU is avaiable in your current setup. This should print the models of all available GPUs.'",0.5843995809555054,notebook 4_3,12.0,"num_trainable_model_parameters = 0
    for p in model.parameters():
        if p.requires_grad:
            num_trainable_model_parameters += p.numel()

    return model, {
        ""num_model_parameters"": num_model_parameters,
        ""num_trainable_model_parameters"": num_trainable_model_parameters,
    }
', ""model, data = initialize_model('resnet34d', num_classes=len(np.unique(labels)), finetune_entire_model=False)"", '
print(model)
print(""Number of model parameters:"", data[""num_model_parameters""])
print(""Number of trainable parameters:"", data[""num_trainable_model_parameters""])
', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)'

 
markdown:
**Assignment 3:** 

1. Train the linear classifier on top of the pre-trained network, and observe how quickly you can get pretty good results, compared to training a smaller network from scratch as above.

2. Go back and change argument to finetune entire network, maybe adjust learning rate, see if you can get better performance than before and if you run into any issues.

3. Optional: experiment with `timm`: try smaller or larger models, including state-of-the-art models, e.g. based on vision transformers (ViT) or MLP-Mixers.

4. Briefly describe what you did and any experiments you did along the way as well as what results you obtained.
Did anything surprise you during the exercise?

5. Write down key lessons/insights you got during this exercise.'

 
code:
'[]'",0.6295806765556335,notebook 4_2,9.0,"code:
# Check if we have GPUs available
print(""Available CUDA devices:"", [torch.cuda.get_device_name(i) for i in range(torch.cuda.device_count())])'

 
markdown:
You may not notice any significant speed-up from using a GPU. This is probably because your network is really small. Try increasing the width of your network (number of channels in the convolutional layers) and see if you observe any speed-up on GPU compared to CPU.'

 
markdown:
# Exercise from Michael Nielsen's book"", '', ""**Assignment 5:** Pick an exercise of your own choice from [Michael Nielsen's book](http://neuralnetworksanddeeplearning.com/)."", '
**Answer:**


'

 
code:
'[]'",0.6541720628738403,notebook 7_4,9.0,"code:
import os

tmp_img = ""tmp_nvp_out.png""
losses = []

x = x.to(device)

for epoch in range(2500):
    z, log_det_J = model(x)
    
    # Loss function
    loss = -torch.mean(base.log_prob(z) + log_det_J)
    
    optimizer.zero_grad()
    loss.backward(retain_graph=True)
    optimizer.step()
    
    losses.append(loss.item())
    
    # -- Plotting --
    if epoch % 50 == 0:
        with torch.no_grad():
            z = base.sample((n_samples,))
            z_hat, _ = model.forward(x)
            x_hat, _ = model.inverse(z)
        
        f, axarr = plt.subplots(1, 3, figsize=(18, 6))

        # Loss
        ax = axarr[0]', ""        ax.set_xlabel('Epoch')"", ""        ax.set_ylabel('Negative log likelihood')"", '        ax.plot(np.arange(epoch+1), losses, color=""black"")

        # Data space
        ax = axarr[1]
        ax.set_title(""Data space"")
        ax.scatter(*x.data.cpu().t(), s=3, c=""k"", label=""True"")
        ax.scatter(*x_hat.data.cpu().t(), s=3, label=""Learned"")
        ax.legend()
        ax.set_xlim([-3, 3]); ax.set_ylim([-3, 3])",0.6674757599830627,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.668523371219635,notebook 4_3,7.0,"code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()

train_accuracies = []
valid_accuracies = []
        
for epoch in range(num_epochs):
    
    train_accuracies_batches = []
    
    for inputs, targets in train_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        
        # Forward pass.
        output = model(inputs)
        
        # Compute loss.
        loss = loss_fn(output, targets)
        
        # Clean up gradients from the model.
        optimizer.zero_grad()
        
        # Compute gradients based on the loss from the current batch (backpropagation).
        loss.backward()
        
        # Take one optimizer step using the gradients computed in the previous step.
        optimizer.step()
        
        step += 1
        
        # Compute accuracy.
        predictions = output.max(1)[1]
        train_accuracies_batches.append(accuracy(targets, predictions))
        
        if step % validation_every_steps == 0:
            
            # Append average training accuracy to list.
            train_accuracies.append(np.mean(train_accuracies_batches))
            
            train_accuracies_batches = []
        
            # Compute accuracies on validation set.
            valid_accuracies_batches = []
            with torch.no_grad():
                model.eval()
                for inputs, targets in test_loader:
                    inputs, targets = inputs.to(device), targets.to(device)
                    output = model(inputs)
                    loss = loss_fn(output, targets)

                    predictions = output.max(1)[1]",0.6695383787155151,notebook 7_2,39.0,"### Exercise 2.

**Trainnig and Evaluating a VAE model**

1. Why do we use the reparameterization trick?
2. What available metric can you use to estimate the marginal likelihood ($p_\\theta(\\mathbf{x})$) ?
3. In the above plots, we display numerous model samples. If you had to pick one plot, which one would you pick to evaluate the quality of a VAE (i.e. using posterior samples $\\mathbf{z} \\sim q_\\phi(\\mathbf{z} | \\mathbf{x})$ or prior samples $\\mathbf{z} \\sim p(\\mathbf{z})$) ? Why?.
4. How could you exploit the VAE model for classification?

**Answers**:

`[...]`

### Exercise 3.

**Experiment with the VAE model.**

1. Experiment with the number of layers and activation functions in order to improve the reconstructions and latent representation. What solution did you find the best and why?
2. Try to increase the number of digit classes in the training set and analyze the learning curves, latent space and reconstructions. For which classes and why does the VAE fail in reconstructing?  *HINT: Try the combination: `classes=[0, 1, 4, 9]`, to see how well VAE can separate these digits in the latent representation and reconstructions.*
3. Increase the number of units in the latent layer. Does it increase the models representational power and how can you see and explain this? How does this affect the quality of the reconstructions?

**Answers**:",0.6744529604911804,notebook 4_1,7.0,"step = 0
model.train()

train_accuracies = []
valid_accuracies = []
        
for epoch in range(num_epochs):
    
    train_accuracies_batches = []
    
    for inputs, targets in train_loader:
        
        # Forward pass.
        output = model(inputs)
        
        # Compute loss.
        loss = loss_fn(output, targets)
        
        # Clean up gradients from the model.
        optimizer.zero_grad()
        
        # Compute gradients based on the loss from the current batch (backpropagation).
        loss.backward()
        
        # Take one optimizer step using the gradients computed in the previous step.
        optimizer.step()
        
        step += 1
        
        # Compute accuracy.
        predictions = output.max(1)[1]
        train_accuracies_batches.append(accuracy_score(targets, predictions))
        
        if step % validation_every_steps == 0:
            
            # Append average training accuracy to list.
            train_accuracies.append(np.mean(train_accuracies_batches))
            
            train_accuracies_batches = []
        
            # Compute accuracies on validation set.
            valid_accuracies_batches = []
            with torch.no_grad():
                model.eval()
                for inputs, targets in valid_loader:
                    output = model(inputs)
                    loss = loss_fn(output, targets)

                    predictions = output.max(1)[1]

                    # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=False).
                    valid_accuracies_batches.append(accuracy_score(targets, predictions) * len(inputs))",0.6747307777404785,notebook 4_1,9.0,"predictions = output.max(1)[1]

        # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy_score(targets, predictions) * len(inputs))

    test_accuracy = np.sum(test_accuracies) / len(x_test)
    print(f""Validation accuracy: {valid_accuracies[-1]:.3f}"")
    print(f""Test accuracy: {test_accuracy:.3f}"")
    
    model.train()'

 
markdown:
### Assignment 2

1. Note the performance of the standard feedforward neural network. Add a [2D convolution layer](https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html) before the first layer. Insert the utility module `PrintSize` to check the size of the tensor at any point in `Sequential`, and notice that the size of the image reduces after the convolution. This can cause loss of information, and can be avoided by using adequate padding in the convolutional layer.
  Does adding a convolutional layer increase the generalization performance of the network (try num_filters=32 and filter_size=5 as a starting point)?
  
2. Can the performance be increases even further by stacking more convolution layers?",0.6800430417060852,notebook 4_3,6.0,"code:
class Model(nn.Module):

    def __init__(self, num_classes):
        super().__init__()
        
        self.net = ...   # Your code here!

    def forward(self, x):
        return self.net(x)
    
    
model = Model(num_classes=len(np.unique(labels)))', ""device = torch.device('cuda')  # use cuda or cpu"", 'model = model.to(device)
print(model)'

 
markdown:
## Define loss function and optimizer

**Assignment 2:** Implement the criterion and optimizer, as in the previous notebook.'

 
code:
loss_fn = None  # Your code here!
optimizer = None  # Your code here!'

 
markdown:
## Train the network'

 
code:
# Test the forward pass with dummy data
out = model(torch.randn(2, 3, 224, 224).to(device))
print(""Output shape:"", out.size())'

 
code:
num_epochs = 10
validation_every_steps = 50

step = 0
model.train()",0.6862858533859253,1.0,1.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0
What do RNN and LSTM stand for?,RNN stands for Reccurent Neural Network and LSTM stands for Long Short-Term Memory (unit).,notebook 5_1,notebook 5_1,26.0,"code:
class RNNLM(torch.nn.Module):
    """"""A simple implementation of a language model using RNNs.""""""
    def __init__(self, vectors:torch.Tensor):
        super().__init__()
        # register the embeddings
        self.embeddings = torch.nn.Embedding(*glove_vectors.shape)
        self.embeddings.weight.data = glove_vectors

        # register the LSTM
        self.rnn = torch.nn.LSTM(
            input_size=glove_vectors.shape[1],
            hidden_size=glove_vectors.shape[1],
            num_layers=1,
            batch_first=True,
        )

        # project the output of the LSTM (hidden state) back to the vocabulary space
        self.proj = nn.Linear(glove_vectors.shape[1], glove_vectors.shape[0], bias=False)
        # init the projection using the embeddings weights
        self.proj.weight.data = glove_vectors

    def forward(self, token_ids: torch.Tensor, retain_ws:bool=False) -> torch.Tensor:
        # convert the tokens into vectors
        ws = self.embeddings(token_ids)

        # store the word vectors for debugging
        if retain_ws:
          ws.retain_grad()
          self.ws = ws

        # shift the input `ws` right
        w0 = torch.zeros((ws.shape[0], 1, self.embeddings.weight.shape[1]),
                         device=self.embeddings.weight.device, dtype=torch.long)
        ws_shifted = torch.cat([w0, ws[:, :-1]], dim=1)

        # call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)",0.4814085066318512,notebook 5_3,56.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",0.4954652190208435,notebook 5_2,15.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:",0.5412726402282715,notebook 5_3,11.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:",0.5483190417289734,notebook 5_3,32.0,"markdown:
## Exercise F:

How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
markdown:
## Exercise G (optional):'

 
markdown:
Alter the forward pass, backward pass and training loop to handle batches of samples. You will see great improvements!'

 
markdown:
# Introduction to the Long Short-Term Memory (LSTM) Cell'

 
markdown:
Reading material: [Christopher Olah's walk-through](http://colah.github.io/posts/2015-08-Understanding-LSTMs/)."", '
___


A vanilla RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the Long Short-Term Memory (LSTM) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. In this exercise, we will focus on LSTM but you would easily be able to go ahead and implement the GRU as well based on the principles that you learn here.

Below is a figure of the LSTM cell:'

 
markdown:
![lstm](https://i.imgur.com/3VkmUCe.png)
Source: https://arxiv.org/abs/1412.7828'

 
markdown:",0.554582953453064,notebook 5_3,50.0,"markdown:
## PyTorch implementation of the LSTM
', ""Now that we know how the LSTM cell works, let's see how easy it is to use in PyTorch!""]'

 
markdown:
Definition of our LSTM network. We define a LSTM layer using the [nn.LSTM](https://pytorch.org/docs/stable/nn.html#lstm) class. The LSTM layer takes as argument the size of the input and the size of the hidden state like in our numpy implementation.'

 
code:
import torch
import torch.nn as nn
import torch.nn.functional as F

class MyRecurrentNet(nn.Module):
    def __init__(self):
        super(MyRecurrentNet, self).__init__()
        
        # Recurrent layer
        # YOUR CODE HERE!
        self.lstm = 
        
        # Output layer
        self.l_out = nn.Linear(in_features=50,
                            out_features=vocab_size,
                            bias=False)
        
    def forward(self, x):
        # RNN returns output and last hidden state
        x, (h, c) = self.lstm(x)
        
        # Flatten output for feed-forward layer
        x = x.view(-1, self.lstm.hidden_size)
        
        # Output layer
        x = self.l_out(x)
        
        return x

net = MyRecurrentNet()
print(net)'

 
markdown:
## Exercise K:

Define an LSTM for our recurrent neural network `MyRecurrentNet` above. A single LSTM layer is sufficient. What should the input size and hidden size be? Hint: use the PyTorch documentation.'

 
markdown:
### Training loop'",0.555605411529541,notebook 5_1,23.0,"**Long Short-Term Memory (LSTM) networks** A standard RNN suffers from [the vanishing gradients problem](http://neuralnetworksanddeeplearning.com/chap5.html#the_vanishing_gradient_problem) which gives challenges in saving memory over longer sequences. To combat these issues the gated hidden units were created. The two most prominent gated hidden units are the [Long Short-Term Memory (LSTM, Hochreiter and Schmidhuber. (1997))](https://dl.acm.org/doi/10.1162/neco.1997.9.8.1735) cell and the Gated Recurrent Unit (GRU), both of which have shown increased performance in saving and reusing memory in later timesteps. RNNs coupled with gated mechanisms are less prone to the problem of vanishing gradients, and can therefore model dependencies over longer number of steps.'

 
markdown:
*Figure: bi-directional recurrent neural network. We highlight the information flowing from the context ""My horse is"" to the predicted word ""very"" (left-to-right), and the information flowing from the context ""fast"" (right-to-left).*
![Recurrent Neural Network](images/bidirectional-lm-activated.png)",0.5578245520591736,notebook 5_2,39.0,"code:
import torch
import torch.nn as nn
import torch.nn.functional as F

class MyRecurrentNet(nn.Module):
    def __init__(self):
        super(MyRecurrentNet, self).__init__()
        
        # Recurrent layer
        # YOUR CODE HERE!
        self.lstm = 
        
        # Output layer
        self.l_out = nn.Linear(in_features=50,
                            out_features=vocab_size,
                            bias=False)
        
    def forward(self, x):
        # RNN returns output and last hidden state
        x, (h, c) = self.lstm(x)
        
        # Flatten output for feed-forward layer
        x = x.view(-1, self.lstm.hidden_size)
        
        # Output layer
        x = self.l_out(x)
        
        return x

net = MyRecurrentNet()
print(net)'

 
markdown:
## Exercise j) Train in PyTorch

Define an LSTM for our recurrent neural network `MyRecurrentNet` above. A single LSTM layer is sufficient. What should the input size and hidden size be? Hint: use the PyTorch documentation.
', ""It's time for us to train our network. In the section below, you will get to put your deep learning skills to use and create your own training loop. You may want to consult previous exercises if you cannot recall how to define the training loop.""]'",0.5622462630271912,notebook 5_3,55.0,"markdown:
## Exercise L:'

 
markdown:
Finish the training loop above and run it. Compare your loss to the NumPy implementation. Are they similar? How do they differ?

Try to play around with the choice of hyper-parameters, optimizer, and hidden dimensions. How much can you improve the negative log-likelihood by these simple changes?'

 
markdown:
## Exercise M (optional):

Aside from the LSTM cell, various other RNN cells exist. The gated recurrent unit (GRU) is a variation of the LSTM cell that uses less gating mechanisms. Try to look it up in the [PyTorch documentation](https://pytorch.org/docs/stable/nn.html#gru) and switch out the LSTM cell in the code above. What do you notice in terms of performance and convergence speed?'

 
markdown:
## Exercise N (optional):

Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'",0.5665590167045593,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'",0.5821394920349121,1.0,1.0,1.0,1.0,1.0,1.0,2.0,2.0,2.0,2.0
How can I give text as input to my network?,"Before text can be used as input for a neural network, it needs to be represented as a vector. This can be done by tokenizing the text, and then looking up the embedding vector for each token. Tokenization transforms characters, words, or parts of words into tokens, which can be numbers.",notebook 5_1,notebook 5_2,31.0,"# Forward pass
outputs = forward_batch(encoded_test_set_x[:1], NN)

output_sentence = [idx_to_word[np.argmax(output)] for output in Var_to_nparray(outputs[0])]
', ""print('Input sentence:')"", 'print(inputs)
', ""print('\Target sequence:')"", 'print(targets)
', ""print('\Predicted sequence:')"", 'print([idx_to_word[np.argmax(output)] for output in Var_to_nparray(outputs[0])])'

 
markdown:
## Exercise g) Extrapolation
', ""Now that we have trained an RNN, it's time to put it to test. We will provide the network with a starting sentence and let it `freestyle` from there!"", '
How well does your RNN extrapolate -- does it work as expected? Are there any imperfections? If yes, why could that be?'

 
code:
def freestyle(NN, sentence='', num_generate=10):"", '    """"""
    Takes in a sentence as a string and outputs a sequence
    based on the predictions of the RNN.
    
    Args:
     `params`: the parameters of the network
     `sentence`: string with whitespace-separated tokens
     `num_generate`: the number of tokens to generate
    """"""', ""    sentence = sentence.split(' ')"", '    output_sentence = sentence
    sentence_one_hot = one_hot_encode_sequence(sentence, vocab_size)

    # Begin predicting
    outputs = forward_batch([sentence_one_hot], NN, use_stored_hid=False)
    output_words = [idx_to_word[np.argmax(output)] for output in Var_to_nparray(outputs[0])]
    word = output_words[-1]",0.6836832761764526,notebook 5_2,36.0,"def forward_step(self, input: Sequence[Var], input_hid: Sequence[Var], input_c: Sequence[Var]) -> Sequence[Var]:
        hids = []
        cs = []
        concatenated_input = []
        for val in input_hid:
          concatenated_input.append(val)
        for val in input:
          concatenated_input.append(val)

        # Insert code here

        return hids, cs
    
    def forward_sequence(self, input: Sequence[Sequence[Var]], use_stored_hid = False) -> Sequence[Sequence[Var]]:
        out = []
        if use_stored_hid:
            hid = self.stored_hid
            c = self.stored_c
        else:
            hid = self.initial_hid
            c = self.initial_c
        # Takes a sequence and loops over each character in the sequence. Note that each character has dimenson equal to the embeddng dimenson
        for i in range(len(input)):
            hid, c = # insert code here
            out.append(hid)
        self.stored_hid = hid
        self.stored_c = c
        return out'

 
markdown:
Here is a bit of code to test it out:'

 
code:
NN = [
    LSTMLayer(1, 5, lambda x: x.tanh()),
    DenseLayer(5, 1, lambda x: x.identity())
]

print(NN[0])
x_train =[[[Var(1.0)], [Var(2.0)], [Var(3.0)]],
          [[Var(1.0)], [Var(2.0)], [Var(3.0)]]]",0.7430044412612915,notebook 5_2,21.0,"hids = []
        for i in range(self.n_hid):
          hids.append( )

        return hids
    
    def forward_sequence(self, input: Sequence[Sequence[Var]], use_stored_hid = False) -> Sequence[Sequence[Var]]:
        out = []
        if use_stored_hid:
            hid = self.stored_hid
        else:
            hid = self.initial_hid
        # Takes a sequence and loops over each character in the sequence. Note that each character has dimension equal to the embedding dimension
        for i in range(len(input)):
            hid = 
            out.append(hid)
        self.stored_hid = hid
        return out'

 
markdown:
Now we can define a network and pass some data through it.'

 
code:
NN = [
    RNNLayer(1, 5, lambda x: x.tanh()),
    DenseLayer(5, 1, lambda x: x.identity())
]

def forward_batch(input: Sequence[Sequence[Sequence[Var]]], network, use_stored_hid=False):
  
  def forward_single_sequence(x, network, use_stored_hid):
    for layer in network:
        if isinstance(layer, RNNLayer):
            x = layer.forward_sequence(x, use_stored_hid) 
        else:
            x = layer.forward_sequence(x)
    return x

  output = [ forward_single_sequence(input[n], network, use_stored_hid) for n in range(len(input))]
  return output",0.743690013885498,notebook 5_1,64.0,"# generate text until the output length (which includes the context length) reaches 50
# documentation for `model.generate()` https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate
output = model.generate(input_ids, do_sample=True, temperature=1., max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 9**: Play with the temperature parameter, what is it controlling? how can you related it to the definition of a language model?

> *Insert your your answer here*'

 
markdown:
### V.b. Prompt-based learning

Prompt-based learning consists in framing a problem into a *prompt* which completion by a language model corresponds to the answer. In other words, it consists in using natural language to interface with language models.

**Experiment** Do language models know what hygge is?

**Exercise 10**: Write a prompt that triggers a language model to define ""hygge"".

> *write your prompt here and test it using GPT-2 and GPT-3*'

 
code:
prompt = ""Q: What is Hygge? A:""', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", 'input_ids = input_ids.repeat(5, 1)
output = model.generate(input_ids, do_sample=True, temperature=1, max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'",0.7517558336257935,notebook 5_1,4.0,"___
## I. Text to vectors

In the previous labs, we have applied deep learning to processing images encoded as RGB pixels. We found that processing arrays of RGB pixels using convolutional neural network was effective. In NLP, other neural interfaces are required to enable plugging text into neural networks. Raw text cannot trivially be plugged-in neural networks. In this section we show how to convert text units or *tokens* into vectors and introduce the notion of text vector spaces.

### I.a. Tokenization

In [alphabetic languages](https://en.wikipedia.org/wiki/List_of_writing_systems), text can be decomposed into various types of units or *tokens*: characters, syllables, words or even sentences. Each tokenization system comes with vocabulary $\\mathcal{V}$ that references all known symbols.",0.7721167802810669,notebook 8_4_Q,2.0,"code:
# show init state
s = env.reset()
env.render()'

 
markdown:
Next let's implement the Q-network class.""]'

 
code:
class QNetwork(nn.Module):
    """"""Q-network""""""

    def __init__(self, n_inputs, n_outputs, learning_rate):
        super(QNetwork, self).__init__()
        # network
        self.out = nn.Linear(n_inputs, n_outputs, bias=False)
        torch.nn.init.uniform_(self.out.weight, 0, 0.01)
        # training
        self.optimizer = optim.SGD(self.parameters(), lr=learning_rate)

    def forward(self, x):
        return self.out(x)
    
    def loss(self, q_outputs, q_targets):
        return torch.sum(torch.pow(q_targets - q_outputs, 2))'

 
code:
def one_hot(i, l):
    """"""One-hot encoder for the states""""""
    a = np.zeros((len(i), l))
    a[range(len(i)), i] = 1
    return a'

 
code:
# train Q-network

num_episodes = 1000
episode_limit = 100
learning_rate = 0.1
gamma = 0.99 # discount rate
val_freq = 100 # validation frequency
epsilon_start = 1.0

n_inputs = env.observation_space.n
n_outputs = env.action_space.n

qnet = QNetwork(n_inputs, n_outputs, learning_rate)",0.77390456199646,notebook 5_1,67.0,"code:
model_id = ""facebook/dpr-ctx_encoder-single-nq-base""
tokenizer = transformers.AutoTokenizer.from_pretrained(model_id)
model = transformers.AutoModel.from_pretrained(model_id).eval()'

 
code:
# Define some documents and questions
documents = [f""{city} is the capital of {country}"" for city, country in zip(keys_cities_labels, keys_labels)]
questions =  [f""What is the capital city of {country}?"" for country in keys_cities_labels]

# Tokenizer
tokenizer_args = {""padding"":True, ""truncation"":True, ""return_tensors"": ""pt""}
documents_ = tokenizer(documents, **tokenizer_args)
questions_ = tokenizer(questions, **tokenizer_args)

# Compute the question and document vectors
with torch.no_grad():
    document_vectors = model(**documents_).pooler_output
    question_vectors = model(**questions_).pooler_output

# compute the inner product (attention map) between all pairs of questions and documents
attention_map = question_vectors @ document_vectors.T
attention_map = attention_map.softmax(dim=1)

# plot as an attention map
plot_attention_map(attention_map, questions, documents)'

 
markdown:
**Exercise 12**: Is DPR retrieving the right document for each question? Comment on the shape of the attention map.

> *Insert your answer here*'

 
markdown:
---
## Credits and additional references

### Credits",0.7812304496765137,notebook 5_1,6.0,"# iterate through the tokenizers and decode the input sentences
for tokenizer_name, tokenizer in tokenizer_ids.items():
    # intialize the tokenizer (either)
    if isinstance(tokenizer, str):
        # init a `transformers.PreTrainedTokenizerFast`
        tokenizer = transformers.AutoTokenizer.from_pretrained(tokenizer)
        vocab_size = tokenizer.vocab_size
    else:
        # use the provided `tokenizers.Tokenizer``
        vocab_size = tokenizer.get_vocab_size()

    # Tokenize
    token_ids = tokenizer.encode(sentence, add_special_tokens=False)
    if isinstance(token_ids, tokenizers.Encoding):
        token_ids = token_ids.ids

    # Report
    rich.print(f""[red]{tokenizer_name}[/red]: sentence converted into {len(token_ids)} tokens (vocabulary: {vocab_size} tokens)"")
    rich.print(f""Tokens:\{[tokenizer.decode([t]) for t in token_ids]}"")
    rich.print(f""Token ids:\{[t for t in token_ids]}"")'

 
markdown:
### I.b Embeddings",0.7823119759559631,notebook 5_3,18.0,"markdown:
### Implement the forward pass'

 
markdown:
Now that we have all the definitions in place, we can start to implement a forward pass.'

 
code:
def forward_pass(inputs, hidden_state, params):
    """"""
    Computes the forward pass of a vanilla RNN.
    
    Args:
     `inputs`: sequence of inputs to be processed
     `hidden_state`: an already initialized hidden state
     `params`: the parameters of the RNN
    """"""
    # First we unpack our parameters
    U, V, W, b_hidden, b_out = params
    
    # Create a list to store outputs and hidden states
    outputs, hidden_states = [], []
    
    # For each element in input sequence
    for t in range(len(inputs)):

        # Compute new hidden state
        # YOUR CODE HERE!
        hidden_state = 

        # Compute output
        # YOUR CODE HERE!
        out = 
        
        # Save results and continue
        outputs.append(out)
        hidden_states.append(hidden_state.copy())
    
    return outputs, hidden_states


# Get first sequence in training set
test_input_sequence, test_target_sequence = training_set[0]

# One-hot encode input and target sequence
test_input = one_hot_encode_sequence(test_input_sequence, vocab_size)
test_target = one_hot_encode_sequence(test_target_sequence, vocab_size)",0.7849959135055542,notebook 5_1,8.0,"code:
hdim = 5 # embedding dimension
tokenizer = transformers.AutoTokenizer.from_pretrained(""bert-base-uncased"") # tokenizer
sentence = ""Hello World!"" # input text
embeddings = torch.randn((tokenizer.vocab_size, hdim)) # embedding matrix
rich.print(f""Embeddings (shape): {embeddings.shape}"")
token_ids = tokenizer.encode(sentence, add_special_tokens=False, return_tensors=""pt"")[0]
rich.print(f""Tokens ids (shape): {token_ids.shape}"")
vectors =  torch.nn.functional.one_hot(token_ids, tokenizer.vocab_size).float() @ embeddings # equivalent to a `nn.Linear` layer
rich.print(f""Vectors (shape): {vectors.shape}"")
rich.print(f""List of tokens and their corresponding vectors:"")
for t,v in zip(token_ids, vectors):
    token_info = f""[blue]{tokenizer.decode(t):5}[/blue] (token id: {t:4})""
    rich.print(f"" * {token_info} -> {v}"")

# NB: in practice, we use the simpler interface `torch.nn.Embedding``
# embeddings = torch.nn.Embedding(tokenizer.vocab_size, hdim)
# vectors = embeddings(token_ids)'

 
markdown:
### I.c Word vectors

<img src=""images/word2vec-intuition.png"" alt=""Word2vec: translations in the vector spaces correspond to linguistic concepts (gender, verb tense, association between concepts)"" width=""800px""/>",0.7856878638267517,0.0,0.0,0.0,1.0,2.0,2.0,3.0,4.0,4.0,5.0
What variables are used in the attention function?,"The attention mechanism is defined using the query Q, the keys K, the values V, and the scaling parameter tau.",notebook 5_1,notebook 5_1,41.0,"> * $T_{\\mathbf{K}\\mathbf{V}} = ...$ 
> * $T_{\\mathbf{Q}} = ...$ 
> * $h_i = ...$
> * $h_o = ...$
> * $\\tau = ...$'

 
markdown:
**Implementing the attention function** We obtained a set of attention weights for each query, concatenating them results in a 2D matrix that will display bellow. Let's implement the `attention` function in the cell bellow using the inputs vectors $\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}$ and visualize the output vector. we use [`torch.einsum`](https://pytorch.org/docs/stable/generated/torch.einsum.html) to implement the sum $\\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i$.""]'

 
code:",0.46153801679611206,notebook 5_1,43.0,"if color_bar:
      fig.colorbar(im, fraction=0.02, pad=0.04)
    fig.tight_layout()

def attention(Q, K, V, tau=None):
    """"""A simple parallelized attention layer""""""
    if tau is None:
        tau = math.sqrt(float(Q.shape[-1]))
    assert Q.shape[-1] == K.shape[-1]
    assert K.shape[0] == V.shape[0]
    attention_map = Q @ K.T / tau
    attention_weights = attention_map.softmax(dim=1)
    return torch.einsum(""qk, kh -> qh"", attention_weights, V), attention_weights

# return the output of the attention
output, attention_weights = attention(Q, K, V, tau=1.)

# plot the attention weights
plot_attention_map(attention_weights, queries_labels, keys_labels, print_values=True)'

 
markdown:
**Exercise 5**:  What effect has the parameter $\\tau$ on the attention mechanism? What is happening when using a large value for $\\tau$? using a small value for $\\tau$? In the limits $\\tau \\rightarrow 0$ and $\\tau \\rightarrow \\infty$

> *Insert your answer here*


**Visualizing the output word vector** In the code below we use the code from the previous word2vec experiment to generate the nearest neighbour corresponding to the analogy:",0.49584752321243286,notebook 5_1,35.0,"The above expresson is equivalent to applying attention to each query vector $\\mathbf{q}$ separately. The output for each vector $\\mathbf{q}$ depends on the vector of weights $\\mathbf{\\Lambda} = \\mathrm{Softmax}\\left( \\frac{\\mathbf{q} \\mathbf{K}^T}{\\tau} \\right)$ with values $[\\lambda_1, \\ldots \\lambda_{T_{\\mathbf{K}\\mathbf{V}}}]$. The vector of weights $\\Lambda$ is a function of the inner-product $\\mathbf{q} \\mathbf{K}^T$, which defines a similarity metric between the the vectors $\\mathbf{q}$ and each of the key vectors $[\\mathbf{k}_1, \\ldots \\mathbf{k}_{T_{\\mathbf{K}\\mathbf{V}}}]$. Furthermore, as the weights sum to one, the output of the attention function is a convex combinations of the values:
$$
\\mathrm{Attention}(\\mathbf{q}, \\mathbf{K}, \\mathbf{V}) = \\sum_{i=1}^{T_{\\mathbf{K}\\mathbf{V}}} \\mathbf{\\lambda}_i \\mathbf{v}_i \\ .
$$'

 
markdown:
**Experiment** We will use the GloVe word vectors to illustrate the attention mechanism.",0.5006254315376282,notebook 5_1,34.0,"For each query, the attention mechanism returns a convex combinations of the values $\\mathbf{V}$. The attention mechanism is defined as
$$
\\mathrm{Attention}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V}) = \\mathrm{Softmax}\\left( \\frac{\\mathbf{Q} \\mathbf{K}^T}{\\tau} \\right) \\mathbf{V} \\ ,
$$
where $\\tau$ is a scaling parameter, set to $\\sqrt{h_i}$ in ([""Attention is All You Need"", Wasrani et al. (2016)](https://arxiv.org/abs/1706.03762)). $\\mathrm{Attention}(\\mathbf{Q}, \\mathbf{K}, \\mathbf{V})$ is a sequence of $T_\\mathbf{Q}$ vectors, each of dimension $h_o$.",0.5020677447319031,notebook 5_1,58.0,"code:
def attention(query, key, value, mask=None, dropout=None):
    ""Compute \'Scaled Dot Product Attention\'""
    d_k = query.size(-1)
    scores = torch.matmul(query, key.transpose(-2, -1)) / math.sqrt(d_k)
    if mask is not None:
        scores = scores.masked_fill(mask == 0, -math.inf)
    p_attn = F.softmax(scores, dim = -1)
    if dropout is not None:
        p_attn = dropout(p_attn)
    return torch.matmul(p_attn, value), p_attn'

 
code:
class MultiHeadedAttention(nn.Module):
    """"""A simple Multi-head attention layer.""""""
    def __init__(self, h, d_model, dropout=0.1):
        ""Take in model size and number of heads.""
        super(MultiHeadedAttention, self).__init__()
        assert d_model % h == 0
        # We assume d_v always equals d_k
        self.d_k = d_model // h
        self.h = h
        self.linears = nn.ModuleList([nn.Linear(d_model, d_model) for _ in range(4)])
        self.attn = None # store the attention maps
        self.dropout = nn.Dropout(p=dropout)

    def forward(self, query, key, value, mask=None):
        nbatches = query.size(0)
        if mask is not None:
            # Same mask applied to all h heads.
            mask = mask.unsqueeze(1)",0.5071079134941101,notebook 5_1,42.0,"code:

def plot_attention_map(attention_map, queries_labels, keys_labels, print_values:bool=False, ax=None, color_bar:bool=True):
    """"""Plot the attention weights as a 2D heatmap""""""
    if ax is None:
        fig, ax = plt.subplots(figsize = (10,6), dpi=300)
    else:
        fig = plt.gcf()
    im = ax.imshow(attention_map, cmap=sns.color_palette(""viridis"", as_cmap=True))
    ax.grid(False)
    ax.set_ylabel(""$\\mathbf{Q}$"")
    ax.set_xlabel(""$\\mathbf{K}$"")
    ax.set_yticks(np.arange(len(queries_labels)))
    ax.set_yticklabels(queries_labels)
    ax.set_xticks(np.arange(len(keys_labels)))
    ax.set_xticklabels(keys_labels)
    plt.setp(ax.get_xticklabels(), rotation=45, ha=""right"",
            rotation_mode=""anchor"")

    # Loop over data dimensions and create text annotations.
    if print_values:
        for i in range(len(queries_labels)):
            for j in range(len(keys_labels)):
                text = ax.text(j, i, f""{attention_map[i, j]:.2f}"",
                            ha=""center"", va=""center"", color=""w"")

    if color_bar:
      fig.colorbar(im, fraction=0.02, pad=0.04)
    fig.tight_layout()",0.5426286458969116,notebook 5_1,39.0,"def plot_attention_weights(attention_weights, queries_labels, keys_labels, nrows = 2):
    """"""Plot the attention scores between each of the queries and the keys.""""""
    ncols = len(attention_weights) // nrows
    fig, axes = plt.subplots(ncols=ncols, nrows=nrows, figsize = (10,6), sharex=False, sharey=True, dpi=300)
    colors = sns.color_palette(""viridis"", as_cmap=True)
    def normalize(x, values):
        return (x -  values.min()) / (values.max() - values.min())
    for k, ax in enumerate(axes.flat):
        query_label = queries_labels[k]
        attention_weights_k = attention_weights[k]
        cols = [colors(normalize(x, attention_weights).detach().item()) for x in attention_weights_k]
        ax.bar(keys_labels, attention_weights_k, color=cols)
        plt.setp(ax.get_xticklabels(), rotation=45, ha=""right"", rotation_mode=""anchor"")
        ax.set_title(f""Query={query_label}"")
        if k % ncols == 0 :
            ax.set_ylabel(""Attention score"")
        if k >= ncols:
            ax.set_xlabel(""$\\mathbf{K}$"")
    fig.tight_layout()
    plt.show()",0.5556761622428894,notebook 5_1,56.0,"**Multi-head attention** The attention mechanism introduced in the previous section depends on a softmax of inner-products, which might be sparse depending on the value of the vectors, in that case, the layer can only attend to a few positions in the sequence. To enable attending to more positions in the input sentence, multiple attention mechanism can be used in parallel. This is what we call a multi-head attention layer:
$$
\\begin{align}
\\mathrm{MultiHeadAttention} \\left(\\mathbf{Q}^{1:P}, \\mathbf{K^{1:P}}, \\mathbf{V}^{1:P}, \\mathbf{M} \\right) = [ \\mathrm{Attention} \\left(\\mathbf{Q}^{1}, \\mathbf{K^{1}}, \\mathbf{V}^{1}, \\mathbf{P} \\right), 
\\ldots
\\mathrm{Attention} \\left(\\mathbf{Q}^{P}, \\mathbf{K^{P}}, \\mathbf{V}^{P}, \\mathbf{M} \\right)] \\ ,
\\end{align}
$$
where each set of vectors $\\mathbf{Q}^{i}, \\mathbf{Q}^{i}, \\mathbf{Q}^{i}$ corresponding to the head index $i$ is obtained using a separate linear transformation of the input sequence.",0.5615178942680359,notebook 5_1,40.0,"# Define keys, queries and values
queries_labels = [""Italy"", ""Korea"", ""Nicaragua"", ""Canada"", ""Algeria"", ""India""]
keys_labels = [""China"", ""Russia"", ""Turkey"", ""Japan"", ""Thailand"", ""Germany"", ""France"", ""Sweden"", ""Poland"", ""Nigeria"", ""Morocco"", ""Colombia"", ""Chile"", ""USA"", ""Pakistan""]
keys_cities_labels = [""Beijing"", ""Moscow"", ""Ankara"", ""Tokyo"", ""Bangkok"", ""Berlin"", ""Paris"", ""Stockholm"", ""Warsaw"", ""Abuja"", ""Rabat"", ""Bogota"", ""Santiago"", ""Washington"", ""Islamabad""]
# convert to vectors
Q = names_to_vectors(queries_labels)
K = names_to_vectors(keys_labels)
V = names_to_vectors(keys_cities_labels) - K


# compute the attention weights for each query using a ´for` loop
attention_weights = []
for q in Q:
    log_lambda_q = (q @ K.T) / math.sqrt(float(Q.shape[-1]))
    attention_weights.append(log_lambda_q)
attention_weights = torch.stack(attention_weights)

# plot attention weights for each query
plot_attention_weights(attention_weights, queries_labels, keys_labels)'

 
markdown:
**Exercise 4**:  In this example, what is the value of $T_{\\mathbf{K}\\mathbf{V}}$, $T_{\\mathbf{Q}}$, $h_i$, $h_o$ and $\\tau$ ?",0.5835062265396118,notebook 5_1,46.0,"code:
# Illustration of the above using code
hdim = 300
sentence = ""Copenhagen Denmark Stockholm Sweden Beijing China Tokyo Japan truck car bus""
token_ids = torch.tensor(glove_tokenizer.encode(sentence).ids)
tokens = [glove_vocabulary[x] for x in token_ids]
vectors = embeddings(token_ids)
H, attention_map = attention(vectors, vectors, vectors)
rich.print({
    ""Q"": Q.shape,
    ""K"": K.shape,
    ""V"": V.shape,
    ""H"": H.shape
})

# visualized the log of the attention map
plot_attention_map(attention_map.log(), tokens, tokens)'

 
markdown:
**Exercise 7**: Comment on the structure of the attention map. Why is that the case?

> *Insert your answer here*'

 
markdown:
### IV.b Masked attention",0.5840325355529785,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0
What is sampling for a language model?,"Sampling text means that the language model is generating text. This corresponds to the inference process of the network, as opposed to training.",notebook 5_1,notebook 5_1,17.0,"**Language models learn contextual representations** Assigning a probability to each word in the vocabulary requires learning abstract representations of the context $\\mathbf{w}_{<t}$. For instance, in the horse example, predicting the word ""fast"" will be easier to predict if some knowledge of the grammatical rules and common sense is acquired. In this example example, the model needs to learn that $\\mathbf{w}_4$ must be an adjective, and that this adjective can be attributed to a horse. Therefore, the function $f_\\theta$ must acquire a non-trivial representation of the context to make sensible token predictions$.'

 
markdown:
**Sampling** At each step $t$, the $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ implements a categorical distribution defined on the vocabulary $\\mathcal{V}$. Sampling or *generating* text can by iteratively sampling tokens, as showed in the pseudo-code bellow:
```python
ws = [] # placeholder for all the samples w_t
for t in range(T):
    wt_logits = f(ws, theta) # logits of p(w_t | w_{<t})
    wt = Categorical(logits=wt_logits).sample() # sampled w_t
    ws.append(wt) # append the new sample to be used as input in the next step
```
Sampling is often expensive, as it requires one evaluation of the function $f_\\theta$ for each step and cannot be trivially parallelized.",0.3690832257270813,notebook 5_1,18.0,"**Training** As long as the transition function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ is differentiable (i.e., using neural networks), a language model can be  trained via maximum likelihood, e.g. maximizing the log-likelihood with the loss:
$$
L = - \\log p_\\theta(\\mathbf{w}_{1:T}) = - \\sum_{t=1}^T \\log p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})
$$
Each term $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ can be evaluated using the observed variables $\\mathbf{w}_t$ and $\\mathbf{w}_{<t}$ (no sampling is required) and thus training of auto-regressive models is fast when the evaluation of $f_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ can be parallelized.'

 
markdown:
*Figure: Bidirectional language models*
![Masked language model](images/masked-lm.png)",0.3964255452156067,notebook 5_1,14.0,"**Autoregressive factorization** Language models aim at grasping the underlying linguistic structure of a text fragment: whereas word vectors model words independently of each others, a language model tracks the grammatical and semantic relationships between word tokens. Given a piece of text encoded into tokens $\\mathbf{w}_{1:T} = [\\mathbf{w_1}, \\ldots, \\mathbf{w}_T]$ a *left-to-right* language model describes $\\mathbf{w}_{1:T}$ with the following factorization:
$$
 p_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t}) \\ ,
$$
where $\\theta$ is a model parameter. The above *autoregressive* factorization describes a *recursive* function $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$, which is shared across all the time steps. In the above figure, we represent a left-to-right language model with dependencies represented by arrows for fixed steps $t=3$ and $t=4$. Because of this choice of factorization, a language model defines a graphical model where each step $t$ depends on all the previous steps $<t$ and the conditional $p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{<t})$ models the dependendies between the context $\\mathbf{w}_{<t}$ and the variable $\\mathbf{w}_t$.",0.4824628531932831,notebook 5_1,62.0,"All HuggingFace models and datasets (text, audio, image and more) can be accessed through the [🤗 Hub](https://huggingface.co/), and many models can tested lives on [🤗 spaces](https://huggingface.co/spaces). In the examples bellow, we will first try to manipulate data and models using lower primitives (tokenizing data, loading a model, generating / inference), so you can interact if the intermediate variables if you want to. Then we will us the blackbox [`Pipeline`](https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/pipelines#transformers.pipeline) object. If you want to apply Transformers without modifying any of the components, the `Pipeline` can be used to perform complex tasks in one line of code, as showed here with the translation task.

The OpenAI API gives access to GPT-3 ([""Language Models are Few-Shot Learners"", Brown et al. (2020)](https://arxiv.org/abs/2005.14165)) through a [playground](https://beta.openai.com/playground), where you can test the text completion capabilities of these models. GPT-3 is a large language model (up to 175 billion parameters) which has acquired impressive language understanding capabilities. It can be applied to solve new tasks without task-specific fine-tuning. [OpenAI gives you $18 to of API credits, but careful with the number of calls: running the largest version of GPT-3 (´davinci´) can be expensive](https://openai.com/api/pricing/).",0.5099902749061584,notebook 5_1,13.0,"markdown:
**Beyond word2vec**  The Skip-Gram model allows us to learn meaningful word representations and arithmetic in the resulting vector space, allowing us to manipulate concepts. Ultimately, we are interested in learning representations that represent larger text fragments such as sentences, paragraphs or documents. Doing so requires combining multiple vectors, which can be done by exploiting arithmetic in the vector space or by combining word-vectors using deep neural networks, such as Transformers!

___
## II. Language models

We have seen how to encode text into sequences of tokens, seen how to convert tokens into vectors using a set of embeddings and experimented with a GloVe word vector space. In this section we will see how to model text at the sentence, pragraph or even document level using language models.

### II.a Language Modelling

*Figure: Left-to-right language models*
![Autoregressive left-to-right language model](images/ar-lm.png)",0.510050356388092,notebook 5_1,64.0,"# generate text until the output length (which includes the context length) reaches 50
# documentation for `model.generate()` https://huggingface.co/docs/transformers/v4.22.1/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate
output = model.generate(input_ids, do_sample=True, temperature=1., max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'

 
markdown:
**Exercise 9**: Play with the temperature parameter, what is it controlling? how can you related it to the definition of a language model?

> *Insert your your answer here*'

 
markdown:
### V.b. Prompt-based learning

Prompt-based learning consists in framing a problem into a *prompt* which completion by a language model corresponds to the answer. In other words, it consists in using natural language to interface with language models.

**Experiment** Do language models know what hygge is?

**Exercise 10**: Write a prompt that triggers a language model to define ""hygge"".

> *write your prompt here and test it using GPT-2 and GPT-3*'

 
code:
prompt = ""Q: What is Hygge? A:""', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", 'input_ids = input_ids.repeat(5, 1)
output = model.generate(input_ids, do_sample=True, temperature=1, max_length=50)
decoded = tokenizer.batch_decode(output)
for txt in decoded:
    txt = txt.replace(""\"", """")
    print(txt)'",0.5241683721542358,notebook 5_1,63.0,"### V.a Language generation
', ""Let's experiment with GPT-2 (in the notebook, we use the smaller [`distilgpt2`](https://huggingface.co/distilgpt2), but feel free to use the original `gpt2` if you have enough compute)"", '
**Experiment** Generate text using GPT-2:'

 
code:
# load a GPT-2 model
model_id = ""distilgpt2""
# model_id = ""gpt2""
tokenizer = transformers.AutoTokenizer.from_pretrained(model_id)
model = transformers.AutoModel.from_pretrained(model_id)
# Here we want to load the weights of GPT2 as an autoregressive LM, or ""causal"" LM: we use the class `AutoModelForCausalLM`.
model = transformers.AutoModelForCausalLM.from_pretrained(model_id)'

 
code:
# encode context the generation is conditioned on
prompt = tokenizer.bos_token # use the Begining Of Sentence token to initialize allow generating text from scratch', ""input_ids = tokenizer.encode(prompt, return_tensors='pt')"", '# expand input_ids, so we can sample multiple generations in parallel
input_ids = input_ids.repeat(5, 1)",0.5373121500015259,notebook 5_1,19.0,"markdown:
*Figure: Bidirectional language models*
![Masked language model](images/masked-lm.png)

**Bidirectional and masked language models** Autoregressive language models learn to predict a token $\\mathbf{w}_t$ given the context up to the step $t-1$. One can also use a [pseudo likelihood](https://en.wikipedia.org/wiki/Pseudolikelihood), where $\\mathbf{w}_t$ is not only conditioned on the preceeding tokens $\\mathbf{w}_{<t}$, but also on the next tokens $\\mathbf{w}_{>t}$. This defines a bidirectional language model, which factorizes as
$$
L_\\theta(\\mathbf{w}_{1:T}) = \\prod_{t=1}^T p_\\theta(\\mathbf{w}_t \\mid \\mathbf{w}_{-t}) \\ ,
$$
where $\\mathbf{w}_{-t}$ represent the set of tokens $\\mathbf{w}_{1:T} \\backslash \\{ \\mathbf{w}_t \\}$. We call it pseudo because this likelihood is not forming a valid distribution (because the graph formed by $\\mathbf{w}_{1:T}$ is not a directed acyclic graph (a DAG)).  Bidirectional language models such as [ELMo (""Deep contextualized word representations"", Peters et al. (2018))](https://arxiv.org/abs/1802.05365), learn token representation contextualized on the whole context.",0.5610251426696777,notebook 5_1,61.0,"* [Generative Pre-trained Transformers (GPT)](https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/language-unsupervised/language_understanding_paper.pdf): autoregressive left-to-right language models implemented using a Transformer.

* [Bidirectional Encoder Representations from Transformers (BERT)](https://arxiv.org/abs/1810.04805): a masked language model trained to predict tokens that are randomly masked out (masked language model) and trained to predict whether two sentences are related or not (next-sentence prediction (NSP) task).'

 
markdown:
___
## V. Applications of Transformer-based language models
', ""Let's experiment with a few pre-trained Transformers using the [🤗 HuggingFace](https://huggingface.co/) environment and the [OpenAI API](https://beta.openai.com/docs/guides/completion). "", '
HuggingFace is a company that manages multiple open source projects:
* **[tokenizers](https://huggingface.co/docs/tokenizers/index)**: a very efficient implementation of tokenizers using Rust.
* **[datasets](https://huggingface.co/docs/datasets/index)**:a library for handling and sharing large datasets (in particular they use [Apache Arrow](https://arrow.apache.org/)  for efficient data loading from disk)
* **[transformers](https://huggingface.co/docs/transformers/index)**: implementation and sharing of Transformers in Tensorflow, PyTorch and JAX",0.5619208812713623,notebook 7_2,20.0,"## 6. Evaluating a Variational Autoencoder

### Assessing the Quality of the Samples

The Variational Autoencoder defines a generative process $\\mathbf{z} \\sim p_{\\theta}(\\mathbf{z}), \\  \\mathbf{x} \\sim p_{\\theta}(\\mathbf{x} | \\mathbf{z})$. A *good* VAE should explain well the data $\\mathbf{x}$ and samples $\\mathbf{x} \\sim p_{\\theta}(\\mathbf{x} |\\mathbf{z}), \\mathbf{z} \\sim p_{\\theta}(\\mathbf{z})$ should be representive of the dataset.

### Estimating the Likelihood",0.5664804577827454,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,9.0
What is a rnn?,"A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc. A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence. The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations"," notebook 5_2, notebook 5_3",notebook 5_2,15.0,"markdown:
Great! Now that we have our one-hot encodings in place, we can move on to the RNNs!'

 
markdown:
# Introduction to Recurrent Neural Networks (RNN)

Reading material: [blog post](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) and (optionally) [this lecture](https://www.youtube.com/watch?v=iWea12EAu6U&list=PLoROMvodv4rOhcuXMZkNm7j3fVwBBY42z).

___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:",0.49259939789772034,notebook 5_3,11.0,"___

A recurrent neural network (RNN) is a type of neural network that has been succesful in modelling sequential data, e.g. language, speech, protein sequences, etc.

A RNN performs its computations in a cyclic manner, where the same computation is applied to every sample of a given sequence.
The idea is that the network should be able to use the previous computations as some form of memory and apply this to future computations.
An image may best explain how this is to be understood,

![rnn-unroll image](https://github.com/DeepLearningDTU/02456-deep-learning-with-PyTorch/blob/master/static_files/rnn-unfold.png?raw=1)


where it the network contains the following elements:

- $x$ is the input sequence of samples, 
- $U$ is a weight matrix applied to the given input sample,
- $V$ is a weight matrix used for the recurrent computation in order to pass memory along the sequence,
- $W$ is a weight matrix used to compute the output of the every timestep (given that every timestep requires an output),', ""- $h$ is the hidden state (the network's memory) for a given time step, and"", '- $o$ is the resulting output.

When the network is unrolled as shown, it is easier to refer to a timestep, $t$.
We have the following computations through the network:",0.5473670959472656,notebook 5_1,26.0,"code:
class RNNLM(torch.nn.Module):
    """"""A simple implementation of a language model using RNNs.""""""
    def __init__(self, vectors:torch.Tensor):
        super().__init__()
        # register the embeddings
        self.embeddings = torch.nn.Embedding(*glove_vectors.shape)
        self.embeddings.weight.data = glove_vectors

        # register the LSTM
        self.rnn = torch.nn.LSTM(
            input_size=glove_vectors.shape[1],
            hidden_size=glove_vectors.shape[1],
            num_layers=1,
            batch_first=True,
        )

        # project the output of the LSTM (hidden state) back to the vocabulary space
        self.proj = nn.Linear(glove_vectors.shape[1], glove_vectors.shape[0], bias=False)
        # init the projection using the embeddings weights
        self.proj.weight.data = glove_vectors

    def forward(self, token_ids: torch.Tensor, retain_ws:bool=False) -> torch.Tensor:
        # convert the tokens into vectors
        ws = self.embeddings(token_ids)

        # store the word vectors for debugging
        if retain_ws:
          ws.retain_grad()
          self.ws = ws

        # shift the input `ws` right
        w0 = torch.zeros((ws.shape[0], 1, self.embeddings.weight.shape[1]),
                         device=self.embeddings.weight.device, dtype=torch.long)
        ws_shifted = torch.cat([w0, ws[:, :-1]], dim=1)

        # call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)",0.6820365190505981,notebook 5_1,27.0,"# call the RNN: w_{-1:T-1} -> h{1:T}
        hidden_states, _ = self.rnn(ws_shifted)

        # project the hidden state to the vocabulary space
        logits = self.proj(hidden_states)
        return logits

    def sample(
            self,
            batch_size:int=1,
            num_steps:int=10,
            temperature: float=1.0,
            prevent_repetitions: bool=False
        ):
        token_ids = torch.empty((batch_size, 0), device=self.embeddings.weight.device, dtype=torch.long)
        for t in tqdm(range(num_steps), desc=f""Sampling {num_steps} steps..""):
            logits = self.forward(token_ids)
            logits_t = logits[:, -1:] / temperature
            if prevent_repetitions and t > 0:
                # mask the last generated tokens to avoid repetitions
                logits_t.scatter_(index=token_ids[:,-1:, None], dim=2, value=-math.inf)
            p_wt = torch.distributions.Categorical(logits=logits_t)
            tokens_t = p_wt.sample()
            token_ids = torch.cat([token_ids, tokens_t], dim=1)
        return token_ids


# init RNN initialized from GloVe vectors
# delete the checkpoint if you get `PytorchStreamReader` error
checkpoint_file = Path(""rrn-lm.ckpt"")
rnn = RNNLM(glove_vectors)
if checkpoint_file.exists():
    # checkpoint_file.unlink() # delete the checkpoint by un-commenting this line
    rnn.load_state_dict(torch.load(checkpoint_file, map_location=""cpu""))'",0.6924102306365967,CoursePlan.txt,13.0,"Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.6956328749656677,notebook 5_1,31.0,"# backward and optimize
            loss.backward()
            optimiser.step()
            step += 1
            pbar.update(1)

            # Report
            if step % 5 ==0 :
                loss = loss.detach().cpu()
                pbar.set_description(f""epoch={epoch}, step={step}, loss={loss:.1f}"")

            # save checkpoint
            if step % 50 ==0 :
                torch.save(rnn.state_dict(), checkpoint_file)
            if step >= num_steps:
                break
        epoch += 1'

 
code:
# sample the RNN language model
with torch.no_grad():
    sample = rnn.sample(num_steps=10, batch_size=10, temperature=0.5, prevent_repetitions=True)
    rich.print(glove_tokenizer.decode_batch(sample.detach().cpu().numpy()))'

 
code:
_ = rnn.cpu()
# free-up memory if needed: delete the RNN model
# del rnn'

 
markdown:
**Exercise 3**: What would happen if the inputs of the RNN were not shifted to the right (in sample in the RNNLM class)?  

> *Insert your answer here.*'

 
markdown:
___
## III. Attention mechanism and Transformers",0.6975076198577881,notebook 5_1,21.0,"**Recurrent neural networks (RNNs)** implement a recursive function $f_\\theta$ using neural networks, which makes them a particularly good fit for sequential data. In the general setting, RNNs model the acquired knowledge at time $t$ using an additional variable $\\mathbf{h}_t$ of dimension $d_h$ (*hidden state*). The hidden state at step $t-1$ is updated with the information extracted from the observation $\\mathbf{w}_t$ using a function
$$
h_\\theta: (\\mathbf{w}_{t}, \\mathbf{h}_{t-1}) \\rightarrow \\mathbf{h}_{t} \\ ,
$$
which can be imlemented using an arbitrary neural network that takes the tuple $(\\mathbf{w}_{t}, \\mathbf{h}_t)$ as input and returns a new hidden state $\\mathbf{h}_{t+1}$. RRNs can be applied to parametrize language models by projecting the hidden state $\\mathbf{t}$ into the vocabulary space using a projection matrix $\\mathbf{F} \\in \\mathcal{R}^{V \\times d_h}$. This results in parameterizing the transition distribution as
$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$",0.7364881634712219,notebook 5_3,56.0,"Go back and generate a more complex patterned dataset to learn from. Do you see any significant differences between the vanilla RNN and LSTM when you increase the difficulty of the task?'

 
markdown:
# It works, now what?'

 
markdown:
In this notebook you have learned how to use embeddings, recurrent neural networks, and the LSTM cell in particular.
', ""As we have already seen, RNNs are excellent for sequential data such as language. But what do we do if we're modelling data with strong dependency in both directions? Like in many things deep learning, we can build powerful models by stacking layers on top of each other; *bi-directional* RNNs consist of two LSTM cells, one for each direction. A sequence is first fed into the forward LSTM cell and the reversed sequence is then used as input to the backward LSTM cell together with the last hidden state from the forward LSTM cell. Follow [this link](https://pdfs.semanticscholar.org/4b80/89bc9b49f84de43acc2eb8900035f7d492b2.pdf) for the original paper from 1997(!)."", '
For even deeper representations, multiple layers of both uni-directional and bi-directional RNNs can be stacked ontop of each other, just like feed-forward and convolutional layers. For more information on this, check out the [LSTM PyTorch documentation](https://pytorch.org/docs/stable/nn.html#lstm). Next week we will also explore ways to combine RNNs with other types of layers for even more expressive function approximators.'",0.7405613660812378,notebook 5_3,0.0,"markdown:
# Week 5 - Recurrent Neural Networks

In this lab, we will introduce different ways of learning from sequential data.

As a recurring example, we will train neural networks to do language modelling, i.e. predict the next token in a sentence. In the context of natural language processing a token could be a character or a word, but mind you that the concepts introduced here apply to all kinds of sequential data, such as e.g. protein sequences, weather measurements, audio signals, or videos, just to name a few.
', ""To really get a grasp of what is going on inside a recurrent neural network (RNN), we will carry out a substantial part of this exercise in NumPy rather than PyTorch. We start off with a simple toy problem, build an RNN using NumPy, train and it, and see for ourselves that it really works. Once we're convinced, we proceed to build and train a Long Short-Term Memory (LSTM) cell, also in NumPy. This is *not* simply to cause you frustration, but rather to provide you with a deeper understanding of the recurrence in RNNs, which will become very beneficial to you in the following weeks. Once you understand the inner workings of an RNN, we will proceed to a PyTorch implementation that you may use for the remainder of the course and in your projects."", '
To summarize, in this notebook we will show you:
* How to represent sequences of categorical variables
* How to build and train an RNN in NumPy
* How to build and train an LSTM network in NumPy
* How to build and train an LSTM network in PyTorch'",0.744327187538147,notebook 5_1,22.0,"$$
p_\\theta(\\cdot \\mid \\mathbf{w}_{<t}) = \\mathrm{Softmax}( \\mathbf{h}_t \\mathbf{F}^T)
$$
In the above figure, we showcase how a standard RNN can be applied to implement a left-to-right language model, and annotated the diagramm with the function $h_\\theta(\\mathbf{w}_{t}, \\mathbf{h}_{t-1)})$ and the projection matrix $\\mathbf{F}$.",0.7486288547515869,1.0,2.0,2.0,2.0,2.0,2.0,2.0,3.0,4.0,4.0
What topics are covered in the first three weeks of the course?,". Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper. 2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy. 3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.", CourseOutline.txt,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.6422405242919922,CoursePlan.txt,12.0,"and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures",0.6609260439872742,CoursePlan.txt,16.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima",0.704420804977417,CoursePlan.txt,17.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.7113507986068726,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants",0.7360115051269531,CoursePlan.txt,8.0,"Detailed content

Links to individual video lectures and lecture slides are given below. Here is a link to all 2016 video lectures as a playlist and a Google doc folder with all the lecture slides. More videos have been added over the years. They are all linked below. A very good alternative video resource is Hugo Larochelle’s YouTube playlist.
Week 1 - Feed-forward neural networks - do it yourself pen and paper

    During this week and the following two weeks watch video lectures: 

    Part 0 Overview
    Part 1 Deep learning
    Part 2.1 Feed-forward neural networks
    Part 2.2 Feed-forward neural networks
    Part 3 Error Backpropagation
    Part 4 Optimization

and take notes for at least 3 questions to ask. Link to lecture slides is here.",0.7562510371208191,CoursePlan.txt,14.0,"and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.

    Reading material Alex Graves book, Supervised Sequence Labelling with Recurrent Neural Networks Chapters 3.1, 3.2 and 4. Browse Michael Nielsen, Neural networks and deep learning Chapter 6 section Other approaches to deep neural nets) and onwards. A good introduction to Transformers is The Illustrated Transformer. New tutorial on Transformers https://aman.ai/primers/ai/transformers/#one-hot-encoding
    Alternative textbook chapter in the deep learning book. Andrej Karpathy has a nice blogpost that gives a good flavour of the whats and hows of RNNs.
    Carry out computer exercises week 5
    Hand in and peergrade on peergrade.io like in previous week.

Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures",0.766103982925415,CoursePlan.txt,9.0,"During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.",0.7680788040161133,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.7997888922691345,CoursePlan.txt,15.0,"Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.",0.8104292154312134,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
When does project work start?,Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work., CourseOutline.txt,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.729928731918335,CoursePlan.txt,3.0,"Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.",0.7945431470870972,CoursePlan.txt,7.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.8089946508407593,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.8135966062545776,notebook 8_2_Prerequisites_ipynb,2.0,"# Run environment
while True:
    action = env.action_space.sample() # Get a random action
    _, _, done, _ = env.step(action) # Take a step
    if done: break # Break if environment is done

env.close() # Close environment
env.play() # Show the video'

 
markdown:
Hooray! You now have a working `Gym` environment that we can take actions in and render.'",0.8657189607620239,CoursePlan.txt,10.0,"Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io.",0.8798943758010864,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants",0.9053341746330261,notebook 8_3,6.0,"try:
    training_rewards, losses = [], []', ""    print('start training')"", '    for i in range(num_episodes):
        rollout = []
        s = env.reset()
        for j in range(rollout_limit):
            # generate rollout by iteratively evaluating the current policy on the environment
            with torch.no_grad():
                a_prob = policy(torch.from_numpy(np.atleast_2d(s)).float())
                a = torch.multinomial(a_prob, num_samples=1).squeeze().numpy()
            s1, r, done, _ = env.step(a)
            rollout.append((s, a, r))
            s = s1
            if done: break
        # prepare batch
        rollout = np.array(rollout)
        states = np.vstack(rollout[:,0])
        actions = np.vstack(rollout[:,1])
        rewards = np.array(rollout[:,2], dtype=float)
        returns = compute_returns(rewards, discount_factor)
        # policy gradient update
        policy.optimizer.zero_grad()
        a_probs = policy(torch.from_numpy(states).float()).gather(1, torch.from_numpy(actions)).view(-1)
        loss = policy.loss(a_probs, torch.from_numpy(returns).float())
        loss.backward()
        policy.optimizer.step()
        # bookkeeping
        training_rewards.append(sum(rewards))
        losses.append(loss.item())
        # print
        if (i+1) % val_freq == 0:
            # validation
            validation_rewards = []
            for _ in range(10):",0.9126102924346924,CoursePlan.txt,6.0,"Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.912873387336731,CoursePlan.txt,17.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.9182145595550537,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
How are students expected to communicate and evaluate their project work?,"Organize and present project results at the final project presentation and in report. Read, evaluate and give feedback to work of other students", LearningObjectives.txt,CoursePlan.txt,3.0,"Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.",0.5658602714538574,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.6326117515563965,CoursePlan.txt,4.0,"grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.  

Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.6873175501823425,CoursePlan.txt,6.0,"Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.8028222322463989,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.8609125018119812,notebook 4_2,6.0,"markdown:
We now evaluate the network as above, but on the entire test set.'

 
code:
# Evaluate test set
confusion_matrix = np.zeros((n_classes, n_classes))
with torch.no_grad():
    model.eval()
    test_accuracies = []
    for inputs, targets in test_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        output = model(inputs)
        loss = loss_fn(output, targets)

        predictions = output.max(1)[1]

        # Multiply by len(inputs) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy(targets, predictions) * len(inputs))
        
        confusion_matrix += compute_confusion_matrix(targets, predictions)

    test_accuracy = np.sum(test_accuracies) / len(test_set)
    
    model.train()'

 
markdown:
Here we report the **average test accuracy** (number of correct predictions divided by test set size).'

 
code:
print(f""Test accuracy: {test_accuracy:.3f}"")'

 
markdown:
Here we look a bit more in depth into the performance of the classifier, using the **confusion matrix**. The entry at the i-th row and j-th column indicates the number of samples with true label being the i-th class and predicted label being the j-th class.

We normalize the rows: given all examples of a specific class (row), we can observe here how they are classified by our model. Ideally, we would like the entries on the diagonals to be 1, and everything else 0. This would mean that all examples from that class are classified correctly.",0.8624016046524048,notebook 8_4_Q,6.0,"markdown:
## Exercises

Read and understand the code, then play around with it and try to make it learn better and faster.

Experiment with the:

* number of episodes
* discount factor
* learning rate
* network layers


### Exercise 1 

*Describe any changes you made to the code and why you think they improve the agent.*

**Answer:**

*Answer here...*

### Exercise 2

*How high mean training a reward is your solution able to achieve? Do you think it is possible to go even higher? Why/why not?*

**Answer:**

*Answer here...*

### Exercise 3

*What role does epsilon play in the code above? Try and change the epsilon start value or the line of code that decreases eplison every update step. How does it affect learning?*

**Answer:**

*Answer here...*'",0.8704708814620972,CoursePlan.txt,10.0,"Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.
    Carry out computer exercises week 1. It is encouraged to work together with other students. Type in everything yourself. Code answers are fine not to differ much within the group and text answers should be in your own words. Note that the computer exercises may experience minor change up to 3 days before the actual session. The hand-in is the notebook with your modifications. It is only allowed to hand in .ipynb files. Each week you should only hand in one file. It is the file with EXE in its name. You hand in on peergrade.io. In order to be able to hand in on peergrade you can use this invitation link https://app.peergrade.io/join/JFFJBF or login into peergrade and use the invitation code JFFJBF. There you will receive information on handing in exercises and deadlines for activities. Some students have previously by accident signed up twice with different emails or forgotten the “student” in their DTU student mail address. If you then submit and check with different email addresses it will look as though you have not handed in.
    Peergrade exercise from three other students through peergrade.io.",0.8881858587265015,CoursePlan.txt,7.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.892407238483429,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants",0.9027102589607239,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What are the expectations regarding the final project report and presentation?,"Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion. Organize and present project results at the final project presentation and in report.", LearningObjectives.txt,CoursePlan.txt,7.0,"Final report deadline December 21st at 23:59. [Note this was earlier set to a later date but according to DTU rules, the latest allowed deadline is December 21st.] The report should be a maximum 6 pages plus references using this conference paper format. The report should also contain a link to your project code Github repository. Among the files in the repository should be a jupyter notebook that ideally should recreate the main results of your report. If some of your data is confidential then use some shareable data instead. For MSc students, please also include your poster in the submission.",0.5919259786605835,CoursePlan.txt,3.0,"Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:

    The course is graded using the 7-step scale.
    The final grade is based solely on the evaluation of the final project, which starts in the 7th week of the course. The project group should consist of 3-4 students. In special circumstances we can also accept groups of 1 or 2 students. (In the course catalogue it says 1-3 students. We will correct that for next year but cannot change it now.)
    The evaluation of the final project is based on two parts, both of which are done in groups but evaluated individually:

    a poster exam presentation, where the project groups document the results of their project in a poster and present to two or more teachers acting as examiners and
    a report in which the project groups document their solution. The report should be a maximum of 6 pages plus references using this conference paper format.

More details are given below.

    The student gains access to the final project by passing 6 out of 8 lab sessions that precede it.
    A lab session is passed by:

    grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.",0.6316696405410767,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.7027618885040283,CoursePlan.txt,5.0,"Week 1 computer exercise. Deadline: Monday week 2.
    Week 2 computer exercise. Deadline: Monday week 3.
    Week 3 computer exercise and 1 exercise of your own choice from course material week 1. Deadline: Monday week 4
    Week 4 computer exercise  and 1 exercise of your own choice from course material week 1-2. Deadline: Monday week 5.
    Week 5 computer exercise. Deadline: Monday week 6.
    Week 6 computer exercise. Deadline: Monday week 7.
    Week 7 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 8
    Week 8 computer exercise  and 1 exercise of your own choice from course material week 1-3. Deadline: Monday week 9.
    Project selection. Deadline Friday, Oct 20th 2023 at 23.59.
    Link to 2023 project selection sheet
    Project synopsis. Deadline: Monday week 9 at 23:59. The synopsis should be approximately half a page and maximum one page with a project title, motivation, background, milestones and references. It is important that the plan is realistic. The main purposes of the synopsis are to make sure the project size is well-calibrated and is concrete enough to start working from day one. The synopsis will not be used in the evaluation. The synopsis should be sent to your project supervisor.",0.8008854389190674,CoursePlan.txt,6.0,"Project poster session. PhD students taking the course as part of their PhD will not have to make a poster and take part of the poster session. In mixed groups of PhD and non-PhD students, only the non-PhD students have to take part in the poster session. The exam date is December 7th from 9 to 17. We divide the day into half hour slots and your group will later be given the possibility to register for a slot. A link to sign up for the poster session will appear here in due time. So having another exam on the same day should not be a problem. We will also organise an extra exam date for those of you who cannot make it on the date. It will be group poster presentations. We will invite outside guests and we will walk around and ask questions to all groups. We will make a schedule for when the teachers visit your poster. Plan for a 2 minute presentation per group member and 1-2 minutes for questions. The remainder of the time you can either present your poster to other students and guests or go visit other posters. Remember that it is important for the overall impression that you divide the presentation and answering of the questions more or less equally between you. The poster should be in A1 format. Remember to put both your names and student numbers under title. Here and here are links to examples using the latex template and here is one in powerpoint. You do not have to use that. The DTU library offers poster printing for a not too high price.",0.8043417930603027,notebook 4_2,5.0,"predictions = output.max(1)[1]

                    # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=False).
                    valid_accuracies_batches.append(accuracy(targets, predictions) * len(inputs))

                model.train()
                
            # Append average validation accuracy to list.
            valid_accuracies.append(np.sum(valid_accuracies_batches) / len(test_set))
     
            print(f""Step {step:<5}   training accuracy: {train_accuracies[-1]}"")
            print(f""             test accuracy: {valid_accuracies[-1]}"")

print(""Finished training."")'

 
markdown:
## Test the network

Now we show a batch of test images and generate a table below with the true and predicted class for each of these images.'

 
code:
inputs, targets = next(iter(test_loader))
inputs, targets = inputs.to(device), targets.to(device)
show_image(make_grid(inputs))
plt.show()

outputs = model(inputs)
_, predicted = torch.max(outputs.data, 1)

print(""    TRUE        PREDICTED"")
print(""-----------------------------"")
for target, pred in zip(targets, predicted):
    print(f""{classes[target.item()]:^13} {classes[pred.item()]:^13}"")'

 
markdown:
We now evaluate the network as above, but on the entire test set.'",0.8707907199859619,CoursePlan.txt,4.0,"grading the reports from lab sessions of 3 other students on Peergrade and
    passing the lab as judged by the teacher. More details given below.

More details on peer grading: The 8 lab sessions are evaluated using peer grading. We use peer grading to ensure more accurate evaluation and better feedback. Graders get 3 reports at each deadline and have one week to carry out the feedback. If you forget to perform your peer grading it is not nice to your fellow students, but you can still pass that lab for which you forgot to grade.  

Handing in and peer grading six of the eight labs reports is required for being able to execute the project and eventually pass the course. If a hand-in is not passed you will be contacted with the option of re-submitting the lab directly to the teacher so if you hear nothing assume that you have passed the lab. You can also contact the teacher directly on Slack if something went wrong with the submission of the lab. Peergrade deadlines are strict so no need to write about getting an extension.

The following reports should be handed in jupyter notebook format. The weeks refer to weeks in term, and the fall break week is not counted.",0.875715970993042,notebook 4_3,8.0,"predictions = output.max(1)[1]

                    # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=False).
                    valid_accuracies_batches.append(accuracy(targets, predictions) * len(inputs))

                model.train()
                
            # Append average validation accuracy to list.
            valid_accuracies.append(np.sum(valid_accuracies_batches) / len(test_set))
     
            print(f""Step {step:<5}   training accuracy: {train_accuracies[-1]}"")
            print(f""             test accuracy: {valid_accuracies[-1]}"")

print(""Finished training."")'

 
markdown:
## Test the network on the test data'

 
code:
# Evaluate test set
with torch.no_grad():
    model.eval()
    test_accuracies = []
    for inputs, targets in test_loader:
        inputs, targets = inputs.to(device), targets.to(device)
        output = model(inputs)
        loss = loss_fn(output, targets)

        predictions = output.max(1)[1]

        # Multiply by len(x) because the final batch of DataLoader may be smaller (drop_last=True).
        test_accuracies.append(accuracy(targets, predictions) * len(inputs))

    test_accuracy = np.sum(test_accuracies) / len(test_set)
    print(f""Test accuracy: {test_accuracy:.3f}"")
    
    model.train()'

 
markdown:
## Using a pre-trained model",0.878004789352417,notebook 7_2,24.0,"code:
# test your implementation

def test_normal_distribution():
    """"""a few safety checks for your implementation""""""
    N = 1000000
    ones = torch.ones(torch.Size((N,)))
    mu = 1.224 * ones
    sigma = 0.689 * ones
    dist = ReparameterizedDiagonalGaussian(mu, sigma.log())
    z = dist.sample()
    
    # Expected value E[N(0, 1)] = 0
    expected_z = z.mean()
    diff = (expected_z - mu.mean())**2
    assert diff < 1e-3, f""diff = {diff}, expected_z = {expected_z}""
    
    # Variance E[z**2 - E[z]**2]
    var_z = (z**2 - expected_z**2).mean()
    diff = (var_z - sigma.pow(2).mean())**2
    assert diff < 1e-3, f""diff = {diff}, var_z = {var_z}""
    
    # log p(z)
    from torch.distributions import Normal
    base = Normal(loc=mu, scale=sigma)
    diff = ((base.log_prob(z) - dist.log_prob(z))**2).mean()
    assert diff < 1e-3, f""diff = {diff}""

test_normal_distribution()",0.8867400884628296,notebook 8_4_Q,6.0,"markdown:
## Exercises

Read and understand the code, then play around with it and try to make it learn better and faster.

Experiment with the:

* number of episodes
* discount factor
* learning rate
* network layers


### Exercise 1 

*Describe any changes you made to the code and why you think they improve the agent.*

**Answer:**

*Answer here...*

### Exercise 2

*How high mean training a reward is your solution able to achieve? Do you think it is possible to go even higher? Why/why not?*

**Answer:**

*Answer here...*

### Exercise 3

*What role does epsilon play in the code above? Try and change the epsilon start value or the line of code that decreases eplison every update step. How does it affect learning?*

**Answer:**

*Answer here...*'",0.8905931115150452,0.0,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
What is the schedule for the '02456 Deep Learning 2023' course and what teaching method is used?,"Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)... We use flipped classroom teaching.", CoursePlan.txt,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants",0.3498866558074951,CoursePlan.txt,9.0,"During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.",0.5005208849906921,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.5075609683990479,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.5363016128540039,CoursePlan.txt,17.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.5426092743873596,CoursePlan.txt,2.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:",0.5474171042442322,CoursePlan.txt,15.0,"Week 6 - Tricks of the trade and data science challenge

    Watch week 4 video lectures 

    02456week4 1 1 Initialization and gradient clipping 
    02456week4 1 2 batch normalization
    02456week4 2 1 regularization
    02456week4 2 2 regularization methods
    02456week4 2 3 data augmentation
    02456week4 2 4 ensemble methods and dropout
    02456week4 3 recap
    2017 37 reasons your nn working (part 1 of 2) Walk through of the 37 reasons why your neural network is not working blog post.
    2017 37 reasons you not working (part 2 of 2)
    2020 Recipe to training neural networks - become one with data (part 1 of 3).
    2020 Recipe to training neural networks - baselines (part 2 of 3).
    2020 Recipe to training neural networks - overfit, tune and tune some more (part 3 of 3).

and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.",0.5519322156906128,CoursePlan.txt,12.0,"and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures",0.5593087673187256,CoursePlan.txt,16.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima",0.5711426138877869,CoursePlan.txt,13.0,"Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures

    02456week3 1 RNN (PART 1 of 3)
    02456week3 1 RNN (PART 2 of 3)
    02456week3 1 RNN (PART 3 of 3)
    02456week3.2_RNN_training (PART 1 of 3)
    02456week3.2_RNN_training (PART 2 of 3)
    02456week3 2 RNN training (PART 3 of 3)
    02456week3 3 Attention (PART 1 of 2)
    02456week3 3 Attention (PART 2 of 2)
    02456week3 4 Supervised learning recap
    2017 Quasi RNN
    2017 Non-recurrent sequence to sequence models
    2017 Text summarization
    2020 Transformers (PART 1 of 2)
    2020 Transformers (PART 2 of 2)
    2020 Language modelling - GPT-2 and 3
    2020 BERT

and take notes for at least 3 questions to ask. Link to: 2016 lectures, 2017 lecture updates and 2020 lecture updates.",0.58079993724823,1.0,2.0,2.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0
What are the requirements for students to gain access to the final project in the '02456 Deep Learning 2023' course?,The student gains access to the final project by passing 6 out of 8 lab sessions that precede it. A lab session is passed by: grading the reports from lab sessions of 3 other students on Peergrade and passing the lab as judged by the teacher, CoursePlan.txt,CoursePlan.txt,0.0,"02456 Deep learning 2023 - course plan and information

Time: Mondays at 13:00-17:00 (first session is August 28th, 2023)

Locations: We will use the following rooms - building/room - (Campus map):

B303A-A042

B303A-046

B303A-047

B303A-048

B303A-HOEST

Zoom (You need to sign-in with you DTU account)

We use flipped classroom teaching. During the weeks with labs, the teachers and teaching assistants will circulate between the rooms so there will be opportunity to meet all. Any short lectures/instructions will be repeated in all rooms. You are free to choose whatever room you prefer of course respecting the limits on room capacity. During the weeks with project work each room will cover specific topics.

If you are not able to be on campus or prefer to work remotely you will be able to participate through Zoom. One teaching assistant will be dedicated to the Zoom channel: Zoom.

We also use Slack for communication: We will make dedicated channels for labs and projects. Here is a Slack invite link. (In Slack you can add channels from the list of channels by clicking the “+” next to Channels in the left panel and click “Browse channels” to choose.)

Bring a laptop.

The first eight weeks of the course will be dedicated to lab work. There will be a brief introduction to the course at the first session and a number of dedicated meetings online or in person with project supervisors.

Teachers

    Ole Winther
    Jes Frellsen

Teaching assistants",0.4220711588859558,LearningObjectives.txt,0.0,"Demonstrate knowledge of machine learning terminology such as likelihood function, maximum likelihood, Bayesian inference, feed-forward, convolutional and Transformer neural networks, and error back propagation.

Understand and explain the choices and limitations of a model for a given setting.

Apply and analyze results from deep learning models in exercises and own project work.

Plan, delimit and carry out an applied or methods-oriented project in collaboration with fellow students and project supervisor.

Assess and summarize the project results in relation to aims, methods and available data.

Carry out the project and interpret results by use of computational framework for GPU programming such as PyTorch.

Structure and write a final short technical report including problem formulation, description of methods, experiments, evaluation and conclusion.

Organize and present project results at the final project presentation and in report.

Read, evaluate and give feedback to work of other students.",0.44861432909965515,CourseOutline.txt,0.0,"The purpose of this course is to give the student a detailed understanding of the deep artificial neural network models, their training, computational frameworks for deployment on fast graphical processing units, their limitations and how to formulate learning in a diverse range of settings. These settings include classification, regression, sequences and other types of structured input and outputs and for reasoning in complex environments.

The course outline is:
1. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
2. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in NumPy.
3. Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
4. Convolutional neural networks (CNN) + presentation of student projects.
5. Sequence modelling for text data with Transformers.
6. Tricks of the trade and data science with PyTorch + Start of student projects.
7. Variational learning and generative adversarial networks for unsupervised and semi-supervised learning.
8. Reinforcement learning - policy gradient and deep Q-learning.

Starting from week 6 and full time from week 9 and the rest of the term will be spent on tutored project work.",0.548279881477356,CoursePlan.txt,2.0,"You can also sign up to Google cloud (GCP) and get free credits there. Here are instructions on how to set up GPU computation on Google cloud. Follow the instructions until Optional.
Topics in the first eight weeks

    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part I do it yourself on pen and paper.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part II do it yourself in Python.
    Introduction to statistical machine learning, feed-forward neural networks (FFNN) and error back-propagation. Part III PyTorch.
    Convolutional neural networks (CNN)
    Transformers and recurrent neural networks (RNN)
    Tricks of the trade and data science with PyTorch
    Variational learning and generative adversarial networks for unsupervised and semi-supervised learning + deadline for selection of student projects on Friday, Oct 13th 2023 at 23.59.
    Reinforcement learning - policy gradient and deep Q-learning + start of student projects. 

Week 9-13 will be only project work

In the seven project weeks we will still meet on Mondays for project work and supervision.
Evaluation and peer grading during the course

​​Evaluation:",0.5536284446716309,CoursePlan.txt,9.0,"During this week and the following two weeks read Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapters 1-3 (stop when reaching the section called Overfitting and regularization) and browse Chapter 4. Note that this is reading material for the first three weeks of the course. Also, in total six exercises of your own choice will be homework later in the course.
    Alternative textbooks: All topics are also covered in the deep learning book that may be read as a supplement. The book can also be bought from the DTU bookstore. You will get 10% discount with this link. Feed-forward neural networks are covered in this chapter. Chapter 1 gives an introduction to deep learning and Part II gives the necessary background on linear algebra, probability, numerical computation and machine learning. Alternative textbook 2: Chris Bishop, Pattern recognition and machine learning. If you need to up your game in mathematics, the book Mathematics for machine learning is an excellent resource and the note Mathematics for Machine Learning offers a concise and compressed collection of the mathematical concepts used in deep learning. These resources are freely available online and are very valuable sources of information.
    Install software on your laptop or go directly to Google CoLab (see above). Installation guide for laptop and cloud may be found here.",0.5682278275489807,CoursePlan.txt,17.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 slides and 2017 slides and 2020 slides.

    Reading material DL Chapter 14 and 20.10.3. (Further learning a course dedicated to generative modelling.)
    One exercise from the book chapters.
    Carry out computer exercises week 7 on autoencoder un- and semi-supervised. Hand in and peergrade on peergrade.io like in previous weeks.
    Project selection deadline is this week (see above).

Week 8 - Reinforcement learning 

    Watch week 6 video lectures 

    02456week6 1 1 reinforcement learning
    02456week6 1 2 reinforcement learning approaches
    02456week6 2 1 AlphaGo policy and value networks
    02456week6 2 2 AlphaGo steps 1 to 4
    02456week6 3 policy gradients
    02456week6 4 a few last words
    2017 Deep Q learning
    2017 Evolutionary strategies

and take notes for at least 3 questions to ask. Link to lectures here and here for 2017 update.

    Reading: another nice blog post by Andrei Karpathy. Optional reading material on the connection between variational and reinforcement learning.
    One exercise from the book chapters. 
    Computer exercises on reinforcement learning methods (policy gradient, deep Q learning, evolutionary strategies) in the openAI Gym. Carry out exercises week 8. Hand in and peergrade on peergrade.io like in previous weeks.
    Project work.",0.5944523811340332,CoursePlan.txt,12.0,"and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 6 (stop when reaching section called Other approaches to deep neural nets).
    Alternative textbook chapter in the deep learning book.
    One exercise from the book chapters.
    Carry out computer exercises week 4.
    Hand in the notebook marked with EXE on peergrade.io.
    Peergrade exercise from three other students through peergrade.io. You will receive instructions about this from peergrade.io.

Week 5 - Transformers and recurrent neural networks

    Watch week 3 video lectures",0.6015702486038208,CoursePlan.txt,11.0,"Week 2 - Feed-forward neural networks - do it yourself in NumPy

    See 1. and 2. from Week 1.
    Carry out computer exercises week 2.
    Peergrade exercise from three other students through peergrade.io. 

Week 3 - Feed-forward neural networks in PyTorch

    See 1. and 2. from Week 1.
    Carry out computer exercises week 3.
    Peergrade exercise from three other students through peergrade.io.
    Hand in the notebook marked with EXE on peergrade.io. It should contain your added code in the exercises and the answer of one exercise from Michael Nielsen's book (see point 3. above). The answer to the book exercise should be in a markdown cell at the bottom of the notebook.
    Peergrade exercise from three other students through peergrade.io.  

Week 4 - Convolutional neural networks

    Watch week 2 video lectures  

    Part 1 Introduction to CNNs (PART 1/2)
    Part 1 Introduction to CNNs (PART 2/2)
    Part 2 CNNs the details (PART 1/2)
    Part 2 CNNs the details (PART 2/2)
    2017 CNN update
    2017 Activation functions update
    2017 Image segmentation

and take notes for at least 3 questions to ask. Link to lecture slides is here and here for 2017 updates.",0.6353549957275391,CoursePlan.txt,16.0,"and take notes for at least 3 questions to ask. Link to lecture slides 2016 lecture slides, 2017 blog post and 2020 lecture slides.  

    Reading material Michael Nielsen, Neural networks and deep learning http://neuralnetworksanddeeplearning.com/ Chapter 3 from section Overfitting and regularization and Chapter 5.
    Alternative textbook chapters on regularization, optimization, deep learning practice and applications from the deep learning book.  
    Additional material: Andrei Karpathy blogpost on how to approach a data science problem with deep learning, blogpost on things that can go wrong in neural network training and interactive initialization demo.
    Computer exercises week 6 using PyTorch on the Kaggle competition leaf classification. Hand in and peergrade on peergrade.io like in previous weeks.

Week 7 - Un- and semi-supervised learning

    Watch week 5 video lectures

    02456week5 1 1 unsupervised learning
    02456week5 1 2 unsupervised learning latent variables
    02456week5 2 1 autoencoders
    02456week5 2 2 autoencoders layerwise pretraining
    02456week5 3 1 variational autoencoders
    02456week5 3 2 semi-supervised variational autoencoders 
    2017 Generative adversarial networks
    2020 Flows
    2020 Self-supervised learning
    2020 Self-training/noisy student
    2020 Distribution Augmentation
    2020 Flat minima",0.6418927907943726,notebook 8_5_Deep,4.0,"code:
# train Deep Q-network

num_episodes = 1000
episode_limit = 100
batch_size = 64
learning_rate = 0.005
gamma = 0.99 # discount rate
tau = 0.01 # target network update rate
replay_memory_capacity = 10000
prefill_memory = True
val_freq = 100 # validation frequency

n_inputs = env.observation_space.n
n_outputs = env.action_space.n

# initialize DQN and replay memory
policy_dqn = DQN(n_inputs, n_outputs, learning_rate)
target_dqn = DQN(n_inputs, n_outputs, learning_rate)
target_dqn.load_state_dict(policy_dqn.state_dict())

replay_memory = ReplayMemory(replay_memory_capacity)",0.6570587158203125,1.0,1.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,7.0
